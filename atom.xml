<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寻人启事</title>
  
  
  <link href="https://ainexur.github.io/atom.xml" rel="self"/>
  
  <link href="https://ainexur.github.io/"/>
  <updated>2023-03-28T11:57:27.077Z</updated>
  <id>https://ainexur.github.io/</id>
  
  <author>
    <name>ainexur</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx-too-many-close-wait复现</title>
    <link href="https://ainexur.github.io/2023/03/26/nginx-too-many-close-wait%E5%A4%8D%E7%8E%B0/"/>
    <id>https://ainexur.github.io/2023/03/26/nginx-too-many-close-wait%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-03-26T05:29:14.000Z</published>
    <updated>2023-03-28T11:57:27.077Z</updated>
    
    <content type="html"><![CDATA[<p>惯例先贴地址：<a href="https://github.com/tonyo/nginx-too-many-close-wait">https://github.com/tonyo/nginx-too-many-close-wait</a></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>WSL</p><ul><li><p>Ubuntu 22.04.1 LTS on Windows 10 x86_64</p></li><li><p>Docker version 20.10.21</p></li><li><p>Python 3.10.6  [GCC 11.3.0] on linux</p></li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li>docker </li><li>docker-compose</li><li>python3</li></ol><h1 id="Docker重现步骤（未能重现）"><a href="#Docker重现步骤（未能重现）" class="headerlink" title="Docker重现步骤（未能重现）"></a>Docker重现步骤（未能重现）</h1><h2 id="1-拉代码"><a href="#1-拉代码" class="headerlink" title="1.拉代码"></a>1.拉代码</h2><pre><code class="hljs shell">git clone https://github.com/ainexur/nginx-too-many-close-wait.gitcd nginx-too-many-close-wait</code></pre><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置linux内核最大连接数</span>sudo sysctl -w net.core.somaxconn=8<span class="hljs-meta prompt_"># </span><span class="language-bash">第一个窗口</span>docker-compose up<span class="hljs-meta prompt_"># </span><span class="language-bash">第二个窗口</span>./run_load_tester.sh<span class="hljs-meta prompt_"># </span><span class="language-bash">第三个窗口</span>docker-compose exec nginx watch &#x27;netstat -atunpl | grep CLOSE_WAIT&#x27;</code></pre><blockquote><p>docker-compose up 执行报错</p><p>Traceback (most recent call last):<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3&#x2F;connectionpool.py”, line 699, in urlopen<br>    httplib_response &#x3D; self._make_request(<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3&#x2F;connectionpool.py”, line 394, in _make_request<br>    conn.request(method, url, **httplib_request_kw)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1282, in request<br>    self._send_request(method, url, body, headers, encode_chunked)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1328, in _send_request<br>    self.endheaders(body, encode_chunked&#x3D;encode_chunked)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1277, in endheaders<br>    self._send_output(message_body, encode_chunked&#x3D;encode_chunked)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1037, in _send_output<br>    self.send(msg)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 975, in send<br>    self.connect()<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;transport&#x2F;unixconn.py”, line 30, in connect<br>    sock.connect(self.unix_socket)<br>FileNotFoundError: [Errno 2] No such file or directory</p><p>During handling of the above exception, another exception occurred:</p><p>Traceback (most recent call last):<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;requests&#x2F;adapters.py”, line 439, in send<br>    resp &#x3D; conn.urlopen(<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3&#x2F;connectionpool.py”, line 755, in urlopen<br>    retries &#x3D; retries.increment(<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3&#x2F;util&#x2F;retry.py”, line 532, in increment<br>    raise six.reraise(type(error), error, _stacktrace)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;six.py”, line 718, in reraise<br>    raise value.with_traceback(tb)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3&#x2F;connectionpool.py”, line 699, in urlopen<br>    httplib_response &#x3D; self._make_request(<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;urllib3&#x2F;connectionpool.py”, line 394, in _make_request<br>    conn.request(method, url, **httplib_request_kw)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1282, in request<br>    self._send_request(method, url, body, headers, encode_chunked)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1328, in _send_request<br>    self.endheaders(body, encode_chunked&#x3D;encode_chunked)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1277, in endheaders<br>    self._send_output(message_body, encode_chunked&#x3D;encode_chunked)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 1037, in _send_output<br>    self.send(msg)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;http&#x2F;client.py”, line 975, in send<br>    self.connect()<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;transport&#x2F;unixconn.py”, line 30, in connect<br>    sock.connect(self.unix_socket)<br>urllib3.exceptions.ProtocolError: (‘Connection aborted.’, FileNotFoundError(2, ‘No such file or directory’))</p><p>During handling of the above exception, another exception occurred:</p><p>Traceback (most recent call last):<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;api&#x2F;client.py”, line 214, in _retrieve_server_version<br>    return self.version(api_version&#x3D;False)[“ApiVersion”]<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;api&#x2F;daemon.py”, line 181, in version<br>    return self._result(self._get(url), json&#x3D;True)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;utils&#x2F;decorators.py”, line 46, in inner<br>    return f(self, *args, **kwargs)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;api&#x2F;client.py”, line 237, in _get<br>    return self.get(url, **self._set_request_timeout(kwargs))<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;requests&#x2F;sessions.py”, line 555, in get<br>    return self.request(‘GET’, url, **kwargs)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;requests&#x2F;sessions.py”, line 542, in request<br>    resp &#x3D; self.send(prep, **send_kwargs)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;requests&#x2F;sessions.py”, line 655, in send<br>    r &#x3D; adapter.send(request, **kwargs)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;requests&#x2F;adapters.py”, line 498, in send<br>    raise ConnectionError(err, request&#x3D;request)<br>requests.exceptions.ConnectionError: (‘Connection aborted.’, FileNotFoundError(2, ‘No such file or directory’))</p><p>During handling of the above exception, another exception occurred:</p><p>Traceback (most recent call last):<br>  File “&#x2F;usr&#x2F;bin&#x2F;docker-compose”, line 33, in <module><br>    sys.exit(load_entry_point(‘docker-compose&#x3D;&#x3D;1.29.2’, ‘console_scripts’, ‘docker-compose’)())<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;compose&#x2F;cli&#x2F;main.py”, line 81, in main<br>    command_func()<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;compose&#x2F;cli&#x2F;main.py”, line 200, in perform_command<br>    project &#x3D; project_from_options(‘.’, options)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;compose&#x2F;cli&#x2F;command.py”, line 60, in project_from_options<br>    return get_project(<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;compose&#x2F;cli&#x2F;command.py”, line 152, in get_project<br>    client &#x3D; get_client(<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;compose&#x2F;cli&#x2F;docker_client.py”, line 41, in get_client<br>    client &#x3D; docker_client(<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;compose&#x2F;cli&#x2F;docker_client.py”, line 170, in docker_client<br>    client &#x3D; APIClient(use_ssh_client&#x3D;not use_paramiko_ssh, **kwargs)<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;api&#x2F;client.py”, line 197, in <strong>init</strong><br>    self._version &#x3D; self._retrieve_server_version()<br>  File “&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;docker&#x2F;api&#x2F;client.py”, line 221, in _retrieve_server_version<br>    raise DockerException(<br>docker.errors.DockerException: Error while fetching server API version: (‘Connection aborted.’, FileNotFoundError(2, ‘No such file or directory’))</p><p>原因：WSL2不能使用传统的linux安转docker，可用<code>curl https://get.docker.com | sh</code></p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker状态</span>sudo service docker status<span class="hljs-meta prompt_"># </span><span class="language-bash">启动docker</span>sudo service docker start</code></pre></blockquote><h1 id="自建环境"><a href="#自建环境" class="headerlink" title="自建环境"></a>自建环境</h1><pre><code class="hljs shell">Configuration summary  + using system PCRE library  + OpenSSL library is not used  + using system zlib library  nginx path prefix: &quot;/usr/local/nginx&quot;  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;  nginx modules path: &quot;/usr/local/nginx/modules&quot;  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;  nginx http client request body temporary files: &quot;client_body_temp&quot;  nginx http proxy temporary files: &quot;proxy_temp&quot;  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;  nginx http scgi temporary files: &quot;scgi_temp&quot;</code></pre><pre><code class="hljs shell">Configuration summary  + using system PCRE library  + using system OpenSSL library  + using system zlib library  nginx path prefix: &quot;/usr/local/openresty/nginx&quot;  nginx binary file: &quot;/usr/local/openresty/nginx/sbin/nginx&quot;  nginx modules path: &quot;/usr/local/openresty/nginx/modules&quot;  nginx configuration prefix: &quot;/usr/local/openresty/nginx/conf&quot;  nginx configuration file: &quot;/usr/local/openresty/nginx/conf/nginx.conf&quot;  nginx pid file: &quot;/usr/local/openresty/nginx/logs/nginx.pid&quot;  nginx error log file: &quot;/usr/local/openresty/nginx/logs/error.log&quot;  nginx http access log file: &quot;/usr/local/openresty/nginx/logs/access.log&quot;  nginx http client request body temporary files: &quot;client_body_temp&quot;  nginx http proxy temporary files: &quot;proxy_temp&quot;  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;  nginx http scgi temporary files: &quot;scgi_temp&quot;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;惯例先贴地址：&lt;a href=&quot;https://github.com/tonyo/nginx-too-many-close-wait&quot;&gt;https://github.com/tonyo/nginx-too-many-close-wait&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://ainexur.github.io/tags/nginx/"/>
    
    <category term="bug" scheme="https://ainexur.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>centos7指南</title>
    <link href="https://ainexur.github.io/2023/03/20/centos7%E6%8C%87%E5%8D%97/"/>
    <id>https://ainexur.github.io/2023/03/20/centos7%E6%8C%87%E5%8D%97/</id>
    <published>2023-03-20T15:01:18.000Z</published>
    <updated>2023-03-20T15:36:42.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令和操作"><a href="#常用命令和操作" class="headerlink" title="常用命令和操作"></a>常用命令和操作</h2><h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><pre><code class="hljs shell">sudo adduser k</code></pre><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><pre><code class="hljs shell">passwd k</code></pre><h4 id="开启sudo权限"><a href="#开启sudo权限" class="headerlink" title="开启sudo权限"></a>开启sudo权限</h4><ol><li><p>将root用户的sudoers增加写权限， 使得下一步可以修改该文件</p><pre><code class="hljs shell">chmod -v u+w /etc/sudoers#root用户增加写权限， 使得可修改该文件</code></pre></li><li><p>找到该位置<code>rootALL=(ALL)ALL</code>， 并在接下来的一行新增</p><pre><code class="hljs shell">kALL=(ALL)ALL</code></pre></li><li><p>去除root用户的写权限</p><pre><code class="hljs shell">chmod -v u+w /etc/sudoers#root用户增加写权限， 使得可修改该文件</code></pre></li></ol><h3 id="CentOS7允许root-x2F-开启密码登录"><a href="#CentOS7允许root-x2F-开启密码登录" class="headerlink" title="CentOS7允许root&#x2F;开启密码登录"></a>CentOS7允许root&#x2F;开启密码登录</h3><p>1、 修改sshd配置</p><pre><code class="hljs shell">vim /etc/ssh/sshd\_config</code></pre><p>将如下两项改为yes， 如果是注释#状态就取消注释</p><pre><code class="hljs shell">PasswordAuthentication yes#允许使用密码登录PermitRootLogin yes#允许root认证登录</code></pre><p>2、重启sshd</p><pre><code class="hljs shell">systemctl restart sshd</code></pre><p>3、设置免密登录(可选)</p><pre><code class="hljs shell">ssh\-kengen ssh\-copy-id -i .ssh/id\_rsa.pub  root@172.0.0.3</code></pre><h3 id="查看包名和安装位置"><a href="#查看包名和安装位置" class="headerlink" title="查看包名和安装位置"></a>查看包名和安装位置</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">先查看一波软件包名</span>rpm -qa|grep mysql<span class="hljs-meta prompt_">#</span><span class="language-bash">再使用rpm -ql 包名查看目录，例如：</span>rpm -ql mysql80-community-release-el8-2.noarch</code></pre><h3 id="查看所有已安装的包"><a href="#查看所有已安装的包" class="headerlink" title="查看所有已安装的包"></a>查看所有已安装的包</h3><pre><code class="hljs shell">yum list installed</code></pre><h3 id="更新具体的yum包"><a href="#更新具体的yum包" class="headerlink" title="更新具体的yum包"></a>更新具体的yum包</h3><pre><code class="hljs ruby">yum update mysql</code></pre><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>由于mysql被oracle收购，后面可能面临闭源问题，所以用mariadb（mysql的另一个分支代替）</p><pre><code class="hljs shell">sudo yum remove mysql#卸载残留yum -y install mariadb-server mariadb#安装service mariadb start#启动</code></pre><p>设置开机启动</p><pre><code class="hljs mysql">sudo systemctl enable mariadb#设置开机启动sudo systemctl is-enabled maradb#查看是否开机启动</code></pre><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><pre><code class="hljs shell">apt-get updateapt-get install vim</code></pre><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">ntp</span>sudo yum install ntp<span class="hljs-meta prompt_">#</span><span class="language-bash">设置时区</span>sudo timedatectl set-timezone Asia/Shanghai<span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/npt.conf新增下面配置</span><span class="hljs-meta prompt_"># </span><span class="language-bash">new(新增)</span>server ntp1.aliyun.com preferserver ntp2.aliyun.com<span class="hljs-meta prompt_">#</span><span class="language-bash">手动同步</span>sudo ntpdate ntp1.aliyun.com<span class="hljs-meta prompt_">#</span><span class="language-bash">查看时间</span>date<span class="hljs-meta prompt_">#</span><span class="language-bash">启动ntp服务</span>sudo service ntpd start<span class="hljs-meta prompt_">#</span><span class="language-bash">开机启动</span>sudo chkconfig ntpd on</code></pre><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="centos7安装docker"><a href="#centos7安装docker" class="headerlink" title="centos7安装docker"></a>centos7安装docker</h3><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><blockquote><p>基本命令</p></blockquote><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">基本命令</span><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前服务器内核版本</span>uname -r<span class="hljs-meta prompt_">#</span><span class="language-bash">安装 Docker</span>yum -y install docker<span class="hljs-meta prompt_">#</span><span class="language-bash">启动 Docker 后台服务</span>service docker start<span class="hljs-meta prompt_">#</span><span class="language-bash">测试运行 hello-world,由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</span>docker run hello-world<span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker</span>systemctl start docker.service<span class="hljs-meta prompt_">#</span><span class="language-bash">设置docker开机自启动</span>systemctl enable docker.service<span class="hljs-meta prompt_">#</span><span class="language-bash">重启docker</span>systemctl restart docker.service<span class="hljs-meta prompt_">#</span><span class="language-bash">查看docker版本</span>docker -v<span class="hljs-meta prompt_">#</span><span class="language-bash">概要信息</span>docker info<span class="hljs-meta prompt_">#</span><span class="language-bash">拉取hello-world测验</span>docker pull hello-world<span class="hljs-meta prompt_">#</span><span class="language-bash">镜像查看</span>docker images<span class="hljs-meta prompt_">#</span><span class="language-bash">查看容器列表：</span>docker ps -a</code></pre><p>CentOS7安装dokcer：<a href="https://docs.docker.com/engine/install/centos/#install-using-the-repository">https://docs.docker.com/engine/install/centos/#install-using-the-repository</a></p><pre><code class="hljs shell">sudo yum install -y yum-utilssudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.reposudo yum install docker-ce docker-ce-cli containerd.io docker-compose-pluginyum list docker-ce --showduplicates | sort -rsudo yum install docker-ce docker-ce-cli<span class="hljs-meta prompt_">#</span><span class="language-bash">复制回车，中途会提示好几个按y</span></code></pre><h3 id="docker镜像加速"><a href="#docker镜像加速" class="headerlink" title="docker镜像加速"></a>docker镜像加速</h3><pre><code class="hljs shell">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;&quot;registry-mirrors&quot;: [&quot;https://mirror.ccs.tencentyun.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h3 id="docker下安装mysql"><a href="#docker下安装mysql" class="headerlink" title="docker下安装mysql"></a>docker下安装mysql</h3><p>docker hub：<a href="https://hub.docker.com/search?q=mysql">https://hub.docker.com/search?q=mysql</a></p><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看镜像列表</span>sudo docker images<span class="hljs-meta prompt_">#</span><span class="language-bash">下载mysql容器镜像,默认最新版</span>sudo docker pull mysql<span class="hljs-meta prompt_">#</span><span class="language-bash">创建容器并启动</span>sudo docker run -itd --name mysql \-v /mydata/mysql/data:/var/lib/mysql \-v /mydata/mysql/conf:/etc/mysql \-v /mydata/mysql/log:/var/log/mysql \-v /mydata/mysql/mysql-files:/var/lib/mysql-files/ \-p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql<span class="hljs-meta prompt_">#</span><span class="language-bash">随docker启动</span>docker update mysql --restart=always</code></pre><p>如果要指定版本例如5.7</p><pre><code class="hljs shell">sudo docker pull mysql:5.7docker run -itd --name mysql:5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql</code></pre><p>如果mysql切换了版本后，需要将挂载的文件删除重新生成，原因：不一致的文件会无法启动</p><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建容器但无法启动时需要执行如下：</span><span class="hljs-meta prompt_">#</span><span class="language-bash">CentOS7中的安全模块selinux把权限禁掉了，无法使用-v命令进行挂载</span><span class="hljs-meta prompt_">#</span><span class="language-bash">添加selinux规则，将要挂载的目录添加到白名单</span>sudo chcon -Rt svirt_sandbox_file_t /mydata/mysql/logsudo chcon -Rt svirt_sandbox_file_t /mydata/mysql/datasudo chcon -Rt svirt_sandbox_file_t /mydata/mysql/conf<span class="hljs-meta prompt_">#</span><span class="language-bash">原文链接：https://blog.csdn.net/qq_41999034/article/details/106162366</span></code></pre><p>进入mysql bash</p><pre><code class="hljs shell">docker exec -it mysql /bin/bash</code></pre><p>设置字符编码</p><pre><code class="hljs shell">vim /mydata/mysql/conf/my.cnf</code></pre><p>将以下配置项复制</p><pre><code class="hljs shell">[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;init_connect=&#x27;SET NAMES utf8&#x27;character-set-server=utf8collation-server=utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve</code></pre><h3 id="docker下安装redis"><a href="#docker下安装redis" class="headerlink" title="docker下安装redis"></a>docker下安装redis</h3><pre><code class="hljs shell">sudo docker pull redissudo mkdir -p /mydata/redis/confsudo touch /mydata/redis/conf/redis.confsudo docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \-d redis redis-server /etc/redis/redis.confsudo docker exec -it redis redis-cli<span class="hljs-meta prompt_">#</span><span class="language-bash">随docker容器启动</span>docker update redis --restart=always</code></pre><h2 id="安装nps"><a href="#安装nps" class="headerlink" title="安装nps"></a>安装nps</h2><p>项目GitHub地址**<a href="https://github.com/ehang-io/nps">nps</a>**</p><p><a href="https://github.com/ehang-io/nps/blob/master/README_zh.md">中文文档</a></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><pre><code class="hljs shell">wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz</code></pre><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre><code class="hljs shell">tar zxvf linux_amd64_server.tar.gz</code></pre><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code class="hljs shell">./nps install</code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><pre><code class="hljs shell">nps start</code></pre><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>浏览器输入url</p><pre><code class="hljs shell">ip:8080</code></pre><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>默认账号 admin</p><p>密码 123</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看日志</span>cat /var/log/nps.log</code></pre><h4 id="修改web密码"><a href="#修改web密码" class="headerlink" title="修改web密码"></a>修改web密码</h4><p>编辑<code>/etc/nps/conf/nps.conf</code>的</p><table><thead><tr><th>web_password</th><th>web界面管理密码</th></tr></thead><tbody><tr><td>web_username</td><td>web界面管理账号</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用命令和操作&quot;&gt;&lt;a href=&quot;#常用命令和操作&quot; class=&quot;headerlink&quot; title=&quot;常用命令和操作&quot;&gt;&lt;/a&gt;常用命令和操作&lt;/h2&gt;&lt;h3 id=&quot;用户操作&quot;&gt;&lt;a href=&quot;#用户操作&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="linux" scheme="https://ainexur.github.io/tags/linux/"/>
    
    <category term="centos7" scheme="https://ainexur.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>mac指南</title>
    <link href="https://ainexur.github.io/2022/11/10/mac%E6%8C%87%E5%8D%97/"/>
    <id>https://ainexur.github.io/2022/11/10/mac%E6%8C%87%E5%8D%97/</id>
    <published>2022-11-10T13:19:31.000Z</published>
    <updated>2023-01-19T14:06:39.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><pre><code class="hljs shell">Ctrl+A#到行首（达到Home键的效果）Ctrl+E#到行尾（达到End键的效果）Ctrl+N#到下一行Ctrl+P#到上一行Ctrl+K#从光标处开始删除，直到行尾fn +左方向键是HOMEfn键+右方向键是ENDfn+上方向键是page upfn+下方向键是page down</code></pre><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">cnpm</span>sudo npm install cnpm -g --registry=https://registry.npmmirror.com</code></pre><h2 id="Git代理"><a href="#Git代理" class="headerlink" title="Git代理"></a>Git代理</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置如下</span>git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27;git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">取消如下</span>git unset http_proxygit unset https_proxy</code></pre><h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">任意来源安装</span>sudo spctl --master-disable<span class="hljs-meta prompt_"># </span><span class="language-bash">brew安装，amd黑果只支持7.0以下的版本，7.0以上使用了apple 虚拟框架，amd无法开启</span>brew install virtualbox@6.1.8 --cask</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;Ctrl+A	#到行首（达到Home键的效果）
Ctrl+E	#到行尾（达到E</summary>
      
    
    
    
    
    <category term="mac" scheme="https://ainexur.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>kuangbin专题</title>
    <link href="https://ainexur.github.io/2022/10/24/kuangbin%E4%B8%93%E9%A2%98/"/>
    <id>https://ainexur.github.io/2022/10/24/kuangbin%E4%B8%93%E9%A2%98/</id>
    <published>2022-10-24T15:12:55.000Z</published>
    <updated>2023-03-20T15:27:19.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专题一-简单搜索"><a href="#专题一-简单搜索" class="headerlink" title="专题一 简单搜索"></a>专题一 简单搜索</h1><h2 id="1-棋盘问题"><a href="#1-棋盘问题" class="headerlink" title="1. 棋盘问题"></a>1. <a href="https://vjudge.csgrandeur.cn/problem/POJ-1321">棋盘问题</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>n皇后裸体</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10</span>;<span class="hljs-type">int</span> n, k;<span class="hljs-type">char</span> a[N][N];<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> mark, <span class="hljs-type">int</span> x)</span> </span>&#123;    <span class="hljs-keyword">if</span> (i == n ) <span class="hljs-keyword">return</span> x == <span class="hljs-number">0</span>;    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">dfs</span>(i + <span class="hljs-number">1</span>, mark, x);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++) &#123;        <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;.&#x27;</span> || (mark &amp; (<span class="hljs-number">1</span> &lt;&lt; j))) <span class="hljs-keyword">continue</span>;        ans += <span class="hljs-built_in">dfs</span>(i + <span class="hljs-number">1</span>, mark | (<span class="hljs-number">1</span> &lt;&lt; j), x - <span class="hljs-number">1</span>);    &#125;    <span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; k, n != <span class="hljs-number">-1</span> &amp;&amp; k != <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) cin &gt;&gt; a[i];        cout &lt;&lt; <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, k) &lt;&lt; endl;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="2-Dungeon-Master-POJ-2251"><a href="#2-Dungeon-Master-POJ-2251" class="headerlink" title="2.Dungeon Master POJ - 2251 "></a>2.<a href="https://vjudge.csgrandeur.cn/problem/POJ-2251/origin">Dungeon Master POJ - 2251 </a></h2><p>身陷三层迷宫，可上下前后左右走，问从S到E到最小路径。从二维BFS到三维BFS到转换，代码不变。</p><p>要注意POJ使用C98，不支持C++11的特性</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">35</span>;<span class="hljs-type">bool</span> g[N][N][N], vis[N][N][N];<span class="hljs-type">int</span> n, m, l;<span class="hljs-type">int</span> sx, sy, sz;<span class="hljs-type">int</span> ex, ey, ez;<span class="hljs-type">int</span> dirs[][<span class="hljs-number">3</span>]  = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;    <span class="hljs-type">int</span> x, y, z;    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c):<span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b), <span class="hljs-built_in">z</span>(c) &#123;    &#125;&#125;;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;    queue&lt;Node&gt; q;    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Node</span>(sx, sy, sz));    g[sx][sy][sz] = <span class="hljs-literal">false</span>;    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;        <span class="hljs-type">int</span> size = q.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i ++) &#123;            Node t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();            <span class="hljs-keyword">if</span> (t.x == ex &amp;&amp; t.y == ey &amp;&amp; t.z == ez) <span class="hljs-keyword">return</span> res;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i ++) &#123;                <span class="hljs-type">int</span> tx = t.x + dirs[i][<span class="hljs-number">0</span>], ty = t.y + dirs[i][<span class="hljs-number">1</span>], tz = t.z + dirs[i][<span class="hljs-number">2</span>];                <span class="hljs-keyword">if</span> (tx &gt;= n || tx &lt; <span class="hljs-number">0</span> || ty &gt;= m || ty &lt; <span class="hljs-number">0</span> || tz &gt;= l || tz &lt; <span class="hljs-number">0</span> || !g[tx][ty][tz]) <span class="hljs-keyword">continue</span>;                g[tx][ty][tz] = <span class="hljs-literal">false</span>;                q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Node</span>(tx, ty, tz));            &#125;        &#125;        ++ res;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">while</span>(cin &gt;&gt; n &gt;&gt; m &gt;&gt; l, n &amp;&amp; m &amp;&amp; l) &#123;        <span class="hljs-type">char</span> ch;        <span class="hljs-built_in">memset</span>(g, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> g);        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++) &#123;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; l; k ++) &#123;                    cin &gt;&gt; ch;                    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;S&#x27;</span>) sx = i, sy = j, sz = k;                    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;E&#x27;</span>)  ex = i, ey = j, ez = k;                    g[i][j][k] = ch != <span class="hljs-string">&#x27;#&#x27;</span>;                &#125;            &#125;            <span class="hljs-built_in">getchar</span>();        &#125;        <span class="hljs-type">int</span> res = <span class="hljs-built_in">solve</span>();        <span class="hljs-built_in">printf</span>(res == - <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;Trapped!\n&quot;</span> : <span class="hljs-string">&quot;Escaped in %d minute(s).\n&quot;</span>, res);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="3-POJ-3278-Catch-That-Cow"><a href="#3-POJ-3278-Catch-That-Cow" class="headerlink" title="3.POJ-3278 Catch That Cow"></a>3.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3278/origin">POJ-3278</a> <a href="https://vjudge.csgrandeur.cn/problem/POJ-3278">Catch That Cow</a></h2><p>给定数字n和k，从n出发，每次可以-1、+1、*2，问变成k的最小步数</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200005</span>;<span class="hljs-type">int</span> n, k;queue&lt;<span class="hljs-type">int</span>&gt; q;<span class="hljs-type">bool</span> vis[N];<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= N || vis[x]) <span class="hljs-keyword">return</span>;    q.<span class="hljs-built_in">push</span>(x);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;    q.<span class="hljs-built_in">push</span>(n);    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;        <span class="hljs-type">int</span> size = q.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i ++) &#123;            <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();            vis[t] = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">if</span> (t == k) <span class="hljs-keyword">return</span> res;            <span class="hljs-built_in">cal</span>(t + <span class="hljs-number">1</span>);            <span class="hljs-built_in">cal</span>(t - <span class="hljs-number">1</span>);            <span class="hljs-built_in">cal</span>(t * <span class="hljs-number">2</span>);        &#125;        ++res;       &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    cin &gt;&gt; n &gt;&gt; k;    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="4-POJ-3279-Fliptile"><a href="#4-POJ-3279-Fliptile" class="headerlink" title="4.POJ - 3279  Fliptile"></a>4.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3279/origin">POJ - 3279 </a> <a href="https://vjudge.csgrandeur.cn/problem/POJ-3279">Fliptile</a></h2><p>有N*M的格子，格子一边是黑色，一边是白色可以任意翻转，翻转一个格子会触发上下左右四个格子同时翻转。给定初始状态，求翻转为全部白色格子所需要的最小步骤，若有多个翻转方案，输出字典序最小的一个</p><p><strong>思路</strong>：二进制枚举第一列的所有翻转的方案，后续列由于受到前一列的翻转方案约束是固定的要维护前一列的颜色，可以推到而来。具体的，</p><ol><li>若前一列当前格子为黑色，则当前列当前格子需要翻转使得上一个格子可以触发翻转成白色，依次类推若最后一列无法</li><li>若前一列当前格子为白色，则当前列的格子必不能翻转，否则上列则会触发翻转成为黑色</li></ol><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>, M = <span class="hljs-number">20</span>;<span class="hljs-type">int</span> n, m;<span class="hljs-type">bool</span> g[N][M], turn[N][N], arr[N][N], ret[N][N];<span class="hljs-type">int</span> dirs[][<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;    <span class="hljs-comment">//重置翻转次数</span>    <span class="hljs-built_in">memset</span>(turn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> turn);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++)         turn[<span class="hljs-number">1</span>][i + <span class="hljs-number">1</span>] = x &amp; (<span class="hljs-number">1</span> &lt;&lt; i);    <span class="hljs-comment">//拷贝副本，用作当次计算的数组</span>    <span class="hljs-built_in">memset</span>(arr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> arr);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)             arr[i][j] = g[i][j];    <span class="hljs-comment">//计算当前第一列的翻转情况是x时，推演剩下的列的翻转情况</span>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">1</span> &amp;&amp; arr[i - <span class="hljs-number">1</span>][j])                turn[i][j] = <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span> (turn[i][j]) &#123;                arr[i][j] = !arr[i][j];                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k ++) &#123;                    <span class="hljs-type">int</span> x = i + dirs[k][<span class="hljs-number">0</span>];                    <span class="hljs-type">int</span> y = j + dirs[k][<span class="hljs-number">1</span>];                    arr[x][y] = !arr[x][y];                &#125;            &#125;        &#125;    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++)         <span class="hljs-keyword">if</span> (arr[n][i]) &#123;            flag = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">break</span>;        &#125;    <span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)            res += turn[i][j];    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copy</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)            ret[i][j] = turn[i][j];&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    cin &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)             cin &gt;&gt; g[i][j];    <span class="hljs-type">int</span> min_res = <span class="hljs-number">0x3f3f3f3f</span>;    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 枚举第一列的所有翻转可能</span>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; m); i ++) &#123;        <span class="hljs-type">int</span> res = <span class="hljs-built_in">solve</span>(i);        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">-1</span> &amp;&amp; res &lt; min_res) &#123;            flag = <span class="hljs-number">1</span>;            min_res = res;            <span class="hljs-built_in">copy</span>();        &#125;    &#125;    <span class="hljs-keyword">if</span> (flag) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;                cout &lt;&lt; ret[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;            &#125;            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        cout &lt;&lt; <span class="hljs-string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; endl;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="5-POJ-1426"><a href="#5-POJ-1426" class="headerlink" title="5.POJ-1426"></a>5.<a href="https://vjudge.csgrandeur.cn/problem/POJ-1426/origin">POJ-1426</a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-1426">Find The Multiple</a></p><p>给点n，求任意能整整除n且只包含数字1和0的一个数</p><p>bfs所有数位上1或0的可能，直到找到任意符合条件的值</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;ull n;<span class="hljs-function">ull <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;    queue&lt;ull&gt; q;    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;        ull t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();        <span class="hljs-keyword">if</span> (t % n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> t;        q.<span class="hljs-built_in">push</span>(t * <span class="hljs-number">10</span>);        q.<span class="hljs-built_in">push</span>(t * <span class="hljs-number">10</span> + <span class="hljs-number">1</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-keyword">while</span> (cin &gt;&gt; n, n) &#123;        cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="6-POJ-3126"><a href="#6-POJ-3126" class="headerlink" title="6.POJ - 3126 "></a>6.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3126/origin">POJ - 3126 </a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-3126">Prime Path</a></p><p>有n组数据，每组输出给出两个四位质数a b，每次可以将一位上的数字变换，求a变成b的最少步数（注意变换的中间值也必须是质数）。</p><p>质数打表+最短路bfs</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<span class="hljs-type">int</span> n;<span class="hljs-type">int</span> a, b;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10005</span>;<span class="hljs-type">bool</span> prime[N];  <span class="hljs-comment">// 素数表</span><span class="hljs-type">bool</span> vis[N];    <span class="hljs-comment">// 访问标记</span><span class="hljs-type">int</span> bases[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>&#125;;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 重置访问标记</span>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);    queue&lt;<span class="hljs-type">int</span>&gt; q;    <span class="hljs-comment">// 加入bfs起点</span>    q.<span class="hljs-built_in">push</span>(a);    vis[a] = <span class="hljs-number">1</span>;    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-comment">// bfs</span>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;        <span class="hljs-type">int</span> len = q.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">while</span> (len --) &#123;            <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();            <span class="hljs-comment">// 找到目标，返回路径值</span>            <span class="hljs-keyword">if</span> (t == b) <span class="hljs-keyword">return</span> ans;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++) &#123;                <span class="hljs-type">int</span> base = bases[i];                <span class="hljs-type">int</span> n1 = (t / base / <span class="hljs-number">10</span>) * base * <span class="hljs-number">10</span>;                <span class="hljs-type">int</span> n2 = t % base;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ch = <span class="hljs-number">0</span>; ch &lt;= <span class="hljs-number">9</span>; ch ++) &#123;                    <span class="hljs-type">int</span> n3 = ch * base;                    <span class="hljs-type">int</span> num = n1 + n2 + n3;                    <span class="hljs-keyword">if</span> (!prime[num] || vis[num]) <span class="hljs-keyword">continue</span>;                    vis[num] = <span class="hljs-number">1</span>;                    q.<span class="hljs-built_in">push</span>(num);                &#125;                <span class="hljs-comment">// cout &lt;&lt; endl;</span>            &#125;        &#125;        ++ ans;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;     <span class="hljs-comment">// 素数打表</span>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j * j &lt;= i; j ++)            <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;                flag = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">break</span>;            &#125;        prime[i] = flag;    &#125;    <span class="hljs-comment">// 输入输出</span>    cin &gt;&gt; n;    <span class="hljs-keyword">while</span> (n--) &#123;        cin &gt;&gt; a &gt;&gt; b;        cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="7-POJ-3087"><a href="#7-POJ-3087" class="headerlink" title="7.POJ-3087"></a>7.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3087/origin">POJ-3087</a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-3087"> Shuffle’m Up</a></p><p>两手扑克牌，s2第一张，s1第二张交替洗，然后对半分，问能否洗成S12的牌，可以输出次数，否则输出-1</p><p>模拟题，没看懂题，看的题解</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">105</span>;string s1, s2, s;<span class="hljs-type">int</span> T, n;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(string a, string b, <span class="hljs-type">int</span> step)</span> </span>&#123;    <span class="hljs-keyword">if</span> (a + b == s) <span class="hljs-keyword">return</span> step;    string tmp = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) tmp = tmp + b[i] + a[i];    a = tmp.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, n);    b = tmp.<span class="hljs-built_in">substr</span>(n, n);    <span class="hljs-keyword">if</span> (a.<span class="hljs-built_in">compare</span>(s1) == <span class="hljs-number">0</span> &amp;&amp; b.<span class="hljs-built_in">compare</span>(s2) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(a, b, step + <span class="hljs-number">1</span>);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(s1, s2, <span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;     cin &gt;&gt; T;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= T; i ++) &#123;        cin &gt;&gt; n;        cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, <span class="hljs-built_in">solve</span>());    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="8-POJ-3414"><a href="#8-POJ-3414" class="headerlink" title="8. POJ-3414"></a>8.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3414/origin"> POJ-3414</a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-3414">Pots</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;专题一-简单搜索&quot;&gt;&lt;a href=&quot;#专题一-简单搜索&quot; class=&quot;headerlink&quot; title=&quot;专题一 简单搜索&quot;&gt;&lt;/a&gt;专题一 简单搜索&lt;/h1&gt;&lt;h2 id=&quot;1-棋盘问题&quot;&gt;&lt;a href=&quot;#1-棋盘问题&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="刷题" scheme="https://ainexur.github.io/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>vagrant指北</title>
    <link href="https://ainexur.github.io/2022/08/27/vagrant%E6%8C%87%E5%8C%97/"/>
    <id>https://ainexur.github.io/2022/08/27/vagrant%E6%8C%87%E5%8C%97/</id>
    <published>2022-08-27T04:36:37.000Z</published>
    <updated>2023-03-20T15:27:19.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vagrant安装-amp-配置"><a href="#Vagrant安装-amp-配置" class="headerlink" title="Vagrant安装&amp;配置"></a>Vagrant安装&amp;配置</h2><ul><li><p>An error occurred while downloading the remote file. The error message, if any, is reproduced below. Please fix this error and try again</p><p><a href="https://blog.csdn.net/gongzi_9/article/details/123058281">csdn</a></p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可通过<a href="https://developer.hashicorp.com/vagrant/downloads">官网下载安装地址</a>下载安装。</p><h3 id="windows10安装"><a href="#windows10安装" class="headerlink" title="windows10安装"></a>windows10安装</h3><p>选择AMD64版本，下载得到exe文件后双击打开安装即可。</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20230319214628259.png" alt="image-20230319214628259" style="zoom: 33%;" /><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>控制台输入<code>vagrant -v</code>查看版本，可验证是否安装完成，正常输出版本如下：例如我的版本是2.3.4</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20230319215133740.png" alt="image-20230319215133740" style="zoom: 67%;" /><h2 id="配置VMware插件"><a href="#配置VMware插件" class="headerlink" title="配置VMware插件"></a>配置VMware插件</h2><h3 id="安装vagrant-vmware-desktop"><a href="#安装vagrant-vmware-desktop" class="headerlink" title="安装vagrant-vmware-desktop"></a>安装vagrant-vmware-desktop</h3><p><a href="https://developer.hashicorp.com/vagrant/docs/providers/vmware/installation">官网文档</a></p><blockquote><p>前提：安装完成vagrant后</p></blockquote><p>执行命令安装vmware插件</p><pre><code class="hljs shell">vagrant plugin install vagrant-vmware-desktop</code></pre><p>稍等几分钟后出现如下提示则安装完成</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20230319224920262.png" alt="image-20230319224920262" style="zoom:50%;" /><h3 id="安装Vagrant-VMware-Utility"><a href="#安装Vagrant-VMware-Utility" class="headerlink" title="安装Vagrant VMware Utility"></a>安装Vagrant VMware Utility</h3><p>下载页<a href="https://developer.hashicorp.com/vagrant/downloads/vmware">Install | Vagrant | HashiCorp Developer</a></p><p>windows10选择X86_64版本下载后双击安装。</p><h2 id="基础使用配置"><a href="#基础使用配置" class="headerlink" title="基础使用配置"></a>基础使用配置</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>通过简单的几个vagrant命令即可快速初始化一个虚拟机</p><pre><code class="hljs shell">mkdir centos7_1cd centos7_1vagrant initvagrant up</code></pre><h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD-问题集合"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD-问题集合" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD### 问题集合"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>### 问题集合</h1><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><pre><code class="hljs shell">vagrant up #启动：，状态是 runningvagrant halt #停止：状态是 poweroffvagrant suspend #暂停：状态是 savedvagrant reload #重启：状态是 running 命令 reload 是先关闭，再开启vagrant destroy #销毁：状态是 not created</code></pre><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>228ea1bf0a6fba68ec563ecd720756c6d6913775</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h4 id="vagrant-up报错：Vagrant-encountered-an-error-while-attempting-to-load-the-utility-service-key-file"><a href="#vagrant-up报错：Vagrant-encountered-an-error-while-attempting-to-load-the-utility-service-key-file" class="headerlink" title="vagrant up报错：Vagrant encountered an error while attempting to load the utility service key file."></a>vagrant up报错：Vagrant encountered an error while attempting to load the utility service key file.</h4><p>Vagrant encountered an error while attempting to load the utility<br>service key file. This error can occur if the Vagrant VMware Utility<br>has not yet been installed, or if it was installed incorrectly. If<br>this error persists after running the Vagrant VMware Utility installer<br>again, please contact support at: <a href="mailto:&#x73;&#x75;&#x70;&#112;&#x6f;&#x72;&#116;&#x40;&#x68;&#x61;&#115;&#x68;&#x69;&#x63;&#x6f;&#114;&#x70;&#x2e;&#x63;&#111;&#109;">&#x73;&#x75;&#x70;&#112;&#x6f;&#x72;&#116;&#x40;&#x68;&#x61;&#115;&#x68;&#x69;&#x63;&#x6f;&#114;&#x70;&#x2e;&#x63;&#111;&#109;</a></p><p>Information about the Vagrant VMware Utility, including installation<br>instruction, can be found here:</p><p>  <a href="https://www.vagrantup.com/docs/vmware/vagrant-vmware-utility.html">https://www.vagrantup.com/docs/vmware/vagrant-vmware-utility.html</a></p><p>  Path:  C:&#x2F;ProgramData&#x2F;hashicorp&#x2F;vagrant-vmware-desktop&#x2F;certificates&#x2F;vagrant-utility.client.crt<br>  Error: No such file or directory @ rb_sysopen - C:&#x2F;ProgramData&#x2F;hashicorp&#x2F;vagrant-vmware-desktop&#x2F;certificates&#x2F;vagrant-utility.client.crt</p><p><strong>原因：</strong></p><p>未安装Vagrant VMware Utility。</p><p><strong>解决</strong>：</p><p>参考上面安装Vagrant Vmware Utility</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p><code>vagrant up</code>启动虚拟机后，可通过</p><pre><code class="hljs shell">vagrant ssh</code></pre><p>ssh连接虚拟机，去除了繁杂的密码密钥等，交由vagrant管理。</p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>配置<code>hostname</code></p><pre><code class="hljs shell">config.vm.hostname = &quot;centos01&quot;</code></pre><h3 id="配置ip"><a href="#配置ip" class="headerlink" title="配置ip"></a>配置ip</h3><p>由于VirtualBox默认的虚拟机策略为网络地址转换，此策略对于后续的程序安装，需要访问时，都得转换一次端口，较为麻烦。为给虚拟机分配一个独有的ip地址，可通过vagrant配置文件指定。编辑虚拟机的Vagrantfile文件，加入如下行</p><p><code>hostname: true</code>启用hostname</p><pre><code class="hljs shell">config.vm.network &quot;public_network&quot;, ip: &quot;192.168.1.10&quot;, hostname: true</code></pre><p>保存后，执行<code>vagrant reload</code>命令重新加载配置，通过<code>ip addr</code>命令可查看虚拟机当前ip地址</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化一个vagrant镜像</span>vagrant init<span class="hljs-meta prompt_"># </span><span class="language-bash">启动vagrant镜像</span>vagrant up<span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载配置，用于修改vagrantfile后</span>vagrant reload</code></pre><h3 id="查看端口监听"><a href="#查看端口监听" class="headerlink" title="查看端口监听"></a>查看端口监听</h3><pre><code class="hljs shell">sudo netstat -ntalp | grep 80</code></pre><h2 id="问题合集"><a href="#问题合集" class="headerlink" title="问题合集"></a>问题合集</h2><h3 id="1-vagrant-up-faild、在线安装慢"><a href="#1-vagrant-up-faild、在线安装慢" class="headerlink" title="1. vagrant up faild、在线安装慢"></a>1. vagrant up faild、在线安装慢</h3><p>在首次执行vagrant up时需要下载centOS镜像，由于网络问题可能会下载失败或者下载很慢。这时候可以手动把镜像下载到本地，再通过add命令加载镜像到vagrant，再使用up命令即可跳过下载步骤</p><p>镜像搜索：<a href="https://app.vagrantup.com/boxes/search">https://app.vagrantup.com/boxes/search</a></p><p>Centos&#x2F;7：<a href="https://app.vagrantup.com/centos/boxes/7">https://app.vagrantup.com/centos/boxes/7</a></p><p>下载镜像后通过命令添加到vagrant：</p><pre><code class="hljs shell">vagrant add 镜像名 路径<span class="hljs-meta prompt_">#</span><span class="language-bash">例如 vagrant box add centos/7 ./CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box</span></code></pre><p>此时再通过<code>vagrant up</code>命令安装启动虚拟机就不需要下载了，速度较快，推荐</p><h2 id="2-code-NS-ERROR-FAILURE-0x80004005-component-ConsoleWrap-interface-IConsole"><a href="#2-code-NS-ERROR-FAILURE-0x80004005-component-ConsoleWrap-interface-IConsole" class="headerlink" title="2.code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole"></a>2.code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole</h2><pre><code class="hljs shell">There was an error while executing `VBoxManage`, a CLI used by Vagrantfor controlling VirtualBox. The command and stderr is shown below.Command: [&quot;startvm&quot;, &quot;605c2e37-9c5a-48fc-8884-26c9160bdf3d&quot;, &quot;--type&quot;, &quot;headless&quot;]Stderr: VBoxManage: error: hv_vm_create() failed: 0xfae94001 (VERR_NEM_INIT_FAILED).VBoxManage: error: Driverless mode (VERR_SUP_DRIVERLESS)VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole</code></pre><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/202211102230280.png" alt="截屏2022-11-10 22.29.15"></p><p>原因之一：AMD好像只支持到6.1的vbox，卸载7.0安装6.1的，然后在隐私项勾选oracle，确认重启搞定。</p><h2 id="Is-the-docker-daemon-running"><a href="#Is-the-docker-daemon-running" class="headerlink" title="Is the docker daemon running?"></a>Is the docker daemon running?</h2><p>docker服务未启动，</p><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker</span>service start docker<span class="hljs-meta prompt_">#</span><span class="language-bash">开机自启</span>sudo systemctl enable docker</code></pre><h3 id="3-ping-time-out"><a href="#3-ping-time-out" class="headerlink" title="3.ping time out"></a>3.ping time out</h3><p>配置了ip无法连接，检查配置的ip是否和主机处于同一网段</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vagrant安装-amp-配置&quot;&gt;&lt;a href=&quot;#Vagrant安装-amp-配置&quot; class=&quot;headerlink&quot; title=&quot;Vagrant安装&amp;amp;配置&quot;&gt;&lt;/a&gt;Vagrant安装&amp;amp;配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An er</summary>
      
    
    
    
    
    <category term="vagrant" scheme="https://ainexur.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>机考基础题解</title>
    <link href="https://ainexur.github.io/2022/06/30/%E6%9C%BA%E8%80%83%E5%9F%BA%E7%A1%80%E9%A2%98%E8%A7%A3/"/>
    <id>https://ainexur.github.io/2022/06/30/%E6%9C%BA%E8%80%83%E5%9F%BA%E7%A1%80%E9%A2%98%E8%A7%A3/</id>
    <published>2022-06-30T11:27:33.000Z</published>
    <updated>2022-10-19T07:41:45.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-入门题"><a href="#1-入门题" class="headerlink" title="1.入门题"></a>1.入门题</h1><h2 id="（1）-输入处理（）：HJ5-进制转换"><a href="#（1）-输入处理（）：HJ5-进制转换" class="headerlink" title="（1）. 输入处理（）：HJ5.进制转换"></a>（1）. 输入处理（）：HJ5.进制转换</h2><p><a href="https://www.nowcoder.com/practice/8f3df50d2b9043208c5eed283d1d4da6?tpId=37&tqId=21228&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?tpId=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">牛客链接</a></p><p>题意：</p><p>接受一个十六进制的数，输出该数值的十进制表示（int范围内的正整数）。</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> n;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%x&quot;</span>,&amp;n);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, n);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><p>利用c语言的输入格式%x可以直接接收十六进制的输入，自动转成int类型的十进制数，再将其值输出即可。</p><p>难度1颗星，主要考察基本的输入格式。</p><h2 id="（3）快速排序：HJ3-明明的随机数"><a href="#（3）快速排序：HJ3-明明的随机数" class="headerlink" title="（3）快速排序：HJ3.明明的随机数"></a>（3）快速排序：HJ3.明明的随机数</h2><p><a href="https://www.nowcoder.com/practice/3245215fffb84b7b81285493eae92ff0?tpId=37&tqId=21226&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?page=1&pageSize=50&search=&tpId=37&type=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">牛客链接</a></p><p>题意：</p><p>输入n个带重复的整数，按顺序输出去重后的数字</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<span class="hljs-type">int</span> a[N];<span class="hljs-type">int</span> n;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;    <span class="hljs-type">int</span> x = a[(l + r) / <span class="hljs-number">2</span>];    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (i &lt; j) &#123;        <span class="hljs-keyword">while</span> (a[++i] &lt; x);        <span class="hljs-keyword">while</span> (a[--j] &gt; x);        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i], a[j]);    &#125;    <span class="hljs-built_in">quick_sort</span>(l, j);    <span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);    &#125;        <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;        <span class="hljs-keyword">if</span> (a[i] != a[i + <span class="hljs-number">1</span>])            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a[i]);    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h3><p>考察手写快排等排序。难度两颗星，若平时没注意练习快排，刚刚就凉了一次。</p><h2 id="（3）快速排序：HJ3-明明的随机数-1"><a href="#（3）快速排序：HJ3-明明的随机数-1" class="headerlink" title="（3）快速排序：HJ3.明明的随机数"></a>（3）快速排序：HJ3.明明的随机数</h2><p><a href="https://www.nowcoder.com/practice/3245215fffb84b7b81285493eae92ff0?tpId=37&tqId=21226&rp=1&ru=/exam/oj/ta&qru=/exam/oj/ta&sourceUrl=/exam/oj/ta?page=1&pageSize=50&search=&tpId=37&type=37&difficulty=undefined&judgeStatus=undefined&tags=&title=">牛客链接</a></p><p>题意：</p><p>输入n个带重复的整数，按顺序输出去重后的数字</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<span class="hljs-type">int</span> a[N];<span class="hljs-type">int</span> n;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;    <span class="hljs-type">int</span> x = a[(l + r) / <span class="hljs-number">2</span>];    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (i &lt; j) &#123;        <span class="hljs-keyword">while</span> (a[++i] &lt; x);        <span class="hljs-keyword">while</span> (a[--j] &gt; x);        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i], a[j]);    &#125;    <span class="hljs-built_in">quick_sort</span>(l, j);    <span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);    &#125;        <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;        <span class="hljs-keyword">if</span> (a[i] != a[i + <span class="hljs-number">1</span>])            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a[i]);    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="解析：-2"><a href="#解析：-2" class="headerlink" title="解析："></a>解析：</h3><p>考察手写快排等排序。难度两颗星，若平时没注意练习快排，刚刚就凉了一次。</p><h2 id="4-哈希表：HJ10-字符个数统计"><a href="#4-哈希表：HJ10-字符个数统计" class="headerlink" title="(4) 哈希表：HJ10.字符个数统计"></a>(4) 哈希表：HJ10.字符个数统计</h2><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>;<span class="hljs-type">int</span> a[N];<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-type">char</span> c;    <span class="hljs-keyword">while</span> (cin &gt;&gt; c) <span class="hljs-keyword">if</span> ( ++a[c] == <span class="hljs-number">1</span>) ++ ans;    cout &lt;&lt; ans;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="5-递归：NC68-跳台阶"><a href="#5-递归：NC68-跳台阶" class="headerlink" title="(5) 递归：NC68.跳台阶"></a>(5) 递归：NC68.跳台阶</h2><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-type">int</span> f[<span class="hljs-number">50</span>];    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jumpFloor</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> </span>&#123;        f[<span class="hljs-number">0</span>] = f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= number; i ++)            f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>];        <span class="hljs-keyword">return</span> f[number];    &#125;&#125;;</code></pre><p>2</p><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-type">int</span> f[<span class="hljs-number">50</span>];    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jumpFloor</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> </span>&#123;        <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>, c = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (number --) &#123;            c = a + b;            a = b;            b = c;        &#125;        <span class="hljs-keyword">return</span> b;    &#125;&#125;;</code></pre><h1 id="2-字符串操作（6题）"><a href="#2-字符串操作（6题）" class="headerlink" title="2.字符串操作（6题）"></a>2.字符串操作（6题）</h1><h2 id="1-HJ17-坐标移动"><a href="#1-HJ17-坐标移动" class="headerlink" title="(1) HJ17.坐标移动"></a>(1) HJ17.坐标移动</h2><p>模拟题，细心即可</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">char</span> s[<span class="hljs-number">10010</span>];<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<span class="hljs-type">char</span> dir[] = <span class="hljs-string">&quot;ADWS&quot;</span>;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;    <span class="hljs-type">bool</span> isalpha = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++)        <span class="hljs-keyword">if</span> (dir[i] == s[l])            isalpha = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span> (!isalpha) <span class="hljs-keyword">return</span>;    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l + <span class="hljs-number">1</span>; i &lt;= r; i ++) &#123;        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isdigit</span>(s[i])) <span class="hljs-keyword">return</span>;        num = num * <span class="hljs-number">10</span> + s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;    &#125;    <span class="hljs-keyword">switch</span>(s[l]) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>: x -= num;<span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>: x += num;<span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;W&#x27;</span>: y += num;<span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>: y -= num;<span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (i &lt; n) &#123;        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;;&#x27;</span>)  &#123;            ++ i;            <span class="hljs-keyword">continue</span>;        &#125;        <span class="hljs-type">int</span> l = i, r = i;        <span class="hljs-keyword">while</span> (s[r] != <span class="hljs-string">&#x27;;&#x27;</span>) ++ r;        <span class="hljs-built_in">check</span>(l, r - <span class="hljs-number">1</span>);        i = r;    &#125;    cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="2-HJ20-密码验证合格程序"><a href="#2-HJ20-密码验证合格程序" class="headerlink" title="(2) HJ20.密码验证合格程序"></a>(2) HJ20.密码验证合格程序</h2><p>模拟题，细心即可</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string &amp;s)</span> </span>&#123;    <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">8</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-type">int</span> a[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isupper</span>(c)) a[<span class="hljs-number">0</span>] ++;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">islower</span>(c)) a[<span class="hljs-number">1</span>] ++;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(c)) a[<span class="hljs-number">2</span>] ++;        <span class="hljs-keyword">else</span> a[<span class="hljs-number">3</span>] ++;    &#125;    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++) cnt += (a[i] &gt; <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span> (cnt &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, n = s.<span class="hljs-built_in">size</span>(); i &lt; n; i ++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j ++) &#123;            <span class="hljs-type">int</span> l = i, r = j;            <span class="hljs-keyword">while</span> (s[l] == s[r]) ++l, ++r;            <span class="hljs-keyword">if</span> (l - i &gt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    string s;    <span class="hljs-keyword">while</span> (cin &gt;&gt; s) &#123;        cout &lt;&lt; (<span class="hljs-built_in">check</span>(s) ? <span class="hljs-string">&quot;OK&quot;</span> : <span class="hljs-string">&quot;NG&quot;</span>) &lt;&lt; endl;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="3-HJ23-删除字符串中出现次数最少的字符"><a href="#3-HJ23-删除字符串中出现次数最少的字符" class="headerlink" title="(3) *HJ23.删除字符串中出现次数最少的字符"></a>(3) *HJ23.删除字符串中出现次数最少的字符</h2><pre><code class="hljs cpp"><span class="hljs-comment">//有问题</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">char</span> a[<span class="hljs-number">30</span>];<span class="hljs-type">int</span> f[<span class="hljs-number">130</span>] = &#123;<span class="hljs-number">0</span>&#125;;unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; map;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a[n]) != EOF; n ++) &#123;        map[a[n]] ++;    &#125;    <span class="hljs-type">int</span> mi = <span class="hljs-number">0x3f3f3f3</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)        <span class="hljs-keyword">if</span> (map[a[i]] &lt; mi)            mi = map[a[i]];    cout &lt;&lt; mi &lt;&lt;endl;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)        <span class="hljs-keyword">if</span> (map[a[i]] &gt; mi) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a[i]);&#125;<span class="hljs-comment">//ac</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    string s;    cin &gt;&gt; s;    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) mp[c] ++;    <span class="hljs-type">int</span> mi = <span class="hljs-number">0x3f3f3f3f</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) mi = <span class="hljs-built_in">min</span>(mi, mp[c]);    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s) <span class="hljs-keyword">if</span> (mp[c] &gt; mi) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, c);&#125;</code></pre><h2 id="4-HJ33-整数与IP地址间的转换"><a href="#4-HJ33-整数与IP地址间的转换" class="headerlink" title="(4) *HJ33.整数与IP地址间的转换"></a>(4) *HJ33.整数与IP地址间的转换</h2><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal1</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str)</span> </span>&#123;    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-type">long</span> <span class="hljs-type">long</span> cur = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : str) &#123;        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;            ans &lt;&lt;= <span class="hljs-number">8</span>;            ans += cur;            cur = <span class="hljs-number">0</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            cur = cur * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>;        &#125;    &#125;    ans &lt;&lt;= <span class="hljs-number">8</span>;    ans += cur;    cout &lt;&lt; ans &lt;&lt; endl;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal2</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str)</span> </span>&#123;    <span class="hljs-type">long</span> <span class="hljs-type">long</span> num = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : str) num = num * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>;    string ans;    <span class="hljs-keyword">while</span> (num) &#123;        <span class="hljs-type">int</span> t = num &amp; <span class="hljs-number">0xFF</span>;        ans = <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-built_in">to_string</span>(t) + ans;        num &gt;&gt;= <span class="hljs-number">8</span>;    &#125;    ans = ans.<span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>, ans.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);    cout &lt;&lt; ans &lt;&lt; endl;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    string str;    cin &gt;&gt; str;    <span class="hljs-built_in">cal1</span>(str);    cin &gt;&gt; str;    <span class="hljs-built_in">cal2</span>(str);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="5-HJ101-输入整型数组和排序标识"><a href="#5-HJ101-输入整型数组和排序标识" class="headerlink" title="(5) HJ101.输入整型数组和排序标识"></a>(5) HJ101.输入整型数组和排序标识</h2><p>手撸快排</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<span class="hljs-type">int</span> n;<span class="hljs-type">int</span> a[N];<span class="hljs-type">int</span> flag;<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span> <span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;    <span class="hljs-keyword">return</span> flag == <span class="hljs-number">0</span> ? x &lt; y : x &gt; y;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;    <span class="hljs-type">int</span> mid = a[(l + r) &gt;&gt; <span class="hljs-number">1</span>], i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (i &lt; j) &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">check</span>(a[++i],mid));        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">check</span>(mid, a[--j]));        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i], a[j]);    &#125;        <span class="hljs-built_in">quick_sort</span>(l, j);    <span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    cin &gt;&gt; n;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) cin &gt;&gt; a[i];    cin &gt;&gt; flag;        <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="6-HJ106-字符串逆序"><a href="#6-HJ106-字符串逆序" class="headerlink" title="(6) *HJ106.字符串逆序"></a>(6) *HJ106.字符串逆序</h2><p>简单题</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-type">char</span> a[<span class="hljs-number">10010</span>];<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span>&#123;    string s;    <span class="hljs-built_in">getline</span>(cin, s);    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --)        cout &lt;&lt; s[i];        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h1 id="3-排序（5题）"><a href="#3-排序（5题）" class="headerlink" title="3.排序（5题）"></a>3.排序（5题）</h1><h2 id="1-HJ8-合并表记录"><a href="#1-HJ8-合并表记录" class="headerlink" title="(1) HJ8.合并表记录"></a>(1) HJ8.合并表记录</h2><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> n;    cin &gt;&gt; n;    <span class="hljs-keyword">while</span> (n --) &#123;        <span class="hljs-type">int</span> a, b; cin &gt;&gt; a &gt;&gt; b;        mp[a] += b;    &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [a, b] : mp) &#123;        cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="2-HJ14-字符串排序"><a href="#2-HJ14-字符串排序" class="headerlink" title="(2) *HJ14.字符串排序"></a>(2) *HJ14.字符串排序</h2><p>排序</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    vector&lt;string&gt; a;    <span class="hljs-type">int</span> n;    cin &gt;&gt; n;    <span class="hljs-keyword">while</span> (n --) &#123;        string s;        cin &gt;&gt; s;        a.<span class="hljs-built_in">push_back</span>(s);    &#125;        <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> s : a)         cout &lt;&lt; s &lt;&lt; endl;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="3-HJ27-查找兄弟单词"><a href="#3-HJ27-查找兄弟单词" class="headerlink" title="(3) HJ27.查找兄弟单词"></a>(3) HJ27.查找兄弟单词</h2><p>字符串比较，以及排序基本运用</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string a, string b)</span> </span>&#123;    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());    <span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());    <span class="hljs-keyword">return</span> a == b;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> n; cin &gt;&gt; n;    vector&lt;string&gt; arr;    <span class="hljs-keyword">while</span> (n --) &#123;        string s; cin &gt;&gt; s;        arr.<span class="hljs-built_in">push_back</span>(s);    &#125;        string str;     <span class="hljs-type">int</span> k;    cin &gt;&gt; str &gt;&gt; k;    vector&lt;string&gt; ans;    <span class="hljs-keyword">for</span> (string s : arr) &#123;        <span class="hljs-keyword">if</span> ( s != str &amp;&amp; <span class="hljs-built_in">check</span>(s, str))            ans.<span class="hljs-built_in">push_back</span>(s);    &#125;        cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; endl;    <span class="hljs-built_in">sort</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());    <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">size</span>() &gt;= k) cout &lt;&lt; ans[k - <span class="hljs-number">1</span>];    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="4-NC37-合并区间"><a href="#4-NC37-合并区间" class="headerlink" title="(4) *NC37.合并区间"></a>(4) *NC37.合并区间</h2><pre><code class="hljs cpp"></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-入门题&quot;&gt;&lt;a href=&quot;#1-入门题&quot; class=&quot;headerlink&quot; title=&quot;1.入门题&quot;&gt;&lt;/a&gt;1.入门题&lt;/h1&gt;&lt;h2 id=&quot;（1）-输入处理（）：HJ5-进制转换&quot;&gt;&lt;a href=&quot;#（1）-输入处理（）：HJ5-进制转换&quot; c</summary>
      
    
    
    
    
    <category term="HW" scheme="https://ainexur.github.io/tags/HW/"/>
    
  </entry>
  
  <entry>
    <title>OutOfMemoryErrorLab</title>
    <link href="https://ainexur.github.io/2022/04/23/OutOfMemoryErrorLab/"/>
    <id>https://ainexur.github.io/2022/04/23/OutOfMemoryErrorLab/</id>
    <published>2022-04-22T21:45:04.000Z</published>
    <updated>2023-01-19T14:06:39.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h3><p><code>jvm参数设置</code>：指定堆的大小，<del>避免堆太大运行时间过长</del>（运行的时间同样很长，不懂原因）测试堆内存溢出，没必要分配太大堆内存。<code>-XX:+HeapDumpOnOutOfMemoryError</code>开启HeapDumpOnOutOfMemoryError</p><pre><code class="hljs plaintext">-Xmx51m -Xms24m -XX:+HeapDumpOnOutOfMemoryError</code></pre><p><code>heapOOM.java</code></p><p>new对象存储在堆区，无限new对象可使堆内存溢出，new的对象存放List内避免对象被清理。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapOOM</span> &#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOMObject</span>&#123;&#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        List&lt;OOMObject&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OOMObject</span>());    &#125;&#125;</code></pre><p>运行结果：</p><h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><ol><li>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。</li><li>如果虚拟机的栈内存允许动态扩展，当扩展栈容量无法申请到足够的内存时，将抛出OutOfMemoryError异常。</li></ol><h4 id="1-栈深度过深"><a href="#1-栈深度过深" class="headerlink" title="1 栈深度过深"></a>1 栈深度过深</h4><p>使用-Xss参数减少栈内存容量</p><pre><code class="hljs plaintext">-Xss1m</code></pre><p><code>class</code></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaVMStackSOF</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">stackLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stackLeak</span><span class="hljs-params">()</span> &#123;        ++stackLength;        stackLeak();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">JavaVMStackSOF</span> <span class="hljs-variable">oom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaVMStackSOF</span>();        <span class="hljs-keyword">try</span>&#123;            oom.stackLeak();        &#125; <span class="hljs-keyword">catch</span> (StackOverflowError error) &#123;            System.out.println(<span class="hljs-string">&quot;oom.stackLength = &quot;</span> + oom.stackLength);            <span class="hljs-keyword">throw</span> error;        &#125;    &#125;&#125;</code></pre><p>运行结果</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220424213613321.png" alt="image-20220424213613321"></p><h4 id="2-栈申请内存不足"><a href="#2-栈申请内存不足" class="headerlink" title="2 栈申请内存不足"></a>2 栈申请内存不足</h4><p>栈大小参数</p><pre><code class="hljs plaintext">-Xss128k</code></pre><p><code>class</code></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaVMStackSOF2</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">stackLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">long</span> unused1, unused2, unused3, unused4, unused5,                unused6, unused7, unused8, unused9, unused10,                unused11, unused12, unused13, unused14, unused15,                unused16, unused17, unused18, unused19, unused20,                unused21, unused22, unused23, unused24, unused25,                unused26, unused27, unused28, unused29, unused30,                unused31, unused32, unused33, unused34, unused35,                unused36, unused37, unused38, unused39, unused40,                unused41, unused42, unused43, unused44, unused45,                unused46, unused47, unused48, unused49, unused50,                unused51, unused52, unused53, unused54, unused55,                unused56, unused57, unused58, unused59, unused60,                unused61, unused62, unused63, unused64, unused65,                unused66, unused67, unused68, unused69, unused70,                unused71, unused72, unused73, unused74, unused75,                unused76, unused77, unused78, unused79, unused80,                unused81, unused82, unused83, unused84, unused85,                unused86, unused87, unused88, unused89, unused90,                unused91, unused92, unused93, unused94, unused95,                unused96, unused97, unused98, unused99, unused100;        stackLength++;        test();        unused1 = unused2 = unused3 = unused4 = unused5 = unused6 =            unused7 = unused8 = unused9 = unused10 =            unused11 = unused12 = unused13 = unused14 = unused15 =            unused16 = unused17 = unused18 = unused19 = unused20 =            unused21 = unused22 = unused23 = unused24 = unused25 =            unused26 = unused27 = unused28 = unused29 = unused30 =            unused31 = unused32 = unused33 = unused34 = unused35 =            unused36 = unused37 = unused38 = unused39 = unused40 =            unused41 = unused42 = unused43 = unused44 = unused45 =            unused46 = unused47 = unused48 = unused49 = unused50 =            unused51 = unused52 = unused53 = unused54 = unused55 =            unused56 = unused57 = unused58 = unused59 = unused60 =            unused61 = unused62 = unused63 = unused64 = unused65 =            unused66 = unused67 = unused68 = unused69 = unused70 =            unused71 = unused72 = unused73 = unused74 = unused75 =            unused76 = unused77 = unused78 = unused79 = unused80 =            unused81 = unused82 = unused83 = unused84 = unused85 =            unused86 = unused87 = unused88 = unused89 = unused90 =            unused91 = unused92 = unused93 = unused94 = unused95 =            unused96 = unused97 = unused98 = unused99 = unused100 = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-keyword">try</span> &#123;            test();        &#125; <span class="hljs-keyword">catch</span> (Error e) &#123;            System.out.println(<span class="hljs-string">&quot;stackLength = &quot;</span> + stackLength);            <span class="hljs-keyword">throw</span> e;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java堆溢出&quot;&gt;&lt;a href=&quot;#Java堆溢出&quot; class=&quot;headerlink&quot; title=&quot;Java堆溢出&quot;&gt;&lt;/a&gt;Java堆溢出&lt;/h3&gt;&lt;p&gt;&lt;code&gt;jvm参数设置&lt;/code&gt;：指定堆的大小，&lt;del&gt;避免堆太大运行时间过长&lt;/del&gt;</summary>
      
    
    
    
    
    <category term="jvm3" scheme="https://ainexur.github.io/tags/jvm3/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下文件校验</title>
    <link href="https://ainexur.github.io/2022/04/22/ubuntu%E4%B8%8B%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/"/>
    <id>https://ainexur.github.io/2022/04/22/ubuntu%E4%B8%8B%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/</id>
    <published>2022-04-21T21:14:10.000Z</published>
    <updated>2022-06-20T00:09:23.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="sha256"><a href="#sha256" class="headerlink" title="sha256"></a><a href="https://help.ubuntu.com/community/HowToSHA256SUM#:~:text=SHA-256%20serves%20a%20similar%20purpose%20to%20a%20prior,of%20errors%20increase%20as%20the%20file%20becomes%20larger.">sha256</a></h3><pre><code class="hljs shell">sha256sum file_path</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;sha256&quot;&gt;&lt;a href=&quot;#sha256&quot; class=&quot;headerlink&quot; title=&quot;sha256&quot;&gt;&lt;/a&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="ubuntu" scheme="https://ainexur.github.io/tags/ubuntu/"/>
    
    <category term="sha256" scheme="https://ainexur.github.io/tags/sha256/"/>
    
  </entry>
  
  <entry>
    <title>编译OpenJDK12实战</title>
    <link href="https://ainexur.github.io/2022/04/22/%E8%87%AA%E7%BC%96%E8%AF%91JDK%E5%AE%9E%E6%88%98/"/>
    <id>https://ainexur.github.io/2022/04/22/%E8%87%AA%E7%BC%96%E8%AF%91JDK%E5%AE%9E%E6%88%98/</id>
    <published>2022-04-21T19:30:11.000Z</published>
    <updated>2022-06-20T00:09:23.083Z</updated>
    
    <content type="html"><![CDATA[<p>跟着深入理解jvm3一书中实战操作，自编译JDK12</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><h4 id="直接下载zip（不推荐）"><a href="#直接下载zip（不推荐）" class="headerlink" title="直接下载zip（不推荐）"></a>直接下载zip（不推荐）</h4><p>原书从<a href="https://hg.openjdk.java.net/jdk/jdk12/">官网源码</a>下载（不推荐</p><h4 id="GItHub仓库（推荐）"><a href="#GItHub仓库（推荐）" class="headerlink" title="GItHub仓库（推荐）"></a>GItHub仓库（推荐）</h4><p><del>推荐直接GitHub拉（最近clone的速度快了挺多），大概两三分钟就clone完毕。</del>直接clone到的是JDK最新版本，详解看 <a href="./#%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91">进行编译</a> 第2步。</p><pre><code class="hljs shell">git clone https://github.com/openjdk/jdk</code></pre><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>我用的和书中一样的ubuntu18，我的是<code>Ubuntu 18.04.6 LTS x86_64</code></p><h3 id="构建编译环境"><a href="#构建编译环境" class="headerlink" title="构建编译环境"></a>构建编译环境</h3><ol><li><p>依赖</p><pre><code class="hljs shell">sudo apt-get install build-essential</code></pre></li><li><p>安装OpenJDK 11。要编译大版本为N的JDK，要另外准备一个大版本号至少为N-1的、已编译好的JDK。</p><pre><code class="hljs shell">sudo apt-get install openjdk-11-jdk</code></pre></li></ol><h3 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h3><ol><li><p>获取编译参数帮助</p><pre><code class="hljs shell">bash configure --help</code></pre><p>我这里因为没有安装<code>autoconf</code>会报一个错误<code>Error: Cannot find autoconf</code>，遂安装后再执行获取<code>help</code>即可</p><pre><code class="hljs shell">sudo apt-get install autoconf</code></pre></li><li><p>配置</p><p>编译FastDebug版、仅含Server模式的HotSpot虚拟机</p><pre><code class="hljs shell">bash configure --enable-debug --with-jvm-variants=server</code></pre><p>在我的ubuntu环境执行配置命令，接收到以下错误</p><pre><code class="hljs shell">configure: (Your Boot JDK version must be one of: 18 19)configure: Could not find a valid Boot JDK. OpenJDK distributions are available at http://jdk.java.net/.configure: This might be fixed by explicitly setting --with-boot-jdkconfigure: error: Cannot continueconfigure exiting with result code 1</code></pre><p>很明显的提示了前置的JDK版本不对，因为之前安装的是JDK11，要求18或19。由于我直接从GitHub上拉的最新仓库的源码版本为JDK19的，所以需要替换为JDK12的版本。从仓库的Tags找到JDK12的源码，下载解压后，进入该解压目录从新执行</p><pre><code class="hljs shell">bash configure --enable-debug --with-jvm-variants=server</code></pre><p>缺少一些依赖库，报错，按照提示一个个安装，再重新跑一次配置命令即可</p><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: error: Could not find all X11 headers (shape.h Xrender.h Xrander.h XTest.h Intrinsic.h). You might be able to fix this by running <span class="hljs-string">&#x27;sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev&#x27;</span>.</span><span class="hljs-meta prompt_">#</span><span class="language-bash">configure exiting with result code 1</span>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<span class="hljs-meta prompt_">#</span><span class="language-bash">configure: error: Could not find fontconfig! You might be able to fix this by running <span class="hljs-string">&#x27;sudo apt-get install libfontconfig1-dev&#x27;</span>.</span> <span class="hljs-meta prompt_">#</span><span class="language-bash">configure exiting with result code 1</span>sudo apt-get install libfontconfig1-dev<span class="hljs-meta prompt_">#</span><span class="language-bash">configure: error: Could not find alsa! You might be able to fix this by running <span class="hljs-string">&#x27;sudo apt-get install libasound2-dev&#x27;</span>.</span><span class="hljs-meta prompt_">#</span><span class="language-bash">configure exiting with result code 1</span>sudo apt-get install libasound2-dev</code></pre><p>输出成功后输出：</p><pre><code class="hljs shell">====================================================A new configuration has been successfully created in/home/k/Downloads/jdk-jdk-12-27/build/linux-x86_64-server-fastdebugusing configure arguments &#x27;--enable-debug --with-jvm-variants=server&#x27;.Configuration summary:* Debug level:    fastdebug* HS debug level: fastdebug* JVM variants:   server* JVM features:   server: &#x27;aot cds cmsgc compiler1 compiler2 epsilongc g1gc graal jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc&#x27; * OpenJDK target: OS: linux, CPU architecture: x86, address length: 64* Version string: 12-internal+0-adhoc.k.jdk-jdk-12-27 (12-internal)Tools summary:* Boot JDK:       openjdk version &quot;11.0.14.1&quot; 2022-02-08 OpenJDK Runtime Environment (build 11.0.14.1+1-Ubuntu-0ubuntu1.18.04) OpenJDK 64-Bit Server VM (build 11.0.14.1+1-Ubuntu-0ubuntu1.18.04, mixed mode, sharing)  (at /usr/lib/jvm/java-11-openjdk-amd64)* Toolchain:      gcc (GNU Compiler Collection)* C Compiler:     Version 7.5.0 (at /usr/bin/gcc)* C++ Compiler:   Version 7.5.0 (at /usr/bin/g++)Build performance summary:* Cores to use:   3* Memory limit:   3919 MB</code></pre><blockquote><p>在configure命令以及后面的make命令的执行过程中，会在“build&#x2F;配置名称”目录下产生如下目录结<br>构。不常使用C&#x2F;C++的读者要特别注意，如果多次编译，或者目录结构成功产生后又再次修改了配<br>置，必须先使用“make clean”和“make dist-clean”命令清理目录，才能确保新的配置生效。编译产生的目<br>录结构以及用途如下所示：</p></blockquote></li><li><p>make images</p><p>前排提示，执行该命令之前分配多点内存和核心数（虚拟机下的话）</p><pre><code class="hljs shell">make images</code></pre><p>等待…</p><p>出错：内存不足(分配了4G)，由于是虚拟机，swap的空间也挺小1.4G。</p><pre><code class="hljs shell">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000ae800000, 547356672, 0) failed; error=&#x27;Not enough space&#x27; (errno=12)<span class="hljs-meta prompt_">#</span><span class="language-bash"></span><span class="language-bash"><span class="hljs-comment"># There is insufficient memory for the Java Runtime Environment to continue.</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">Native memory allocation (mmap) failed to map 547356672 bytes <span class="hljs-keyword">for</span> committing reserved memory.</span><span class="hljs-meta prompt_"># </span><span class="language-bash">An error report file with more information is saved as:</span><span class="hljs-meta prompt_"># </span><span class="language-bash">/home/k/Downloads/jdk-jdk-12-27/make/gensrc/hs_err_pid76398.<span class="hljs-built_in">log</span></span></code></pre><p>可以使用命令查看内存和swap大小</p><pre><code class="hljs shell">free -m</code></pre><p>我给虚拟机分配了8G内存，重新编译得出如下：</p><pre><code class="hljs shell">Stopping sjavac serverFinished building target &#x27;images&#x27; in configuration &#x27;linux-x86_64-server-fastdebug&#x27;</code></pre><p>进入提示的路径<code>./build/linux-x86_64-server-fastdebug/jdk/bin</code>，执行version命令</p><pre><code class="hljs shell">./java -version</code></pre><p>输出</p><pre><code class="hljs shell">openjdk version &quot;12-internal&quot; 2019-03-19OpenJDK Runtime Environment (fastdebug build 12-internal+0-adhoc.k.jdk-jdk-12-27)OpenJDK 64-Bit Server VM (fastdebug build 12-internal+0-adhoc.k.jdk-jdk-12-27, mixed mode)</code></pre><p>编译完成。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟着深入理解jvm3一书中实战操作，自编译JDK12&lt;/p&gt;
&lt;h3 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; title=&quot;下载源码&quot;&gt;&lt;/a&gt;下载源码&lt;/h3&gt;&lt;h4 id=&quot;直接下载zip（不推荐）&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="JDK" scheme="https://ainexur.github.io/tags/JDK/"/>
    
    <category term="jvm3" scheme="https://ainexur.github.io/tags/jvm3/"/>
    
  </entry>
  
  <entry>
    <title>Typora配置PicGo使用阿里OSS图床</title>
    <link href="https://ainexur.github.io/2022/03/27/Typora%E9%85%8D%E7%BD%AEPicGo%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8COSS%E5%9B%BE%E5%BA%8A/"/>
    <id>https://ainexur.github.io/2022/03/27/Typora%E9%85%8D%E7%BD%AEPicGo%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8COSS%E5%9B%BE%E5%BA%8A/</id>
    <published>2022-03-27T10:48:26.000Z</published>
    <updated>2022-06-20T00:09:23.047Z</updated>
    
    <content type="html"><![CDATA[<p>q</p><p><strong>前言</strong>：之前使用Gitee搭建的Typora图床，25号博客的照片无法访问，查看gitee仓库发现：因外链封禁仓库。免费终归不是长久之道。解封仓库后拉到本地，遂决定使用其他图床。斟酌二三，选择阿里OSS对象存储服务。</p><h1 id="OSS购买与相关配置"><a href="#OSS购买与相关配置" class="headerlink" title="OSS购买与相关配置"></a>OSS购买与相关配置</h1><h2 id="购买OSS"><a href="#购买OSS" class="headerlink" title="购买OSS"></a>购买OSS</h2><ol><li><p>登录阿里云<a href="https://oss.console.aliyun.com/overview">OSS控制台</a>（如果你是第一次使用，需要同意协议）</p></li><li><p>单击左侧资源包管理</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328023248317.png" alt="image-20220328023248317" style="zoom:50%;" /></li><li><p>点击购买资源包</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328023337134.png" alt="image-20220328023337134" style="zoom:50%;" /></li><li><p>进入购买页，选择你要购买的套餐。这里我选择最小的40G，用来存放图床的照片绰绰有余。年选一年，现在搞活动低不到一块</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328023428347.png" alt="image-20220328023428347" style="zoom:80%;" /></li></ol><h2 id="配置Bucket"><a href="#配置Bucket" class="headerlink" title="配置Bucket"></a>配置Bucket</h2><ol><li><p><strong>创建Bucket</strong>：</p><p>返回OSS管理主页，单击右侧进入Bucket列表，单击创建Bucket</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328024321791.png" alt="image-20220328024321791"></p><p>在创建Bucket选项中：</p><ul><li>填写<strong>Bucket名称</strong></li><li>可以选择修改<strong>地域</strong>（我离广州较近，所以选择广州）</li><li><strong>读写权限</strong>必须选择<strong>公共读</strong>（这个关系到别人能否访问你的图片，毕竟你是放到博客上，所以是开发给别人查看）</li><li>其他选项默认即可</li></ul><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328024800282.png" alt="image-20220328024800282"></p></li></ol><h2 id="配置子用户AccessKey"><a href="#配置子用户AccessKey" class="headerlink" title="配置子用户AccessKey"></a>配置子用户AccessKey</h2><ol><li><p><strong>新增子用户AccessKey</strong></p><p>AccessKey相等于子账户，给它OSS权限，用来读写OSS</p><ul><li><p>鼠标停留右上角个人头像，出现面板。单击AccessKey管理</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328025215178.png" alt="image-20220328025215178" style="zoom:50%;" /></li><li><p>跳转页安全提示，选择开始使用子用户AccessKey</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328025825379.png" alt="image-20220328025825379"></p></li><li><p>跳转页选择创建用户</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328025919359.png" alt="image-20220328025919359"></p></li><li><p>创建用户页，填写登录名称、显示名称，勾选OpenAPI访问，最后单击确定。（可能确定后会跳安全验证，验证即可）</p><p><strong>重点</strong>：若开通 Open API 调用访问，请<strong>及时保存 AccessKey 信息</strong>，页面关闭后将无法再次获取信息。可以选择下载CSV文件，这样不怕忘记。</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030055310.png" alt="image-20220328030055310"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030335990.png" alt="image-20220328030335990"></p></li><li><p>添加子用户OSS权限（新建的用户默认是没有权限的，这里添加OSS权限使得可以读写OSS对象存储）</p><p>勾选子用户，单击添加权限</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030516355.png" alt="image-20220328030516355"></p><p>选择OSS权限，其他默认即可，单击确定。单击完成</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030634815.png" alt="image-20220328030634815"></p></li></ul></li></ol><h1 id="PicGo配置阿里OSS仓库"><a href="#PicGo配置阿里OSS仓库" class="headerlink" title="PicGo配置阿里OSS仓库"></a>PicGo配置阿里OSS仓库</h1><ol><li><p>展开图床设置列表，单击阿里云OSS</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328032037941.png" alt="image-20220328032037941"></p></li><li><p>配置阿里云OSS插件</p><ul><li>KeyId：必填，填入刚刚保存的AccessKey ID</li><li>KeySecret：必填，填入刚刚保存的AccessKey Secret</li><li>存储空间名：必填，即创建的Bucket名，不记得可以进Bucket的概览页复制（如下图）</li><li>存储区域：必填，即创建的Bucket地域，不记得可以进Bucket的概览页复制（如下图）</li><li>指定存储路径：按需填写</li></ul><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328033046731.png" alt="image-20220328033046731"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328035047677.png" alt="image-20220328035047677"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;q&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;：之前使用Gitee搭建的Typora图床，25号博客的照片无法访问，查看gitee仓库发现：因外链封禁仓库。免费终归不是长久之道。解封仓库后拉到本地，遂决定使用其他图床。斟酌二三，选择阿里OSS对象存储服务。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Typora" scheme="https://ainexur.github.io/tags/Typora/"/>
    
    <category term="PicGo" scheme="https://ainexur.github.io/tags/PicGo/"/>
    
    <category term="OSS" scheme="https://ainexur.github.io/tags/OSS/"/>
    
    <category term="图床" scheme="https://ainexur.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>JDK之HashMap源码剖析</title>
    <link href="https://ainexur.github.io/2022/03/25/JDK%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>https://ainexur.github.io/2022/03/25/JDK%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</id>
    <published>2022-03-25T15:49:12.000Z</published>
    <updated>2022-06-20T00:09:23.040Z</updated>
    
    <content type="html"><![CDATA[<p>基于<code>java version &quot;1.8.0_321&quot;</code></p><h1 id="类继承关系"><a href="#类继承关系" class="headerlink" title="类继承关系"></a>类继承关系</h1><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;&#125;</code></pre><p>HashMap继承自抽象类AbstractMap，并实现了Map、Cloneable、Serializable。</p><h2 id="AbstractMap"><a href="#AbstractMap" class="headerlink" title="AbstractMap"></a>AbstractMap</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt; &#123;&#125;</code></pre><p>抽象类AbstractMap实现了Map</p><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Set&lt;Entry&lt;K,V&gt;&gt; <span class="hljs-title function_">entrySet</span><span class="hljs-params">()</span>;</code></pre><p>整个抽象类唯一的一个抽象方法，获取Map集合。又由子类实现逻辑。 </p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="DEFAULT-INITIAL-CAPACITY"><a href="#DEFAULT-INITIAL-CAPACITY" class="headerlink" title="DEFAULT_INITIAL_CAPACITY"></a>DEFAULT_INITIAL_CAPACITY</h2><p>默认初始化容量，必须是2的幂。final修饰，不可被子类修改。</p><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span></code></pre><h2 id="MAXIMUM-CAPACITY"><a href="#MAXIMUM-CAPACITY" class="headerlink" title="MAXIMUM_CAPACITY"></a>MAXIMUM_CAPACITY</h2><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;</code></pre><p>最大容量，必须是2的幂，&lt;&#x3D; (1&lt;&lt;30)介于两者之间。</p><h2 id="DEFAULT-LOAD-FACTOR"><a href="#DEFAULT-LOAD-FACTOR" class="headerlink" title="DEFAULT_LOAD_FACTOR"></a>DEFAULT_LOAD_FACTOR</h2><p>负载系数，初始化未指定时为0.75</p><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;</code></pre><h2 id="TREEIFY-THRESHOLD"><a href="#TREEIFY-THRESHOLD" class="headerlink" title="TREEIFY_THRESHOLD"></a>TREEIFY_THRESHOLD</h2><p>从列表转化为树实现的阈值：当至少有这么多个节点有元素时，容器将转化为树。</p><p>至少为8，</p><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;</code></pre><h2 id="UNTREEIFY-THRESHOLD"><a href="#UNTREEIFY-THRESHOLD" class="headerlink" title="UNTREEIFY_THRESHOLD"></a>UNTREEIFY_THRESHOLD</h2><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UNTREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;</code></pre><h2 id="MIN-TREEIFY-CAPACITY"><a href="#MIN-TREEIFY-CAPACITY" class="headerlink" title="MIN_TREEIFY_CAPACITY"></a>MIN_TREEIFY_CAPACITY</h2><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TREEIFY_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;</code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="hash"><a href="#hash" class="headerlink" title="hash()"></a>hash()</h2><p>获取key的hash</p><ul><li>当key为空时，返回0.</li><li>key不为null，返回key.hashCode() ^（key.hashCode() &gt;&gt;&gt;16)的异或值</li></ul><p><code>&gt;&gt;&gt;</code>：逻辑右移</p><p><code>&gt;&gt;</code>：算数右移</p><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;    <span class="hljs-type">int</span> h;    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);&#125;</code></pre><h2 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h2><p>put()只是调用putVal()来实现。主要的逻辑和处理在putVal()。</p><p><strong>代码和注释</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);  <span class="hljs-comment">//调用putVal()</span>&#125;</code></pre><h2 id="putVal"><a href="#putVal" class="headerlink" title="putVal()"></a>putVal()</h2><ol><li><p>根据key计hash值：<code>(h=key.hashCode()) ^ (h &gt;&gt;&gt; 16) </code></p></li><li><p>判断是否调整容量，当table为空时调用<code>resize()</code></p></li><li><p>计算下标i（<code>i = (n - 1) &amp; hash</code>），判断小标i处是否存在Node节点</p><ul><li>不存在：当前hash映射的下标的容器为空，则直接new一个对象放在当前容器</li><li>存在：<ul><li>若当前节点的key和要put的key相等，把当前e&#x3D;节点</li><li>若当前容器转化成红黑树：调用putTreeVal()，若key存在则返回对应的对象，key不存在则新增节点返回null</li><li>当前容器是链表：否则遍历当前桶链表，如果存在key，退出；不存在key，新增node&lt;key,value&gt;到链表末尾</li></ul></li></ul></li><li><p>经过第2步操作后，判断e的值若不为空，更新e的value为value参数值，返回oldeValue。否则执行第五步</p></li><li><p>修改标志++modCount，size加一。若size超过要需调整容量大小时，触发resize()函数，调整容量。</p></li><li><p>putVal()结束，返回null</p></li></ol><p><strong>代码和注释</strong></p><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent, <span class="hljs-type">boolean</span> evict)</span> &#123;    Node&lt;K,V&gt;[] tab;    <span class="hljs-comment">//容器列表</span>    Node&lt;K,V&gt; p;    <span class="hljs-comment">//key映射的下标下的节点</span>    <span class="hljs-type">int</span> n, i;   <span class="hljs-comment">//调整后的容量n， i：映射的下标</span>    <span class="hljs-comment">//判断是否调整容量</span>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)        n = (tab = resize()).length;    <span class="hljs-comment">//判断(n - 1) &amp; hash下是否已有节点，存在冲突</span>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);   <span class="hljs-comment">//不存在冲突的话直接存这个位置上</span>    <span class="hljs-keyword">else</span> &#123;        Node&lt;K,V&gt; e;    <span class="hljs-comment">//i下标处的头节点</span>        K k;   <span class="hljs-comment">//头节点的key</span>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))   <span class="hljs-comment">//判断已有元素和当前key是否相同</span>            e = p;  <span class="hljs-comment">//是同一个的话，就相当于更新值</span>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">//当前桶转化成红黑树树的话，就调用putTreeVal()</span>            <span class="hljs-comment">//instanceof：Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false。</span>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">//遍历当前桶链表，添加当前key,value到末尾</span>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//到链表末尾</span>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>); <span class="hljs-comment">//新增一个节点到末尾</span>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span>                        treeifyBin(tab, hash);                    <span class="hljs-keyword">break</span>;                &#125;                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))   <span class="hljs-comment">//桶中存在元素</span>                    <span class="hljs-keyword">break</span>;                p = e;            &#125;        &#125;        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>) e.value = value;            afterNodeAccess(e); <span class="hljs-comment">//保留函数，方便子类继承实现</span>            <span class="hljs-keyword">return</span> oldValue;        &#125;    &#125;    ++modCount; <span class="hljs-comment">//修改标记</span>    <span class="hljs-keyword">if</span> (++size &gt; threshold) <span class="hljs-comment">//是否需要调整容量</span>        resize();    afterNodeInsertion(evict);  <span class="hljs-comment">//保留函数，方便子类继承实现</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;</code></pre><h2 id="putTreeVal"><a href="#putTreeVal" class="headerlink" title="putTreeVal()"></a>putTreeVal()</h2><p>当桶转换成红黑树时，会执行tree版本的putVal()即putTreeVal()。</p><h2 id="get-Object-key"><a href="#get-Object-key" class="headerlink" title="get(Object key)"></a>get(Object key)</h2><p>根据key获取V，如果根据getNode(key)获取Node，如果为null返回null。存在的话返回Node.value。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;    Node&lt;K,V&gt; e;    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : e.value;&#125;</code></pre><h2 id="getNode-int-hash-Object-key"><a href="#getNode-int-hash-Object-key" class="headerlink" title="getNode(int hash, Object key)"></a>getNode(int hash, Object key)</h2><p>根据hash和key获取Node。</p><ol><li>如果哈希表和桶不为空，则遍历桶。为空则返回nullli><li>遍历桶：如果桶转换成红黑树，return getTreeNode(hash, key)的返回值；如果桶中是链表则遍历链表。找得到就返回，找不到返回null</li></ol><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-type">int</span> n; K k;    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp; (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;        <span class="hljs-comment">//哈希表不为空、且下标的桶不为空则匹配</span>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node    //检测头节点</span>            ((k = first.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))            <span class="hljs-keyword">return</span> first;        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//遍历桶</span>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);   <span class="hljs-comment">//如果当前桶是红黑树</span>            <span class="hljs-keyword">do</span> &#123;   <span class="hljs-comment">//遍历链接</span>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))                    <span class="hljs-keyword">return</span> e;            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于&lt;code&gt;java version &amp;quot;1.8.0_321&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;类继承关系&quot;&gt;&lt;a href=&quot;#类继承关系&quot; class=&quot;headerlink&quot; title=&quot;类继承关系&quot;&gt;&lt;/a&gt;类继承关系&lt;/h1&gt;&lt;h2 </summary>
      
    
    
    
    
    <category term="JDK" scheme="https://ainexur.github.io/tags/JDK/"/>
    
    <category term="Java" scheme="https://ainexur.github.io/tags/Java/"/>
    
    <category term="源码计划" scheme="https://ainexur.github.io/tags/%E6%BA%90%E7%A0%81%E8%AE%A1%E5%88%92/"/>
    
    <category term="HashMap" scheme="https://ainexur.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Arch个人指南</title>
    <link href="https://ainexur.github.io/2022/03/23/Arch%E4%B8%AA%E4%BA%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://ainexur.github.io/2022/03/23/Arch%E4%B8%AA%E4%BA%BA%E6%8C%87%E5%8D%97/</id>
    <published>2022-03-22T20:56:15.000Z</published>
    <updated>2023-03-20T15:09:05.790Z</updated>
    
    <content type="html"><![CDATA[<p>将一些操作记录下来，方便翻阅</p><h1 id="安装Arch"><a href="#安装Arch" class="headerlink" title="安装Arch"></a>安装Arch</h1><h2 id="源"><a href="#源" class="headerlink" title="源"></a>源</h2><pre><code class="hljs shell">sudo pacman-mirrors -i -c China -m rank</code></pre><ol><li>下载ISO文件</li><li>U盘制作Ventoy启动盘</li><li>复制ISO文件到Ventoy盘</li><li>重启进入Ventoy</li></ol><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><pre><code class="hljs shell">systemctl enable dhcpcd.service #动态ip分配跟随系统启动</code></pre><h2 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h2><pre><code class="hljs shell">grub-mkconfig -o /boot/grub/grub.cfg #生成配置文件</code></pre><p>如果要扫描win10，需要安装<code>os-xx</code> 并在grub配置文件里取消注释</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><pre><code class="hljs shell">pacamn -S sudo</code></pre><p>字体</p><pre><code class="hljs shell">sudo pacman -S noto-fonts-cjk</code></pre><p>firefox字体</p><pre><code class="hljs shell">sudo pacman -S firefox-i18n-zh-cn</code></pre><h1 id="dwm（窗口管理器）"><a href="#dwm（窗口管理器）" class="headerlink" title="dwm（窗口管理器）"></a>dwm（窗口管理器）</h1><p>fcitx5输入法</p><pre><code class="hljs shell">wget https://dwm.suckless.org/patches/autostart/dwm-autostart-20210120-cb3f58a.diff</code></pre><pre><code class="hljs shell">feh --bg-scale ~/Pictures/wallpaper/6617242.jpg</code></pre><h1 id="AUR"><a href="#AUR" class="headerlink" title="AUR"></a>AUR</h1><h2 id="源-1"><a href="#源-1" class="headerlink" title="源"></a>源</h2><p>&#x2F;etc&#x2F;pacman.conf文件尾添加</p><pre><code class="hljs plaintext">[archlinuxcn]          Server = https://repo.archlinuxcn.org/$arch</code></pre><p>之后运行 <code>sudo pacman -Sy</code> 更新，并安装 <code>archlinuxcn-keyring</code>即可。</p><pre><code class="hljs shell">sudo pacman -Sysudo pacman -S archlinuxcn-keyring</code></pre><h2 id="git-clone安装"><a href="#git-clone安装" class="headerlink" title="git clone安装"></a>git clone安装</h2><p>以安装yay为例，执行安装的命令如下：</p><pre><code class="hljs text">git clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si</code></pre><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><pre><code class="hljs shell">yay -S 包名#安装在线包yay -U 软件包路径#安装本地软件包</code></pre><h2 id="更新-x2F-升级-AUR-软件"><a href="#更新-x2F-升级-AUR-软件" class="headerlink" title="更新&#x2F;升级 AUR 软件"></a>更新&#x2F;升级 AUR 软件</h2><pre><code class="hljs shell">yay -Syy  #更新 AUR 软件包数据库yay -Syyu #更新 AUR 软件包数据库并升级所有已安装的软件包,-u表示upgrade（升级</code></pre><h2 id="卸载-AUR-软件"><a href="#卸载-AUR-软件" class="headerlink" title="卸载 AUR 软件"></a>卸载 AUR 软件</h2><pre><code class="hljs shell">yay -Ss 关键词 #搜索在线 AUR 软件包yay -Qs 关键词 #模糊匹配，搜索本地 AUR 软件包yay -Q 包名 #精确匹配，搜索本地 AUR 软件包</code></pre><h2 id="清理无用软件包与缓存"><a href="#清理无用软件包与缓存" class="headerlink" title="清理无用软件包与缓存"></a>清理无用软件包与缓存</h2><pre><code class="hljs shell">yay -Scc #清理安装包缓存yay -Rscnu $(yay -Qdtq) #清理孤立软件包</code></pre><h1 id="日用环境配置"><a href="#日用环境配置" class="headerlink" title="日用环境配置"></a>日用环境配置</h1><h2 id="makepkg-并行编译"><a href="#makepkg-并行编译" class="headerlink" title="makepkg - 并行编译"></a>makepkg - 并行编译</h2><p>编辑 <code>/etc/makepkg.conf</code> 修改 <code>MAKEFLAGS=&quot;-j8&quot;</code> ，编译的时候将使用 8 个核，速度更快。</p><h2 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h2><h3 id="polybar"><a href="#polybar" class="headerlink" title="polybar"></a>polybar</h3><pre><code class="hljs shell">yay -S polybar</code></pre><h2 id="fcitx5输入法"><a href="#fcitx5输入法" class="headerlink" title="fcitx5输入法"></a>fcitx5输入法</h2><p><a href="https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">wiki</a></p><pre><code class="hljs shell">sudo pacman -Rs $(pacman -Qsq fcitx)sudo pacman -S fcitx5-qt fcitx5-gtk fcitx5-chinese-addons fcitx5-git   fcitx5-pinyin-zhwiki kcm-fcitx5</code></pre><ul><li>fcitx5: 输入法基础框架主程序 </li><li>fcitx5-chinese-addons: 简体中文输入的支持，云拼音 </li><li>fcitx5-gtk: GTK程序的支持 </li><li>citx5-qt: QT5程序的支持 </li><li>fcitx5-pinyin-zhwiki: 肥猫制作的维基百万词库，没有版权风险, 放心使用</li><li>kcm-fcitx5: KDE桌面环境的支持</li></ul><p>编辑vim &#x2F;etc&#x2F;environment文件，末尾添加如下参数：</p><pre><code class="hljs shell">GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxSDL_IM_MODULE=fcitxGLFW_IM_MODULE=ibus</code></pre><p>将下面的内容粘贴到<code>~/.pam_environment</code></p><pre><code class="hljs shell">GTK_IM_MODULE DEFAULT=fcitxQT_IM_MODULE  DEFAULT=fcitxXMODIFIERS    DEFAULT=@im=fcitx</code></pre><p>将下面的内容粘贴到 <code>~/.xprofile</code></p><pre><code class="hljs shell">fcitx5 &amp;</code></pre><p>如果dwm环境的话需要打补丁，具体操作看wiki</p><p>注销重新登录。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="ttf-ms-win10"><a href="#ttf-ms-win10" class="headerlink" title="ttf-ms-win10"></a>ttf-ms-win10</h3><pre><code class="hljs shell">yay -S ttf-ms-win10</code></pre><h2 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h2><p><a href="https://wiki.archlinux.org/title/%E5%AE%89%E8%A3%85">安装</a> 软件包 <a href="https://archlinux.org/packages/?name=xf86-input-synaptics">xf86-input-synaptics</a>。</p><pre><code class="hljs shell">sudo pacman -S xf86-input-synaptics<span class="hljs-meta prompt_"># </span><span class="language-bash">将默认配置文件复制，用以生效</span>sudo cp /usr/share/X11/xorg.conf.d/70-synaptics.conf /etc/X11/xorg.conf.d/</code></pre><p>配置</p><h2 id="配置时钟同步"><a href="#配置时钟同步" class="headerlink" title="配置时钟同步"></a>配置时钟同步</h2><h3 id="读取硬件时钟"><a href="#读取硬件时钟" class="headerlink" title="读取硬件时钟"></a>读取硬件时钟</h3><pre><code class="hljs shell">sudo hwclock --show</code></pre><p>要将硬件时钟时间标准更改为本地时间，请使用：</p><pre><code class="hljs shell">sudo timedatectl set-local-rtc 1</code></pre><p>要恢复为 UTC 格式的硬件时钟，请键入：</p><pre><code class="hljs shell">sudo timedatectl set-local-rtc 0</code></pre><h3 id="Microsoft-Windows-中的-UTC"><a href="#Microsoft-Windows-中的-UTC" class="headerlink" title="Microsoft Windows 中的 UTC"></a>Microsoft Windows 中的 UTC</h3><p>建议将 Windows 配置为使用 UTC，而不是将 Linux 配置为使用本地时间。</p><p>建议将 Windows 配置为使用 UTC，而不是将 Linux 配置为使用本地时间。（Windows 默认使用本地时间）</p><p>它可以通过一个简单的注册表修复来完成：打开<code>regedit</code>并添加一个<code>DWORD</code>十六进制值<code>1</code>到注册表：</p><pre><code class="hljs plaintext">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\RealTimeIsUniversal</code></pre><p>您可以从运行的管理员命令提示符执行此操作：</p><pre><code class="hljs plaintext">reg add &quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation&quot; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f</code></pre><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><pre><code class="hljs shell">yay -S netease-cloud-music-gtk4</code></pre><h3 id="spotify"><a href="#spotify" class="headerlink" title="spotify"></a><a href="https://aur.archlinux.org/packages/spotify">spotify</a></h3><pre><code class="hljs shell">yay -S spotify</code></pre><p>缩放问题：<code>ctrl</code> + <code>+</code>&#x2F;<code>-</code></p><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><p><a href="https://wiki.archlinux.org/title/Bluetooth_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Bluetooth-wiki</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><pre><code class="hljs shell">sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrolsystemctl tart/enable bluetooth.service</code></pre><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a><strong>开机启动</strong></h3><pre><code class="hljs shell">sudo systemctl enable bluetooth</code></pre><p>开机后自动启动，将 <code>AutoEnable=true</code> 添加在 <code>/etc/bluetooth/main.conf</code> 底部的 <code>[Policy]</code> 下面：</p><pre><code class="hljs shell">sudo vim /etc/bluetooth/main.conf[Policy]AutoEnable=true</code></pre><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a><strong>音频</strong></h3><p>要使用蓝牙耳机或音响的话要先安装 <code>pulseaudio-bluetooth</code>。有时要用 <code>pavucontrol</code> 选择音频的输出设备。</p><pre><code class="hljs shell">sudo pacman -S pulseaudio-bluetooth pavucontrol</code></pre><h3 id="切换双系统蓝牙需重新匹配问题"><a href="#切换双系统蓝牙需重新匹配问题" class="headerlink" title="切换双系统蓝牙需重新匹配问题"></a>切换双系统蓝牙需重新匹配问题</h3><p><a href="https://wiki.archlinux.org/title/Bluetooth_mouse_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">wiki</a></p><p>原因每次蓝牙连接，对每个网卡生成唯一密钥，切换系统后，密钥不同，验证不通过。</p><p>[解决办法arch 配对设备。重启到windows，将所有蓝牙连接删除，重新配对你要设置的蓝牙。</p><pre><code class="hljs shell">yay -S chntpw</code></pre><ol start="2"><li>重启到arch下安装chntpw</li></ol><pre><code class="hljs shell">yay -S chntpw</code></pre><ol start="3"><li>挂载windows到&#x2F;mnt&#x2F;win11下<pre><code class="hljs shell">sudo fdisk -l #查看分区<span class="hljs-meta prompt_">#</span><span class="language-bash">加如我的windows的分区是/dev/nvme0n1p3,则挂载</span>sudo mount /dev/nvme0n1p3 /mnt/win11 #修改为你自己的分区</code></pre></li><li>获取windows下的蓝牙mac</li></ol><pre><code class="hljs shell">cd /mnt/win11/Windows/System32/config#进入挂载的windows分区的config路径chntpw -e SYSTEM#使用chntpw运行SYSTEMcd  ControlSet001\Services\BTHPORT\Parameters\Keys#进入路径，我的是windwos11，路径是ControlSet001，你的不是的话可以ls打印一下，看看是否是CurrentControlSetls#打印路径下</code></pre><p>看到如下</p><p>Node has 0 subkeys and 1 values<br>  size     type            value name             [value if type DWORD]<br>    16  REG_BINARY        &lt;001f20eb4c9a&gt;</p><pre><code class="hljs shell">hex 001f20eb4c9a #选择该变量的以hex进制打印<span class="hljs-meta prompt_">#</span><span class="language-bash">看到如下一串：</span><span class="hljs-meta prompt_">#</span><span class="language-bash">:00000  6F 91 2E 58 23 F3 43 E3 DD E3 90 E5 D2 8A D8 78 o..X<span class="hljs-comment">#.C........x</span></span><span class="hljs-meta prompt_">#</span><span class="language-bash">将它掐头去尾，中间去掉空格，只保留16进制数。得到如下</span>6F912E5823F343E3DDE390E5D28AD878</code></pre><ol start="5"><li>将得到的密钥，修改到arch中对应的蓝牙设备的info中的Key为获取到的密钥</li></ol><pre><code class="hljs shell">sucd /var/lib/bluetooth/你的蓝牙mac地址 #你的蓝牙设备mac地址自己获取，设置里也有ls #查看一下有哪些<span class="hljs-meta prompt_">#</span><span class="language-bash">我的目录下是74:A3:4A:EC:8A:9A  cache  settings</span>cd d 74\:A3\:4A\:EC\:8A\:9A/ #\:转义，进入我要配置的蓝牙设备vim info #编辑信息文件<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">将这段中的Key修改为刚刚获取到的密钥。</span>[LinkKey]Key=6F912E5823F343E3DDE390E5D28AD878Type=4PINLength=0</code></pre><ol start="6"><li>重启蓝牙服务，尝试连接蓝牙，成功。</li></ol><h2 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h2><h3 id="迅雷"><a href="#迅雷" class="headerlink" title="迅雷"></a>迅雷</h3><pre><code class="hljs shell">yay -S xunlei-bin</code></pre><h3 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h3><pre><code class="hljs shell">yay -S  baidunetdisk-electron</code></pre><h3 id="Motrix"><a href="#Motrix" class="headerlink" title="Motrix"></a>Motrix</h3><pre><code class="hljs shell">yay -S motrix</code></pre><h2 id="v2raya"><a href="#v2raya" class="headerlink" title="v2raya"></a>v2raya</h2><pre><code class="hljs shell">yay -S v2ray v2raya</code></pre><h3 id="规则列表"><a href="#规则列表" class="headerlink" title="规则列表"></a>规则列表</h3><p>SwitchyOmega 扩展里新建 switch profile 模式（适用于Firefox 57+和Chrome）<br>规则列表地址填入 <a href="https://git.io/gfw-list">https://git.io/gfw-list</a> 或 <a href="https://raw.githubusercontent.com/aglent/autoproxy/master/gfwlist.pac">https://raw.githubusercontent.com/aglent/autoproxy/master/gfwlist.pac</a></p><h1 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h1><h2 id="IDEA-VS-Code"><a href="#IDEA-VS-Code" class="headerlink" title="IDEA VS Code"></a>IDEA VS Code</h2><pre><code class="hljs shell">yay -S  intellij-idea-ultimate-edition visual-studio-code-bin</code></pre><h2 id="JDK11"><a href="#JDK11" class="headerlink" title="JDK11"></a>JDK11</h2><pre><code class="hljs shell">sudo pacman -S jdk11-oepnjdk</code></pre><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>注意<code>arch</code>下<code>npm</code>包管理需要单独安装</p><pre><code class="hljs shell">sudo pacman -S nodejs npm</code></pre><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ol><li><p>检查<code>node.js</code>环境</p><pre><code class="hljs shell">node -vnpm -v</code></pre></li><li><p>安装<code>cnpm</code></p><pre><code class="hljs shell">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre></li><li><p>安装hexo(全局)</p><pre><code class="hljs shell">sudo cnpm install -g hexo-cli</code></pre></li><li><p>检查hexo是否安装成功</p><pre><code class="hljs SHELL">hexo -v</code></pre></li></ol><h2 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h2><h3 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h3><p><a href="https://wiki.archlinux.org/title/VMware_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85">VMware-wiki</a></p><p>安装依赖项</p><pre><code class="hljs shell">sudo pacman -S fuse2 gtkmm linux-headers  libcanberra yay -S gksu ncurses5-compat-libs</code></pre><p>下载最新的 <a href="https://www.vmware.com/go/tryworkstation">VMware Workstation Pro</a> 或<a href="https://www.vmware.com/go/downloadplayer">Player</a> (或者<a href="https://communities.vmware.com/community/vmtn/beta">beta</a>版，如果有的话)。</p><p>开始安装：</p><pre><code class="hljs plaintext"># sh VMware-edition-version.release.architecture.bundle</code></pre><h3 id="AUR-1"><a href="#AUR-1" class="headerlink" title="AUR"></a>AUR</h3><pre><code class="hljs shell">yay -S vmware-workstation</code></pre><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载二进制文件</span>curl -O https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz<span class="hljs-meta prompt_">#</span><span class="language-bash">解压</span>tar -zxvf apache-maven-3.8.6-bin.tar.gz </code></pre><h3 id="settings-xml"><a href="#settings-xml" class="headerlink" title="settings.xml"></a>settings.xml</h3><p>阿里镜像仓库</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></code></pre><p>本地仓库路径</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>path<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span></code></pre><h2 id="vagrant"><a href="#vagrant" class="headerlink" title="vagrant"></a>vagrant</h2><pre><code class="hljs shell">sudo pacman -S vagrant</code></pre><h2 id="virtualbox"><a href="#virtualbox" class="headerlink" title="virtualbox"></a>virtualbox</h2><p>基本包，安装时需要选择virtualbox-host-modules-arch模块</p><pre><code class="hljs shell">sudo pacman -S virtualbox</code></pre><p>加载virtualbox内核模块</p><pre><code class="hljs shell">sudo modprobe vboxdrv vboxnetadp vboxnetflt</code></pre><p>扩展包</p><pre><code class="hljs shell">yay -S virtualbox-ext-oracle</code></pre><p>将用户加入组</p><pre><code class="hljs shell">sudo usermod -G vboxusers -a 用户名</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将一些操作记录下来，方便翻阅&lt;/p&gt;
&lt;h1 id=&quot;安装Arch&quot;&gt;&lt;a href=&quot;#安装Arch&quot; class=&quot;headerlink&quot; title=&quot;安装Arch&quot;&gt;&lt;/a&gt;安装Arch&lt;/h1&gt;&lt;h2 id=&quot;源&quot;&gt;&lt;a href=&quot;#源&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Arch" scheme="https://ainexur.github.io/tags/Arch/"/>
    
    <category term="Linux" scheme="https://ainexur.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GitPages绑定个人的域名</title>
    <link href="https://ainexur.github.io/2022/03/22/GitPages%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/"/>
    <id>https://ainexur.github.io/2022/03/22/GitPages%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/</id>
    <published>2022-03-21T22:11:21.000Z</published>
    <updated>2023-03-20T15:15:27.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-GitHub-Pages配置Custom-domain"><a href="#1-GitHub-Pages配置Custom-domain" class="headerlink" title="1. GitHub Pages配置Custom domain"></a>1. GitHub Pages配置Custom domain</h2><ol><li>进入<code>Pages</code>仓库的<code>Settings</code>页面</li><li>左边栏选择<code>Pages</code></li><li>Custom domain&#96;选择要配置的个人域名</li></ol><p>比如我要将<code>pages</code>页绑定到我的个人域名<code>blog.nexur.top</code>下，设置如下</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220322062019731.png" alt="image-20220322062019731" style="zoom: 50%;" /><h2 id="2-配置域名解析"><a href="#2-配置域名解析" class="headerlink" title="2. 配置域名解析"></a>2. 配置域名解析</h2><p>进入个人域名解析设置，添加<code>CNAME</code>指向自己<code>Pages</code>页的仓库名如下</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220322062417072.png" alt="image-20220322062417072" style="zoom: 33%;" /><p><strong>注意</strong>：主机记录连着域名就是刚刚GitHub Pages上配置的域名。我这里配置的是二级域名，若想配置一级域名则将主机记录填写为<code>@</code>即可。</p><h2 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h2><p>有可能配置好后并不能马上访问，需要等几分钟（多则10分钟）。</p><p>如果使用Hexo部署的博客仓库，使用<code>hexo d</code>命令推送时会把<code>CANME</code>文件删掉，需要在hexo博客目录下的source文件夹内添加<code>CNAME</code>文件，文件内写的是你配置的域名，例如我的是</p><pre><code class="hljs plaintext">blog.nexur.top</code></pre><h2 id="4-配置完成，使用HTTPS"><a href="#4-配置完成，使用HTTPS" class="headerlink" title="4. 配置完成，使用HTTPS"></a>4. 配置完成，使用HTTPS</h2><ol><li>当配置完成后，刷新该页，会有个绿色的打勾</li><li>默认使用http方式访问，有可能报安全警告，可如下图打勾开启HTTPS（注意是否有Http资源，后者可能会不加载）</li></ol><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220322062943403.png" alt="image-20220322062943403" style="zoom: 33%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-GitHub-Pages配置Custom-domain&quot;&gt;&lt;a href=&quot;#1-GitHub-Pages配置Custom-domain&quot; class=&quot;headerlink&quot; title=&quot;1. GitHub Pages配置Custom domain&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="Blog" scheme="https://ainexur.github.io/tags/Blog/"/>
    
    <category term="GitPages" scheme="https://ainexur.github.io/tags/GitPages/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC笔记</title>
    <link href="https://ainexur.github.io/2022/03/20/SpringMVC%E7%AC%94%E8%AE%B0/"/>
    <id>https://ainexur.github.io/2022/03/20/SpringMVC%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-19T19:09:32.000Z</published>
    <updated>2022-06-20T00:09:23.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>是一个Spring的Web框架，基于原生的Serlvet，通过功能强大的DispatcherServlet(继承Servlet)，对请求和响应进行统一处理。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>IDEA、Maven3.8.4、Tomcat8、Spring5.3.16</p><h3 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1. 创建maven项目"></a>1. 创建maven项目</h3><h3 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.atteo.moonshine<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- Servlet API --&gt;</span>    <span class="hljs-comment">&lt;!-- Tomcat自带的jar，所以不用导入, Tomcat还自带了JSP的jar --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 这句要写，不然会依赖冲突--&gt;</span>        <span class="hljs-comment">&lt;!-- 编译需要所以需要导入，打包不需要，所以需要provided参数 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- Spring5和thymeleaf整合包 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.15.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><h3 id="3-打包方式修改为war"><a href="#3-打包方式修改为war" class="headerlink" title="3. 打包方式修改为war"></a>3. 打包方式修改为<code>war</code></h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></code></pre><h3 id="4-添加web模块"><a href="#4-添加web模块" class="headerlink" title="4. 添加web模块"></a>4. 添加<code>web</code>模块</h3><ul><li>src&#x2F;main下新建<code>webapp</code>文件夹（文件夹名称固定webapp）</li><li>webapp文件夹下新建<code>/WEB-INF/web.xml</code>文件</li></ul><h3 id="5-配置web-xml"><a href="#5-配置web-xml" class="headerlink" title="5. 配置web.xml"></a>5. 配置<code>web.xml</code></h3><p>浏览器不能直接访问一个类，要想访问某个类，须得给类以路径。当访问到路径符合类的映射时，servlet就会进行处理。</p><p>注册SpringMVC的前端控制器<code>DispatcherServlet</code></p><h4 id="默认配置方式"><a href="#默认配置方式" class="headerlink" title="默认配置方式"></a>默认配置方式</h4><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<servlet-name> -servlet.xml,例如，以<br>下配置所对应SpringMVC的配置文件位于WEB-INF下,文件名为springMVC-servlet.xml</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><h4 id="扩展的配置方式"><a href="#扩展的配置方式" class="headerlink" title="扩展的配置方式"></a>扩展的配置方式</h4><p>可通过init- param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控<br>制器DispatcherServlet的初始化时间</p><p>通过<code>&lt;init-param&gt;</code>参数指定SpringMVC配置文件的名字和路径</p><p>须得在<code>&lt;param-value&gt;</code>的值路径下创建同名的文件。（在这里即在resources下创建SpringMVC.xml文件）</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置SpringMVC配置文件的名字和路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置Servlet的初始化时间，优化第一次访问的速度--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><h4 id="路径-和路径-的区别"><a href="#路径-和路径-的区别" class="headerlink" title="路径/和路径/*的区别"></a>路径<code>/</code>和路径<code>/*</code>的区别</h4><p><code>/</code>：表示当前浏览器发送的所有请求，不包括<code>.jsp</code>为后缀的请求</p><p><code>/*</code>：包括<code>.jsp</code>路径的请求</p><p><code>.jsp</code>由指定的特俗的Servlet进行处理，不需要<code>DispatcherSerlet</code>进行处理。假如由<code>DispatcherServlet</code>进行处理，那么jsp请求将不能访问正确的路径。</p><h3 id="6-创建请求控制器"><a href="#6-创建请求控制器" class="headerlink" title="6. 创建请求控制器"></a>6. 创建请求控制器</h3><p>由于前端请求所有都经过DispatcherServlet，参数获取也在这处理。所以不需要创建Servlet，而只需要创建请求控制器就行。</p><p><code>io.ainexur.mvc.controller.HelloController.java</code></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-meta">@Controller</span> <span class="hljs-comment">//注解标识该类为控制器类</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;&#125;</code></pre><h3 id="7-配置springMVC-xml文件"><a href="#7-配置springMVC-xml文件" class="headerlink" title="7. 配置springMVC.xml文件"></a>7. 配置<code>springMVC.xml</code>文件</h3><p>注意添加<code>context</code>命名空间，不然会访问不到</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描组件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;io.ainexur.mvc.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><h3 id="8-配置首页访问"><a href="#8-配置首页访问" class="headerlink" title="8. 配置首页访问"></a>8. 配置首页访问</h3><p>templates下的页面不能直接访问，需要通过servlet</p><p>新建<code>/WEB-INF/templates/index.html</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>控制器添加首页访问控制</p><pre><code class="hljs java"><span class="hljs-comment">//请求路径&quot;/&quot; --&gt;&gt; /WEB-INF/template/index.html</span><span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span> <span class="hljs-comment">//请求映射，当浏览器访问该路径时，被识图解析器解析</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>; <span class="hljs-comment">//该视图名称会被识图解析器解析（即加上前后缀的路径）</span>&#125;</code></pre><p>tomcat运行项目，访问<code>localhost:8080/context-root/</code>时，通过资源控制器访问请求控制类中的方法，方法返回值则将通过视图解析器补全资源页面的路径，将页面数据返回到客户端。</p><h4 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h4><p>&#x2F;target和target：前者绝对路径，后者相对路径。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/target&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--Thymeleaf上的对控制器的访问--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h3 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h3><p>浏览器访问-&gt; 前端控制器解析url-pattern-&gt;DispatcherServlet处理-&gt;前端控制器读取SpringMVC的核心配置文件，通过扫面组件找到控制器，将请求地址和控制器中的<code>@RequestMapping</code>注解中的<code>value</code>属性值匹配-&gt;控制器方法处理，返回字符串类型的视图名称，该视图会被视图解析器解析，加上前后缀组成路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应的页面</p><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h1><h3 id="ReuquestMapping-的功能"><a href="#ReuquestMapping-的功能" class="headerlink" title="@ReuquestMapping 的功能"></a>@ReuquestMapping 的功能</h3><p>作用：将请求和处理的控制方法关联，<strong>建立映射关系</strong></p><p>SpringMVC接受到指定的请求，就会来找到在映射关系中对应的控制方法来处理这个请求。</p><h3 id="RequestMapping注解的位置"><a href="#RequestMapping注解的位置" class="headerlink" title="@RequestMapping注解的位置"></a>@RequestMapping注解的位置</h3><p><strong>类：</strong>该类下的所有方法受到该注解约束</p><p><strong>方法：</strong>该方法受到该注解约束</p><h3 id="ReuquestMapping-的value属性"><a href="#ReuquestMapping-的value属性" class="headerlink" title="@ReuquestMapping 的value属性"></a>@ReuquestMapping 的<code>value</code>属性</h3><p>value属性是必须设置的。</p><p>当value值是数组时，表示任意的值都可以匹配</p><pre><code class="hljs java"><span class="hljs-comment">//value数组</span><span class="hljs-meta">@RequestMapping(value = &#123;&quot;/hello&quot;,&quot;/hi&quot;&#125;)</span><span class="hljs-comment">//value对应单个值</span><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;)</span></code></pre><h3 id="ReuquestMapping-的method属性"><a href="#ReuquestMapping-的method属性" class="headerlink" title="@ReuquestMapping 的method属性"></a>@ReuquestMapping 的<code>method</code>属性</h3><p>method标注了方法的合法请求方式，比如：GET、POST</p><p>当Method值不匹配时，将出现405错误</p><p>不设置method时，任何method都可以</p><pre><code class="hljs java"><span class="hljs-comment">//多个值</span><span class="hljs-meta">@RequestMapping(</span><span class="hljs-meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><span class="hljs-meta">)</span><span class="hljs-comment">//单个值</span><span class="hljs-meta">@RequestMapping( method = RequestMethod.GET )</span></code></pre><h4 id="派生注解："><a href="#派生注解：" class="headerlink" title="派生注解："></a>派生注解：</h4><p>派生注解默认设置了RequestMapping的method值，其他并无区别</p><ul><li>GetMapping</li><li>PostMapping</li><li>PutMapping</li><li>DeleteMapping</li></ul><p>@ReuquestMapping 的<code>params</code>属性</p><pre><code class="hljs java"><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;username&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含username属性</span><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;!username&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须不能有username属性</span><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;username=admin&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含username属性，且值必须为admin</span><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;username!=admin&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含username属性，且值必须不能为admin</span></code></pre><p>@ReuquestMapping 的<code>headers</code>属性</p><p>用法和<code>params</code>一样。</p><pre><code class="hljs java"><span class="hljs-meta">@ReuquestMapping(headers = &#123;&quot;Host=localhost:8080&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含Host属性，且值必须为localhost:8080</span></code></pre><h3 id="SpringMVC支持ant风格的路径（模糊匹配）"><a href="#SpringMVC支持ant风格的路径（模糊匹配）" class="headerlink" title="SpringMVC支持ant风格的路径（模糊匹配）"></a>SpringMVC支持ant风格的路径（模糊匹配）</h3><ul><li><p><code>?</code>：表示任意的单个字符</p><p>有接口如下：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/a?a/testAnt&quot;)</span></code></pre><p>对应url：</p><pre><code class="hljs java"><span class="hljs-comment">//匹配</span>/a1a/testAnt <span class="hljs-comment">//?可以匹配一个数字</span>/aSa/testAnt <span class="hljs-comment">//?可以匹配一个字母</span>    <span class="hljs-comment">//不匹配</span>/a?a/testAnt <span class="hljs-comment">//?不可以匹配，因为是url的特殊符号，其他特俗符号同理</span></code></pre></li><li><p><code>*</code>：表示任意的0个或多个字符</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/a*a/testAnt&quot;)</span></code></pre></li><li><p><code>**</code>：表示任意的一层或多层目录</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/**/testAnt&quot;)</span><span class="hljs-comment">//正确写法</span><span class="hljs-comment">//错误用法</span><span class="hljs-meta">@RequestMapping(value = &quot;/a**a/testAnt&quot;)</span> <span class="hljs-comment">//这样相当于两个单独的*的匹配规则</span><span class="hljs-comment">///总结：在使用**时，只能使用`/**/xxx`的方式</span></code></pre></li></ul><h3 id="SpringMVC支持路径中的占位符（重点）"><a href="#SpringMVC支持路径中的占位符（重点）" class="headerlink" title="SpringMVC支持路径中的占位符（重点）"></a>SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：<code>/deleteUser?id=1</code></p><p>rest方式：<code>/deleteUser/1</code></p><p>SpringMVC路径中的占位符常用于restful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testPath/&#123;id&#125;&quot;)</span> <span class="hljs-comment">//举例url: testPath/999,不加/999这一id层，服务器报404</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPath</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><p>支持多占位符</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testPath/&#123;id&#125;/&#123;username&#125;&quot;)</span> <span class="hljs-comment">//举例url: testPath/999/zhangsan</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPath2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span>String username)</span> &#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><p>占位符<code>&#123;&#125;</code>告诉程序对应url位置的值为参数</p><p><code>@PathVariable(&quot;id&quot;) String id</code>中的id告诉该形参对应哪个参数</p><h1 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h1><p>DispatcherServlet的工作：浏览器发过来的所有请求都被前端控制器先处理，再执行相对应的控制器方法。当DispathcerServlet间接调用控制器方法时，通过路径映射找到要间接调用的方法。这个找的过程时是在DispatcherServlet内部执行，DispatcherServlet中，为我们封装了很多数据，当我们去调用当前的控制器方法时，会根据控制器方法的参数为当前控制器方法注入参数，即为参数赋值</p><h2 id="1-通过Serlvet原生API获取"><a href="#1-通过Serlvet原生API获取" class="headerlink" title="1. 通过Serlvet原生API获取"></a>1. 通过Serlvet原生API获取</h2><p>将HttpServletRequest作为控制器方法形参，由DispatcherServlet注入参数。从HttpServletRequest中获取请求参数。</p><p>控制器方法：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><span class="hljs-comment">//形参位置的request表示当前请求。</span><span class="hljs-comment">//该控制器方法由DispatcherServlet调用，并自动注入参数</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);    System.out.println(<span class="hljs-string">&quot;password = &quot;</span> + password);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><p>前端Thymeleaf:</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testServletAPI?username=&#x27;admin&#x27;&amp;password=&#x27;123&#x27;&#125;&quot;</span>&gt;</span>测试使用ServletApi获取请求<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h2 id="2-通过控制器方法的形参获取请求参数"><a href="#2-通过控制器方法的形参获取请求参数" class="headerlink" title="2. 通过控制器方法的形参获取请求参数"></a>2. 通过控制器方法的形参获取请求参数</h2><p> 控制器方法中的形参名和url中的请求参数名保持一致，就可以通过DispatcherServlet自动将请求参数赋值到形参，使控制方法获取请求参数。</p><p>原理：通过反射获取形参名，再将容器中对应的同名请求参数值为参数，使用反射式的函数调用。</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(String username, String password, String[] hobby)</span> &#123;    <span class="hljs-comment">//多个同名参数可以使用String接收，每个值之间用，分割，也可以使用String数组接收。1</span>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);    System.out.println(<span class="hljs-string">&quot;password = &quot;</span> + password);    System.out.println(<span class="hljs-string">&quot;Arrays.toString(hobby) = &quot;</span> + Arrays.toString(hobby));    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><h2 id="3-RequestParam注解"><a href="#3-RequestParam注解" class="headerlink" title="3. @RequestParam注解"></a>3. @RequestParam注解</h2><p>在形参前添加，使用该注解将名和形参建立映射关系</p><p>当前端传的名字为<code>user_name</code>时，DispatcherServlet不会主动将该字段注入形参<code>usernam</code>中。如下：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;user_name&quot;)</span> String username)</span> &#123; <span class="hljs-comment">//注解建立映射</span>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><p><strong>value</strong>：映射的请求参数的名称</p><p><strong>requred</strong>：默认为true，即当访问时不带value名称的参数报404，带则正常访问。定义为false时，带不带都可以访问。</p><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = true</span></code></pre><p><strong>defaultValue</strong>：当不传该参数时，设置默认值。传参数则使用参数值。</p><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = false, defaultValue = &quot;defaultName&quot;</span></code></pre><h2 id="4-RequestHeader注解"><a href="#4-RequestHeader注解" class="headerlink" title="4. RequestHeader注解"></a>4. RequestHeader注解</h2><p>将请求头信息和控制器方法的形参创建映射关系。</p><p>拥有value、required、defaultValue三个属性，用法和@RequestParam相同</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;user_name&quot;)</span> String username, )</span> &#123; <span class="hljs-comment">//注解建立映射</span>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><h2 id="5-CookieValue注解"><a href="#5-CookieValue注解" class="headerlink" title="5. CookieValue注解"></a>5. CookieValue注解</h2><p>将请求头Cookie和控制器方法的形参创建映射关系。</p><p>拥有value、required、defaultValue三个属性，用法和@RequestParam相同</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String JSESSIONID)</span> &#123;    System.out.println(<span class="hljs-string">&quot;JSESSIONID = &quot;</span> + JSESSIONID);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><h2 id="6-通过控制器方法的Pojo形参获取请求参数"><a href="#6-通过控制器方法的Pojo形参获取请求参数" class="headerlink" title="6. 通过控制器方法的Pojo形参获取请求参数"></a>6. 通过控制器方法的Pojo形参获取请求参数</h2><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testPojo&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPojo</span><span class="hljs-params">(User user)</span> &#123;    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testPojo&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>    id：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试Pojo形参获取请求参数&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.ainexur.mvc.pojo;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +                <span class="hljs-string">&quot;id=&quot;</span> + id +                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;        <span class="hljs-built_in">this</span>.id = id;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> username;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;        <span class="hljs-built_in">this</span>.username = username;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> password;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;        <span class="hljs-built_in">this</span>.password = password;    &#125;&#125;</code></pre><h2 id="7-解决获取请求参数乱码问题"><a href="#7-解决获取请求参数乱码问题" class="headerlink" title="7. 解决获取请求参数乱码问题"></a>7. 解决获取请求参数乱码问题</h2><h3 id="服务器执行顺序"><a href="#服务器执行顺序" class="headerlink" title="服务器执行顺序"></a>服务器执行顺序</h3><p>监听器-过滤器-Servlet-控制方法</p><h3 id="Get请求中文乱码"><a href="#Get请求中文乱码" class="headerlink" title="Get请求中文乱码"></a>Get请求中文乱码</h3><p>Tomcat8以下Tomcat服务器的原因，将Tomcat的server.xml的配置加上<code>URLEncoding=&quot;UTF-8&quot;</code></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">URLEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span></code></pre><p>Tomcat8：</p><ul><li><p>找到两个idea的vmoptions配置文件，在文件中追加<code>-Dfile.encoding=UTF-8</code></p></li><li><p>或者直接修改idea中的tomcat配置，在vm-options中添加<code>-Dfile.encoding=UTF-8</code>，两者效果相同，都是更改系统默认的GBK编码</p></li></ul><h3 id="post乱码：web-xml配置过滤器及其编码"><a href="#post乱码：web-xml配置过滤器及其编码" class="headerlink" title="post乱码：web.xml配置过滤器及其编码"></a>post乱码：web.xml配置过滤器及其编码</h3><p>通过源码追踪，得出要设置编码才会进行编码。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><p><code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>注意，如果写<code>/</code>不生效，目前还不懂为什么</p><h1 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h1><h2 id="1-通过ServletAPI向Request域对象共享数据"><a href="#1-通过ServletAPI向Request域对象共享数据" class="headerlink" title="1. 通过ServletAPI向Request域对象共享数据"></a>1. 通过ServletAPI向Request域对象共享数据</h2><p>控制方法</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestByServletApi&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestByServletApi</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;    request.setAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello, servletApi&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><p>访问接口：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestByServletApi&#125;&quot;</span>&gt;</span>测试testRequestByServletApi<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><p>success.html</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;testRequestScope&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>//成功获取到&quot;hello, servletApi&quot;</code></pre><h2 id="2-通过ModelAndView向Request域对象共享数据"><a href="#2-通过ModelAndView向Request域对象共享数据" class="headerlink" title="2. 通过ModelAndView向Request域对象共享数据"></a>2. 通过ModelAndView向Request域对象共享数据</h2><p>model：指的是往域对象共享数据的过程</p><p>view：最终经过视图解析器跳转到最终页面的过程</p><p>例子</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testModelAndView&quot;)</span><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//必须是ModelAndView类型的返回数据才能起作用</span>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();    <span class="hljs-comment">//处理模型数据：向Request共享数据</span>    modelAndView.addObject(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, ModelAndView&quot;</span>);    <span class="hljs-comment">//设置视图名称，</span>    modelAndView.setViewName(<span class="hljs-string">&quot;success&quot;</span>);    <span class="hljs-keyword">return</span> modelAndView;&#125;</code></pre><h2 id="3-通过Model向Request域对象共享数据"><a href="#3-通过Model向Request域对象共享数据" class="headerlink" title="3. 通过Model向Request域对象共享数据"></a>3. 通过Model向Request域对象共享数据</h2><p>例子</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testModel&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span> &#123;    model.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, Model&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><h2 id="4-通过Map向Request域对象共享数据"><a href="#4-通过Map向Request域对象共享数据" class="headerlink" title="4. 通过Map向Request域对象共享数据"></a>4. 通过Map向Request域对象共享数据</h2><p>例子</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testMap&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, String&gt; mp)</span> &#123;    mp.put(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, Map&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre><h2 id="5-通过ModelMap向Request域对象共享数据"><a href="#5-通过ModelMap向Request域对象共享数据" class="headerlink" title="5. 通过ModelMap向Request域对象共享数据"></a>5. 通过ModelMap向Request域对象共享数据</h2><p>例子</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testModelMap&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span> &#123;    modelMap.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, Map&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h1&gt;&lt;p&gt;是一个Spring的Web框架，基于原生的Serlvet，通过功能强大的Dispat</summary>
      
    
    
    
    
    <category term="Spring" scheme="https://ainexur.github.io/tags/Spring/"/>
    
    <category term="SpringMVC" scheme="https://ainexur.github.io/tags/SpringMVC/"/>
    
    <category term="MVC" scheme="https://ainexur.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring5笔记</title>
    <link href="https://ainexur.github.io/2022/03/10/Spring%E7%AC%94%E8%AE%B0/"/>
    <id>https://ainexur.github.io/2022/03/10/Spring%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-10T09:59:34.000Z</published>
    <updated>2022-06-20T00:09:23.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>下载地址：<a href="https://repo.spring.io/ui/native/libs-release/org/springframework/spring">https://repo.spring.io/ui/native/libs-release/org/springframework/spring</a></p><p>全栈轻量级开源框架，以Ioc和AOP为内核。</p><h1 id="IoC（控制反转）"><a href="#IoC（控制反转）" class="headerlink" title="IoC（控制反转）"></a>IoC（控制反转）</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>目的：降低耦合性。   </p><blockquote><p>控制反转是软件工程中的一项原则，它将对对象或程序部分的控制转移到容器或框架中。我们最常在面向对象编程的上下文中使用它。</p></blockquote><blockquote><p>与我们的自定义代码调用库的传统编程相比，IoC 使框架能够控制程序的流程并调用我们的自定义代码。为了实现这一点，框架使用内置附加行为的抽象。<strong>如果我们想添加自己的行为，我们需要扩展框架的类或插入我们自己的类。</strong></p><p>我们可以通过各种机制来实现控制反转，例如：策略设计模式、服务定位器模式、工厂模式和依赖注入（DI）。</p></blockquote><h3 id="IOC操作Bean管理（FactoryBean）"><a href="#IOC操作Bean管理（FactoryBean）" class="headerlink" title="IOC操作Bean管理（FactoryBean）"></a>IOC操作Bean管理（FactoryBean）</h3><p>Spring里的Bean分为普通Bean和工厂Bean（FactoryBean），普通Bean在配置文件中配置的类即是Bean实例类型；工厂Bean返回的类型可以和配置文件中定义的类型不同。</p><p>工厂Bean实现：</p><h2 id="DI-（依赖注入）"><a href="#DI-（依赖注入）" class="headerlink" title="DI （依赖注入）"></a>DI （依赖注入）</h2><blockquote><p>依赖注入是我们可以用来实现 IoC 的一种模式，其中被反转的控制是设置对象的依赖关系。</p><p>将对象与其他对象连接起来，或将对象“注入”到其他对象中，是由汇编程序完成的，而不是由对象本身完成的。</p></blockquote><h1 id="AOP-切面编程）"><a href="#AOP-切面编程）" class="headerlink" title="AOP (切面编程）"></a>AOP (切面编程）</h1><p>不改变源码的前提下，增强源码功能。实现手段有<strong>JDK动态代理</strong>和<strong>cglib动态代理</strong>。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>方便解耦、简化开发</li><li>AOP的编程支持</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便继承各种优秀的框架</li><li>降低Java EE API的使用难度</li><li>Java源码是经典学习范例</li></ul><h2 id="实现手段"><a href="#实现手段" class="headerlink" title="实现手段"></a>实现手段</h2><h3 id="接口的JDK动态代理"><a href="#接口的JDK动态代理" class="headerlink" title="接口的JDK动态代理"></a>接口的JDK动态代理</h3><p><code>UserDao.java</code>：接口类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span>;&#125;</code></pre><p><code>UserDaoImpl.java</code>：接口实现类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;        System.out.println(<span class="hljs-string">&quot;add()方法执行..&quot;</span>);         <span class="hljs-keyword">return</span> a + b;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span> &#123;        System.out.println(<span class="hljs-string">&quot;update()方法执行..&quot;</span>);        System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    &#125;&#125;</code></pre><p><code>JDKProxy.java</code>：动态代理增强例子</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//要增强的接口类</span>        Class[] interfaces = &#123;UserDao.class&#125;;        <span class="hljs-comment">//接口实现类实例</span>        <span class="hljs-type">UserDaoImpl</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();        <span class="hljs-comment">//获取接口的增强实现类</span>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> (UserDao)Proxy.newProxyInstance                (JDKProxy.class.getClassLoader()                , interfaces                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));        <span class="hljs-comment">//调用增强实现类后的add方法</span>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);        <span class="hljs-comment">//调用增强实现类后的update方法</span>        dao.update(<span class="hljs-string">&quot;update....&quot;</span>);        System.out.println(<span class="hljs-string">&quot;res = &quot;</span> + res);    &#125;&#125;<span class="hljs-comment">//对接口实现类做一个动态代理增强。</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;    <span class="hljs-keyword">private</span> Object obj;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;        <span class="hljs-built_in">this</span>.obj = obj;    &#125;    <span class="hljs-comment">//增强的逻辑</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        <span class="hljs-comment">//before</span>        System.out.println(<span class="hljs-string">&quot;方法执行之前...&quot;</span> + method.getName() + <span class="hljs-string">&quot;传递的参数: &quot;</span> + Arrays.toString(args));        <span class="hljs-comment">//被增强的方法执行</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args);        <span class="hljs-comment">//after</span>        System.out.println(<span class="hljs-string">&quot;方法执行之后...&quot;</span> + obj);        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><p><code>OUTPUT</code>:</p><pre><code class="hljs plaintext">方法执行之前...add传递的参数: [1, 2]add()方法执行..方法执行之后...io.ainexur.spring5.UserDaoImpl@79fc0f2f方法执行之前...update传递的参数: [update....]update()方法执行..id = update....方法执行之后...io.ainexur.spring5.UserDaoImpl@79fc0f2fres = 3</code></pre><h3 id="无接口的cglib动态代理"><a href="#无接口的cglib动态代理" class="headerlink" title="无接口的cglib动态代理"></a>无接口的cglib动态代理</h3><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li><strong>连接点</strong>：类里面哪些方法可以被增强，这些方法称为连接点</li><li><strong>切入点</strong>：实际被真正增强的方法，称为切入点</li><li><strong>通知</strong>（增强）：<ul><li>实际增强的逻辑部分称为通知（增强）</li><li>通知有多种类型：前置通知、后置通知、环绕通知、异常通知、最终通知</li></ul></li><li><strong>切面</strong>：是动作，把通知应用到切入点的过程称为切面。</li></ol><h2 id="AOP操作（准备）"><a href="#AOP操作（准备）" class="headerlink" title="AOP操作（准备）"></a>AOP操作（准备）</h2><p>Spring框架一般基于AspectJ实现AOP操作</p><h3 id="1-什么是AspectJ"><a href="#1-什么是AspectJ" class="headerlink" title="1. 什么是AspectJ"></a>1. 什么是AspectJ</h3><p>不是Spring的组成部分，独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</p><h3 id="2-基于AspectJ实现AOP操作"><a href="#2-基于AspectJ实现AOP操作" class="headerlink" title="2. 基于AspectJ实现AOP操作"></a>2. 基于AspectJ实现AOP操作</h3><p>基于XML配置文件实现</p><p>*基于注解方式实现（使用）</p><h3 id="3-导包"><a href="#3-导包" class="headerlink" title="3. 导包"></a>3. 导包</h3><h3 id="4-切入点表达式"><a href="#4-切入点表达式" class="headerlink" title="4. 切入点表达式"></a>4. 切入点表达式</h3><p>作用：知道对哪个类里面的那个方法进行增强</p><p>语法结构：</p><pre><code class="hljs plaintext">execution([权限修饰符][返回类型][类全路径][方法名称][参数列表])</code></pre><p>举例1：对<code>io.ainexur.dao.BookDao</code>类里面的add进行增强</p><pre><code class="hljs plaintext">execution(* io.ainexur.dao.BookDao.add(..))</code></pre><p>举例2：对<code>io.ainexur.dao.BookDao</code>类里面的所有方法进行增强</p><pre><code class="hljs plaintext">execution(* io.ainexur.dao.BookDao.*(..))</code></pre><p>举例3：对<code>io.ainexur.dao</code>包里的所有类里面的所有方法进行增强</p><pre><code class="hljs plaintext">execution(* io.ainexur.dao.*.*(..))</code></pre><h3 id="5-AspectJ注解实现"><a href="#5-AspectJ注解实现" class="headerlink" title="5. AspectJ注解实现"></a>5. AspectJ注解实现</h3><p>创建被增强类<code>User.class</code></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">//被增强的类</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;add()........&quot;</span>);    &#125;&#125;</code></pre><p>创建增强类<code>UserProxy.class</code></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">//增强类</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//生成代理对象</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;    <span class="hljs-comment">//@before表示前置通知</span>    <span class="hljs-meta">@Before(value = &quot;execution(* io.ainexur.spring5.aopanno.User.add(..))&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;before().......&quot;</span>);    &#125;&#125;</code></pre><p>进行通知文件的配置：</p><ul><li>在Spring配置文件中，开启注解扫描</li><li>使用注解创建User和UserProxy对象：<code>@Component</code></li><li>在增强类上面添加注解：<code>@Aspect</code></li><li>在Spring配置文件中开启生成代理对象</li></ul><h3 id="6-AspectJ-XML配置文件实现"><a href="#6-AspectJ-XML配置文件实现" class="headerlink" title="6.AspectJ XML配置文件实现"></a>6.AspectJ XML配置文件实现</h3><h1 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h1><p>Spring对jdbc的封装， 使用JdbcTemplate方便实现对数据库操作。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h3><img src="C:\Users\coco\AppData\Roaming\Typora\typora-user-images\image-20220314074220155.png" alt="image-20220314074220155" style="zoom:50%;" /><h3 id="2-在Spring配置文件中配置连接池"><a href="#2-在Spring配置文件中配置连接池" class="headerlink" title="2. 在Spring配置文件中配置连接池"></a>2. 在Spring配置文件中配置连接池</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    数据库连接池--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///user_db&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><h3 id="3-配置JdbcTemplate对象"><a href="#3-配置JdbcTemplate对象" class="headerlink" title="3.配置JdbcTemplate对象"></a>3.配置JdbcTemplate对象</h3><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--JdbcTemplate对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注入DataSource属性--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><h3 id="4-创建Service类，创建Dao类，在Dao注入jdbcTemplate对象"><a href="#4-创建Service类，创建Dao类，在Dao注入jdbcTemplate对象" class="headerlink" title="4. 创建Service类，创建Dao类，在Dao注入jdbcTemplate对象"></a>4. 创建Service类，创建Dao类，在Dao注入jdbcTemplate对象</h3><p>组件扫描</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;io.ainexur.spring5&quot;</span>/&gt;</span></code></pre><p>Dao</p><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;    <span class="hljs-comment">//注入JdbcTemplate</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;&#125;</code></pre><p>Service</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BookDao bookDao;&#125;</code></pre><h1 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h1><p>事务添加到JavaEE三层结构里的Service层</p><p>在Spring进行事务管理操作：</p><ol><li>有两种方式：编程式事务管理（不经常用）和声明式事务管理（使用）</li><li>声明式事务管理：<ul><li>基于注解方式（简单，常用）</li><li>基于XML配置文件方式</li></ul></li></ol><p>在Spring进行声明式事务管理，底层使用AOP</p><p>Spring事务管理API：提供一个接口，代表事务管理，这个接口针对不同的框架提供不同的实现类。</p><img src="C:\Users\coco\AppData\Roaming\Typora\typora-user-images\image-20220316103821056.png" alt="image-20220316103821056" style="zoom:50%;" /><h2 id="基于注解-amp-XML的声明式事务管理"><a href="#基于注解-amp-XML的声明式事务管理" class="headerlink" title="基于注解&amp;XML的声明式事务管理"></a>基于注解&amp;XML的声明式事务管理</h2><p><strong>xml配置事务管理器</strong></p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    创建事务管理器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p><strong>xml开启事务管理</strong></p><ul><li><p>引入<code>tx</code>命名空间</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></code></pre></li><li><p>开启事务注解</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    开启事务注解--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:annotation-driven</span>&gt;</span></code></pre></li><li><p>在Service类上（或者Service类里面方法上）添加注解</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookService</span> &#123;    <span class="hljs-comment">//...</span>&#125;</code></pre><ol><li><code>@Transactional</code>该注解添加到类上，则类里所有方法都添加事务</li><li><code>@Transactional</code>该注解添加到方法上，则只为该方法添加事务</li></ol></li></ul><h2 id="声明式事务管理参数配置（注解配置相关参数）"><a href="#声明式事务管理参数配置（注解配置相关参数）" class="headerlink" title="声明式事务管理参数配置（注解配置相关参数）"></a>声明式事务管理参数配置（注解配置相关参数）</h2><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220316233206706.png" alt="image-20220316233206706"></p><h3 id="propagation"><a href="#propagation" class="headerlink" title="propagation"></a>propagation</h3><p>事务传播行为</p><ol><li><p>多事务方法直接进行调用，这个过程事务是如何进行管理的</p><ul><li>事务方法：对数据库表数据进行变化的操作(增删改是，查不是)</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;    update();&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upadte</span><span class="hljs-params">()</span> &#123;    &#125;<span class="hljs-comment">//通过add()调用upadte()，事务是怎么处理的，这个过程就叫传播行为</span></code></pre></li><li><p>Spring框架事务传播有七种传播行为</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220317003631476.png" alt="image-20220317003631476"></p></li><li><p>主要使用前两种，其他了解有个印象就行</p></li></ol><p>配置举例：</p><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span></code></pre><h3 id="ioslation"><a href="#ioslation" class="headerlink" title="ioslation"></a>ioslation</h3><p>事务隔离级别</p><ol><li><p>事务有特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题：</p></li><li><p>三个读问题</p><ul><li>脏读：一个未提交事务读取到另一个未提交事务的数据（问题）</li><li>不可重复读：一个未提交事务读到一个已经提交事务的数据（现象）</li><li>幻读（虚读）：一个未提交事务读到另一个提交事务添加数据（）</li></ul></li><li><p>通过设置事务隔离性，解决读问题</p><p>四个隔离级别：</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220317024524526.png" alt="image-20220317024524526"></p></li></ol><p>配置举例：</p><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.REPEATABLE_READ)</span></code></pre><p>MySQL中默认的隔离级别</p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>超时时间：</p><ol><li>事务需要在一定的时间内进行提交，如果不提交进行回滚</li><li>默认为-1（即不超时），设置时间以秒为单位进行计算</li></ol><p>配置举例</p><pre><code class="hljs java"><span class="hljs-meta">@Transactional(timeout = 100)</span></code></pre><h3 id="readOnly"><a href="#readOnly" class="headerlink" title="readOnly"></a>readOnly</h3><p>是否只读：</p><ol><li>读：查询操作，写：添加修改删除操作</li><li>readOnly默认值是False，表示可以增删改查</li><li>设置readOnly为True时，只能使用查询</li></ol><p>配置举例</p><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true)</span></code></pre><h3 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h3><p>回滚：</p><ol><li>设置出现哪些异常进行事务回滚</li></ol><h3 id="noRollbackFor"><a href="#noRollbackFor" class="headerlink" title="noRollbackFor"></a>noRollbackFor</h3><p>不回滚：</p><ol><li>设置出现哪些异常不进行事务回滚</li></ol><h2 id="基于XML配置的方式声明式事务管理"><a href="#基于XML配置的方式声明式事务管理" class="headerlink" title="基于XML配置的方式声明式事务管理"></a>基于XML配置的方式声明式事务管理</h2><ul><li>配置事务管理器</li><li>配置通知（增强的类）</li><li>配置切入点和切面（要增强的类，即要使用事务的类）</li></ul><p>XML配置例子：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1, 创建事务管理器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--2。配置通知--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txadvice&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置事务参数--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 指定哪种方法上添加事务--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acountMoney&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--&lt;tx:method name=&quot;acount*&quot;/&gt;--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><span class="hljs-comment">&lt;!--3.配置切入点和切面--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置切入点--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* io.ainexur.spring5.service.UserService.* (..)&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--配置切面--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txadvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></code></pre><h2 id="完全注解方式的声明式事务管理"><a href="#完全注解方式的声明式事务管理" class="headerlink" title="完全注解方式的声明式事务管理"></a>完全注解方式的声明式事务管理</h2><p><strong>创建配置类<code>TxConfig.java</code></strong></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ComponentScan(basePackages = &quot;io.ainexur&quot;)</span><span class="hljs-meta">@EnableTransactionManagement</span>    <span class="hljs-comment">//开启事务</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxConfig</span> &#123;    <span class="hljs-comment">//创建配置类的连接池</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">getDruidDataSource</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);        druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///user_db?allowPublicKeyRetrieval=true&amp;useSSL=false&quot;</span>);        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);        druidDataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);        <span class="hljs-keyword">return</span> druidDataSource;    &#125;    <span class="hljs-comment">//创建JdbcTemplate对象</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span> &#123;    <span class="hljs-comment">//到IOC容器里自动寻找DataSource对象</span>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();        jdbcTemplate.setDataSource(dataSource);        <span class="hljs-keyword">return</span> jdbcTemplate;    &#125;    <span class="hljs-comment">//创建事务管理容器</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> &#123;        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();        dataSourceTransactionManager.setDataSource(dataSource);        <span class="hljs-keyword">return</span> dataSourceTransactionManager;    &#125;&#125;</code></pre><p><strong>测试</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTransactional2</span><span class="hljs-params">()</span> &#123;    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(TxConfig.class);    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);    userService.accountMoney();&#125;</code></pre><p><strong>结果</strong></p><p>配置类代理XML配置，和XML配置运行结果一致。</p><h1 id="Spring5新功能和特性"><a href="#Spring5新功能和特性" class="headerlink" title="Spring5新功能和特性"></a>Spring5新功能和特性</h1><h2 id="更"><a href="#更" class="headerlink" title="更"></a>更</h2><ol><li><p>整个Spring5框架基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除</p></li><li><p>Spring5框架自带了日志的封装</p><ul><li>Spring5已经移除了Log4jConfigListener，官方建议使用Log4j2</li><li>Spring5框架整合Log4j2</li><li>整合Log4j2<ul><li>引入jar包</li><li>创建<code>Log4j2.xml</code>配置文件，<code>log4j2.xml</code>文件名字是固定的。</li></ul></li></ul></li><li><p>Spring5框架核心容器支持<code>@Nullable</code>注解</p><p><code>@Nullable</code>注解可以用在方法、属性、参数上</p><ul><li>用在方法上，表示返回值可以为空</li><li>用在属性上，表示属性值可以为空</li><li>用在参数上，表示参数可以为空</li></ul></li><li><p>Spring5核心容器支持函数式风格<code>GenericApplicationContext</code></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenericApplicationContext</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">//创建GenericApplicationContext对象</span>    <span class="hljs-type">GenericApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericApplicationContext</span>();    <span class="hljs-comment">//调用context方法对象注册</span>    context.refresh();    context.registerBean(User.class, () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());    <span class="hljs-comment">//获取在Spring中注册的对象</span>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(User.class);    System.out.println(user);&#125;</code></pre></li><li><p>Spring5支持整合JUnit5</p></li></ol><h2 id="新"><a href="#新" class="headerlink" title="新"></a>新</h2><ol><li>SpringWebFlux</li></ol><h2 id="Spring单元测试"><a href="#Spring单元测试" class="headerlink" title="Spring单元测试"></a>Spring单元测试</h2><h3 id="Spring整合JUnit4"><a href="#Spring整合JUnit4" class="headerlink" title="Spring整合JUnit4"></a>Spring整合JUnit4</h3><ol><li><p>引入Spring相关依赖<code>spring-test-5.3.16.jar</code>、<code>hamcrest-core-1.3.jar</code>、<code>junit-4.13.1.jar</code></p></li><li><p>创建测试类<code>JTest4.java</code></p><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="hljs-comment">//单元测试框架</span><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span>    <span class="hljs-comment">//加载配置文件</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest4</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;        userService.accountMoney();    &#125;&#125;<span class="hljs-comment">//通过注解自动加载配置文件，省去每个测试方法都需要手动加载配置文件。</span><span class="hljs-comment">//自动加载配置文件后，可以通过注解注入属性</span></code></pre></li></ol><h3 id="Spring5整合JUnit5"><a href="#Spring5整合JUnit5" class="headerlink" title="Spring5整合JUnit5"></a>Spring5整合JUnit5</h3><ol><li><p>引入相关依赖</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220317174135264.png" alt="image-20220317174135264" style="zoom:50%;" /><pre><code class="hljs java">apiguardian-api-<span class="hljs-number">1.1</span><span class="hljs-number">.2</span>.jarjunit-jupiter-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jarjunit-jupiter-api-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jar junit-jupiter-engine-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jarjunit-jupiter-params-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jarjunit-platform-commons-<span class="hljs-number">1.8</span><span class="hljs-number">.1</span>.jarjunit-platform-engine-<span class="hljs-number">1.8</span><span class="hljs-number">.1</span>.jaropentest4j-<span class="hljs-number">1.2</span><span class="hljs-number">.0</span>.jar</code></pre></li><li><p>创建测试类<code>JTest5.java</code>:</p><pre><code class="hljs java"><span class="hljs-comment">//@ExtendWith(SpringExtension.class)</span><span class="hljs-comment">//@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:bean1.xml&quot;)</span> <span class="hljs-comment">//复合注解，代替上面两个，简化配置</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest5</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;        userService.accountMoney();    &#125;&#125;</code></pre></li></ol><h2 id="SpringWebFlux"><a href="#SpringWebFlux" class="headerlink" title="*SpringWebFlux"></a>*SpringWebFlux</h2><h3 id="1-什么是SpringWebFlux"><a href="#1-什么是SpringWebFlux" class="headerlink" title="1.什么是SpringWebFlux"></a>1.什么是SpringWebFlux</h3><ul><li>Spring5添加的新模块，用于Web开发，功能和SpringMVC类似， WebFlux为当前一种比较流行的响应式编程出现的框架。</li><li>使用传统Web框架，比如SpringMVC，这些都基于Servlet容器；WebFlux是一种异步非阻塞的框架，异步非阻塞的框架在Servlet3.1以后才支持。核心<strong>基于Reactor的相关API实现</strong>。<ul><li>异步非阻塞：</li></ul></li></ul><h3 id="2-响应式编程"><a href="#2-响应式编程" class="headerlink" title="2.响应式编程"></a>2.响应式编程</h3><h3 id="3-WebFlux执行流程和API"><a href="#3-WebFlux执行流程和API" class="headerlink" title="3.WebFlux执行流程和API"></a>3.WebFlux执行流程和API</h3><h3 id="4-SpringWebFlux（基于注解编程模型）"><a href="#4-SpringWebFlux（基于注解编程模型）" class="headerlink" title="4. SpringWebFlux（基于注解编程模型）"></a>4. SpringWebFlux（基于注解编程模型）</h3><h3 id="5-SpringWebFlux（基于注解编程模型）"><a href="#5-SpringWebFlux（基于注解编程模型）" class="headerlink" title="5.SpringWebFlux（基于注解编程模型）"></a>5.SpringWebFlux（基于注解编程模型）</h3><h1 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h1><ol><li>maven导入Spring包</li><li>创建Dao接口和实现</li><li>创建Spring核心配置文件</li><li>在Spring配置文件中配置UserDaoImpl</li><li>使用Spring的API获得Beans实例</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://repo.spring.io/ui/native/libs-re</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ainexur.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://ainexur.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb入门笔记</title>
    <link href="https://ainexur.github.io/2022/03/02/JavaWeb%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://ainexur.github.io/2022/03/02/JavaWeb%E5%85%A8%E6%94%BB%E7%95%A5/</id>
    <published>2022-03-02T14:57:45.000Z</published>
    <updated>2022-06-20T00:09:23.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>这个阶段主要是学习静态页面</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>客户端浏览器请求：Http Request  -&gt; 服务器响应：Http Response -&gt; 客户端浏览器处理响应数据（字符串），渲染成页面。这些字符串就是HTML。HTML是超文本标记语言，决定页面显示的内容。</p><p>解释性语言，不缺分大小写</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><ul><li>html<ul><li>head<ul><li>meta</li><li>meta</li></ul></li><li>body</li></ul></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p><code>tr</code>:行</p><p><code>th</code>:表头行列</p><p><code>td</code>:行列，和th功能一直，th内置了一些css</p><h4 id="from表单"><a href="#from表单" class="headerlink" title="from表单"></a>from表单</h4><p>action：提交表单触发的动作</p><p>method：表单提交请求方式</p><p>radioi单选按钮，同name为一组。</p><p>checked复选框，可以不同name，但同组应为同name，以方便传参给后端处理。</p><p>select：下拉选择框</p><p>注意提交和重置表单按钮为<code>submit</code>、<code>reset</code></p><p>注意：当<code>name</code>&#x3D;<code>value</code>时，可单写name，效果一致，如checked</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;ok.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span>456<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    账号<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    在线状态    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    爱好<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>篮球<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>足球<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>乒乓球<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;star&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>白羊<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>天蝎<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>巨蟹<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;texts&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;texts&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 18;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><h4 id="frameset"><a href="#frameset" class="headerlink" title="*frameset:"></a>*frameset:</h4><p>页面框架：多个页面拼凑成一个页面，代替body。已经淘汰，做个了解</p><h4 id="iframe"><a href="#iframe" class="headerlink" title="*iframe:"></a>*iframe:</h4><p>在一个 正常页面嵌入另外一个页面</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>css决定页面上的内容(HTML)以何种形式显示出来，即决定页面上的美观程度美化页面</p><h3 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h3><h4 id="单样式"><a href="#单样式" class="headerlink" title="单样式"></a>单样式</h4><p>标签样式、类样式、id样式</p><pre><code class="hljs css"><span class="hljs-comment">/* 标签样式 */</span><span class="hljs-selector-tag">p</span>&#123;    <span class="hljs-attribute">color</span>: red;&#125;<span class="hljs-comment">/* 类样式 */</span><span class="hljs-selector-class">.f20</span>&#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;&#125;<span class="hljs-comment">/* ID样式 */</span><span class="hljs-selector-id">#p4</span>&#123;    <span class="hljs-attribute">font-style</span>: normal;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">70px</span>;&#125;</code></pre><h4 id="组合样式"><a href="#组合样式" class="headerlink" title="组合样式"></a>组合样式</h4><pre><code class="hljs css"><span class="hljs-comment">/* 混合样式 */</span><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Lucida Sans&#x27;</span>;&#125;</code></pre><h3 id="位置上的分类"><a href="#位置上的分类" class="headerlink" title="位置上的分类"></a>位置上的分类</h3><p>css渲染时，采取就近原则</p><p>嵌入式样式表、内部样式表、</p><p>外部样式表</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>实现页面的特效</p><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="BS-x2F-CS"><a href="#BS-x2F-CS" class="headerlink" title="BS&#x2F;CS"></a>BS&#x2F;CS</h2><p>Browser&#x2F;Server、Client&#x2F;Server</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>服务器程序的容器，体积小，免费</p><p><strong>目录结构</strong></p><ul><li>Tomcat<ul><li>bin：可执行文件目录</li><li>conf：配置文件的目录</li><li>lib：运行tomcat所需要的依赖文件库</li><li>logs：存放日志目录</li><li>temp：临时目录</li><li>webapps：项目部署目录</li><li>work：工作目录</li></ul></li></ul><p><strong>配置</strong></p><p>需要jre：即配置JAVA_HOME环境变量</p><p><strong>访问</strong></p><p>localhost:8080&#x2F;context root&#x2F;xxx.html：不同项目的contextroot不同</p><p>tomcat.xml下配置wellcome页是index，如果context后不接任何路径则默认访问该wellcome页</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span></code></pre><p><strong>IDEA配置Tomcat</strong></p><p>java项目添加web module：new-&gt;module-&gt;web</p><p>右键项目-&gt;add Frameword support-&gt;JavaEE-&gt;tomcat</p><h2 id="Servelet"><a href="#Servelet" class="headerlink" title="Servelet"></a>Servelet</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Servlet3.0开始支持<code>@WebServlet</code>注解，通过注解方式配置一个Servlet</p><pre><code class="hljs java"><span class="hljs-meta">@WebServlet</span></code></pre><p>Java Servelet是服务器应用程序，是客户端请求和服务器上的数据库或应用程序之间的中间层。</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//image-20220304003801554.png" alt="image-20220304003801554" style="zoom:50%;" /><h3 id="自定义Servlet"><a href="#自定义Servlet" class="headerlink" title="自定义Servlet"></a>自定义Servlet</h3><p><strong>新建servlet类</strong></p><blockquote><p>对于一个 Servlet 类，我们日常最常用的方法是继承自 HttpServlet 类，提供了 Http 相关的方法，HttpServlet 扩展了 GenericServlet 类，而 GenericServlet 类又实现了 Servlet 类和 ServletConfig 类。</p></blockquote><p>web mudole中src下新建servlet类，继承自HttpServlet类，可根据需要重写doPost\doGet方法</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">addServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;age&quot;</span>);        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);        System.out.println(<span class="hljs-string">&quot;age = &quot;</span> + age);    &#125;&#125;</code></pre><p><strong>配置servlet类映射http请求路径</strong></p><p>web.xml配置映射路径</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>addPeople<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.ainexur.servlets.addServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>addPeople<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/add<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><p>这样一个servlet就配置完成，http请求contextroot&#x2F;add就可以访问到该servlet中间件。</p><h3 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h3><ol><li>用户点击提交表单，带着请求数据发起Http请求</li><li>项目中，从web.xml寻找到url</li><li>寻找url对应的servlet-name</li><li>寻找servlet-name对应的servlet-class</li><li>进入class，根据表单提交的方式进入该servlet类的doPost或者doGet方法，进行处理</li><li>处理结束，</li></ol><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>servlet生命周由容器(Tomcat)自动化管理。</p><p>默认情况下，第一次请求时，tomcat才会实例化，并且只会创建一个实例，所有的服务都通过这个实例处理请求。优势：提高系统启动速度，但第一次请求时耗时较长。如果需要提高响应速度，可以在配置文件设置<code>load-on-startup</code>的值来指定初始化时机。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo02Servlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.ainexur.io.Demo02Servlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>//指定servlet的启动时机、数字越小，启动越靠前<span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span></code></pre><p>Servlet在容器中是单例的、<strong>线程不安全的</strong>，尽量不要在servlet中定义成员变量、不要根据成员变量的值来判断，做操作。</p><p>servlet生命周期定义为从创建直到毁灭的整个过程：</p><ol><li>Servlet初始化后调用init()函数</li><li>Servlet调用service()函数处理客户端请求</li><li>Servlet摧毁前调用destroy()方法</li><li>最后，Serlvet由JVM的垃圾回收器进行垃圾回收</li></ol><p><strong>部署</strong></p><p>部署到tomcat的并非源代码，而是一个部署包-Artifacts：web应用程序压缩包（war包）的解压缩的包，</p><ol><li><p>新建项目，新建web模块</p></li><li><p>创建artifact部署包</p></li><li><p>lib-artifact：现有artifact，后面再添加的mysql.jar文件</p></li><li><p>lib放在module里是module独用，lib放在项目里是所有module都可以用：</p><p>设置lib为库-&gt;module引用该库。module引用新lib后，要更新部署包</p></li></ol><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><ol><li><p>javax.servlet.Servlet 接口</p><ul><li>void init(config) 初始化方法</li><li>void service() 服务方法</li><li>void destroy() 销毁方法</li></ul></li><li><p>javax.servlet.ericServlet 抽象类</p><ul><li>void service() 抽象方法</li></ul></li><li><p>javax.servlet.http.HttpServlet 抽象子类</p><ul><li><p>void service():</p><p>根据请求的的method判断，调用对应的方法</p><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<span class="hljs-comment">//获取method</span>    <span class="hljs-type">long</span> lastModified;    <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;GET&quot;</span>)) &#123;<span class="hljs-comment">//根据method，调用对应的方法</span>        lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);        <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1L</span>) &#123;            <span class="hljs-built_in">this</span>.doGet(req, resp);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-type">long</span> ifModifiedSince;            <span class="hljs-keyword">try</span> &#123;                ifModifiedSince = req.getDateHeader(<span class="hljs-string">&quot;If-Modified-Since&quot;</span>);            &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;                ifModifiedSince = -<span class="hljs-number">1L</span>;            &#125;            <span class="hljs-keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="hljs-number">1000L</span> * <span class="hljs-number">1000L</span>) &#123;                <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);                <span class="hljs-built_in">this</span>.doGet(req, resp);            &#125; <span class="hljs-keyword">else</span> &#123;                resp.setStatus(<span class="hljs-number">304</span>);            &#125;        &#125;    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;HEAD&quot;</span>)) &#123;        lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);        <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);        <span class="hljs-built_in">this</span>.doHead(req, resp);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;        <span class="hljs-built_in">this</span>.doPost(req, resp);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;PUT&quot;</span>)) &#123;        <span class="hljs-built_in">this</span>.doPut(req, resp);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;DELETE&quot;</span>)) &#123;        <span class="hljs-built_in">this</span>.doDelete(req, resp);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>)) &#123;        <span class="hljs-built_in">this</span>.doOptions(req, resp);    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;TRACE&quot;</span>)) &#123;        <span class="hljs-built_in">this</span>.doTrace(req, resp);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);        Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;method&#125;;        errMsg = MessageFormat.format(errMsg, errArgs);        resp.sendError(<span class="hljs-number">501</span>, errMsg);    &#125;&#125;</code></pre><p>调用的方法类似：</p><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_get_not_supported&quot;</span>);    <span class="hljs-built_in">this</span>.sendMethodNotAllowed(req, resp, msg);&#125;<span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_post_not_supported&quot;</span>);    <span class="hljs-built_in">this</span>.sendMethodNotAllowed(req, resp, msg);&#125;</code></pre><p>相关信息绑定在这里</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ResourceBundle lStrings  ResourceBundle.getBundle(<span class="hljs-string">&quot;javax.servlet.http.LocalStrings&quot;</span>);</code></pre></li></ul></li></ol><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><h4 id="405：请求方法和servlet方法不匹配"><a href="#405：请求方法和servlet方法不匹配" class="headerlink" title="405：请求方法和servlet方法不匹配"></a>405：请求方法和servlet方法不匹配</h4><h4 id="未解决：new-module时，添加web不成功，为java项目"><a href="#未解决：new-module时，添加web不成功，为java项目" class="headerlink" title="未解决：new-module时，添加web不成功，为java项目"></a>未解决：new-module时，添加web不成功，为java项目</h4><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><ol><li>Http称之为<strong>超文本传输协议</strong></li><li>Http包含两个部分：请求和响应<ul><li>请求包含三个部分：<ul><li>请求行：展示当前请求的最基本信息，请求方式、请求URL、协议版本</li><li>请求消息头：包含客户端要告诉服务器的很多信息，</li><li>请求主体：get方式没有请求体，但有que’r’yString。post方式有请求体form data，json格式有请求体requst payload。</li></ul></li><li>响应包含三个部分：<ul><li>相应行：包括协议、响应状态码、响应状态</li><li>响应头：包含服务器信息、服务器发给浏览器的信息（内容的媒体类型、编码、内容长度等）</li><li>响应体：响应的实际内容（比如html页面、字符串…)</li></ul></li></ul></li></ol><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>Http传输协议没有状态是说，服务端无法判断两个会话是来自同一个客户端还是不同客户端，因此引入session</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="保存作用域"><a href="#保存作用域" class="headerlink" title="保存作用域"></a>保存作用域</h3><h3 id="服务器内部转发"><a href="#服务器内部转发" class="headerlink" title="服务器内部转发"></a>服务器内部转发</h3><p>服务器内部转发对客户端而言是不可见的，客户端不知道服务器内部转发是否进行，进行了几次。</p><pre><code class="hljs java">req.getRequestDispatcher(<span class="hljs-string">&quot;demo07&quot;</span>).forward(req,resp);</code></pre><h3 id="客户端重定向"><a href="#客户端重定向" class="headerlink" title="客户端重定向"></a>客户端重定向</h3><p>客服端重定向，是客户端发出的多次请求，在客户端是可见的</p><pre><code class="hljs java">resp.sendRedirect(<span class="hljs-string">&quot;demo07&quot;</span>);</code></pre><h2 id="thymeleaf-视图模板"><a href="#thymeleaf-视图模板" class="headerlink" title="thymeleaf - 视图模板"></a>thymeleaf - 视图模板</h2><p>在页面上展示java内存内数据的过程称为渲染（render）</p><h2 id="保存作用域-1"><a href="#保存作用域-1" class="headerlink" title="保存作用域"></a>保存作用域</h2><p>四个级别保存作用域：</p><ul><li>page ：页面级别，淘汰不用</li><li>reqeust：一次请求，客户端重定向后失效、服务器内部转发有效</li><li>session：一次会话，session未失效前都有效</li><li>application：一次应用程序范围内有效</li></ul><h2 id="MVC优化的Servlet"><a href="#MVC优化的Servlet" class="headerlink" title="MVC优化的Servlet"></a>MVC优化的Servlet</h2><p>增删改查各要给Servlet，当服务器内容很多时，会有各种各种的Servlet，繁多而杂乱，不仅开发难，维护也难。</p><p>MVC：</p><p>Model（模型）、View（视图）、Controller（控制器）</p><ul><li>视图层：用于数据展示、用户交互</li><li>控制层：接受客户端的请求，具体的业务逻辑还要借助模型组件来完成</li><li>模型层：模型分为很多种，有比较简单的pojo&#x2F;vo（value object），有业务模型组件，有数据库访问组件<ol><li>pojo&#x2F;vo：值对象</li><li>DAO：数据访问对象</li><li>BO：业务对象</li></ol></li></ul><p>区分业务对象和数据访问对象：</p><ol><li>DAO中的方法都是单精度方法：一个方法只考虑一个操作，比如添加、查询</li><li>BO中的方法属于业务方法，也就是说注册这个方法属于业务方法，也就是说注册这个业务功能需要多个DAO的组合调用，从而完成注册功能</li><li></li></ol><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="耦合-x2F-依赖"><a href="#耦合-x2F-依赖" class="headerlink" title="耦合&#x2F;依赖"></a>耦合&#x2F;依赖</h3><p>依赖指xxx离不开xxx</p><p>在软件系统中，层与层之间是存在依赖的，我们亦称之为耦合。</p><p>系统架构或者是设计的一个原则是：高内聚低耦合</p><p>层内部的组成应该是高度聚合的，而层与层之间的关系应该是低耦合的，最理想的情况是0耦合。</p><p>IOC：控制反转&#x2F; DI：依赖注入</p><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p>在servlet前的一层可定义过滤器。可定义放行前代码、放行后代码。</p><p>可定义多个过滤器，注解过滤器顺序按照命名字典序执行，xml配置的过滤器按照配置前后执行顺序。</p><pre><code class="hljs java">init();doFilter();destory();</code></pre><h2 id="事务-过滤器的一个典型应用"><a href="#事务-过滤器的一个典型应用" class="headerlink" title="事务(过滤器的一个典型应用)"></a>事务(过滤器的一个典型应用)</h2><p>假如事务管理的操作写在dao层，一个service对应多个dao，dao的部分成功和失败，无法作为service判断成功或者失败的依据。</p><p>service是一个整体：事务管理不能以DAO层的单精度方法为单位，而应该以业务层的方法为单位。</p><p><strong>实现原理：</strong></p><p>在过滤器中</p><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;放行();&#125;<span class="hljs-keyword">catch</span>()&#123;    回滚;&#125;</code></pre><p>实现难题：多个dao可能对应多个Connect，多个DAO应该用同一个Connect达到事务管理的目的。所以用ThreadLocal.set(conn), get()，获取同一个Connect，</p><p><strong>ThreadLocal</strong></p><p><strong>注意：</strong></p><p>DAO层catch Exception后，会导致service层获取不到错误，故DAO层不能catch，只能throw错误。</p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>1）ServletContextListener： 监听ServletContext对象的创建和销毁过程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h1&gt;&lt;p&gt;这个阶段主要是学习静态页面&lt;/p&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ainexur.github.io/tags/Java/"/>
    
    <category term="JavaWeb" scheme="https://ainexur.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>fastjson之类模板parseObject</title>
    <link href="https://ainexur.github.io/2022/02/27/fastjson%E4%B9%8B%E7%B1%BB%E6%A8%A1%E6%9D%BFparseObject/"/>
    <id>https://ainexur.github.io/2022/02/27/fastjson%E4%B9%8B%E7%B1%BB%E6%A8%A1%E6%9D%BFparseObject/</id>
    <published>2022-02-26T17:31:02.000Z</published>
    <updated>2023-03-20T15:14:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>fastjson之类模板parseObject</p><p>有如下类</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestPojo</span>&lt;T&gt; &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;    <span class="hljs-keyword">private</span> T data;&#125;</code></pre><p>将Json字符串转RequestPojo对象</p><pre><code class="hljs java">JSON.parseObject(response.getBody().toString(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;RequestPojo&lt;Token&gt;&gt;() &#123; &#125;).getData();</code></pre><p>注意<code>new TypeReference&lt;RequestPojo&lt;Token&gt;&gt;() &#123; &#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;fastjson之类模板parseObject&lt;/p&gt;
&lt;p&gt;有如下类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;</summary>
      
    
    
    
    
    <category term="fastjson" scheme="https://ainexur.github.io/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>JDK之ArrayList源码剖析</title>
    <link href="https://ainexur.github.io/2022/02/12/JDK%E4%B9%8BArrayList%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>https://ainexur.github.io/2022/02/12/JDK%E4%B9%8BArrayList%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</id>
    <published>2022-02-12T15:48:10.000Z</published>
    <updated>2022-06-20T00:09:23.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h1><p>基于<code>java version &quot;1.8.0_321&quot;</code></p><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>ArrayList底层是用数组实现的，<code>Object</code>数组</p><pre><code class="hljs java"><span class="hljs-keyword">transient</span> Object[] elementData; <span class="hljs-comment">// non-private to simplify nested class access</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<span class="hljs-comment">//元素个数</span></code></pre><h2 id="扩容分析"><a href="#扩容分析" class="headerlink" title="扩容分析"></a>扩容分析</h2><p>看一下add方法：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span>    elementData[size++] = e;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><p>在添加元素之前，会进行一个容量是否需要增长判断操作<code>ensureCapacityInternal(size + 1); </code>。</p><pre><code class="hljs java"><span class="hljs-comment">//2</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<span class="hljs-comment">//如果数组是默认空元素数组</span>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<span class="hljs-comment">// 将两者中较大的值作为minCapacity</span>    &#125;    <span class="hljs-keyword">return</span> minCapacity;<span class="hljs-comment">//否则minCapacity不变</span>&#125;<span class="hljs-comment">//1</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//</span>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));&#125;<span class="hljs-comment">//3</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;    modCount++;    <span class="hljs-comment">// overflow-conscious code</span>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//如果需要的容量大于现有数组容量</span>        grow(minCapacity);&#125;</code></pre><p>如果当前数组的容量不足够放下元素个数，就执行<code>grow(minCapacity);</code>扩容</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_ARRAY_SIZE</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE - <span class="hljs-number">8</span>;<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;    <span class="hljs-comment">// overflow-conscious code</span>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//如果扩容1.5倍还不满足大小，就直接扩容到minCapacity</span>    newCapacity = minCapacity;    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//负数-正数，结果可能是正数，所以这个时候就需要特判容量是否溢出</span>    newCapacity = hugeCapacity(minCapacity);<span class="hljs-comment">//如果容量超过默认的最大容量，判断是否过大</span>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span>    elementData = Arrays.copyOf(elementData, newCapacity);<span class="hljs-comment">//将旧数组复制到新容量的数组返回</span>&#125;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hugeCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//判断容量是否超int大小</span>    <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();    <span class="hljs-keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?        Integer.MAX_VALUE :    MAX_ARRAY_SIZE;&#125;</code></pre><p>由<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>判断，新的数组的容量是原来的1.5倍（<code>&gt;&gt;</code>右移等价于除以2）</p><p>要注意的是，扩容后的容量可能溢出变为负数，这时候就需要<code>hugeCapacity(minCapacity)</code>函数判断溢出这种情况.</p><h2 id="ArrayList常用方法复杂度分析"><a href="#ArrayList常用方法复杂度分析" class="headerlink" title="ArrayList常用方法复杂度分析"></a>ArrayList常用方法复杂度分析</h2><h3 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span>    elementData[size++] = e;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><p>直接在元素列末尾添加一个元素,复杂度可看成O(1)</p><h3 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;    rangeCheckForAdd(index);    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>,                     size - index);    elementData[index] = element;    size++;&#125;</code></pre><p>index及后的所有元素往后移一位,复杂度近似O(n)</p><h3 id="remove-int-index"><a href="#remove-int-index" class="headerlink" title="remove(int index)"></a>remove(int index)</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;    rangeCheck(index);    modCount++;    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,                         numMoved);    elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// clear to let GC do its work</span>    <span class="hljs-keyword">return</span> oldValue;&#125;</code></pre><p>删除指定位置的元素,其他的所有元素往前移一位,O(n)</p><h3 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)            <span class="hljs-keyword">if</span> (elementData[index] == <span class="hljs-literal">null</span>) &#123;                fastRemove(index);                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)            <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;                fastRemove(index);                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre><p>删除首个指定元素,其后所有元素往前移一位O(n)</p><h3 id="indexOf-Object-o"><a href="#indexOf-Object-o" class="headerlink" title="indexOf(Object o)"></a>indexOf(Object o)</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(Object o)</span> &#123;    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)            <span class="hljs-keyword">if</span> (elementData[i]==<span class="hljs-literal">null</span>)                <span class="hljs-keyword">return</span> i;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)            <span class="hljs-keyword">if</span> (o.equals(elementData[i]))                <span class="hljs-keyword">return</span> i;    &#125;    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;&#125;</code></pre><p>O(n)</p><h3 id="contains-Object-o"><a href="#contains-Object-o" class="headerlink" title="contains(Object o)"></a>contains(Object o)</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object o)</span> &#123;    <span class="hljs-keyword">return</span> indexOf(o) &gt;= <span class="hljs-number">0</span>;&#125;</code></pre><p>O(n)</p><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;    modCount++;    <span class="hljs-comment">// clear to let GC do its work</span>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)        elementData[i] = <span class="hljs-literal">null</span>;    size = <span class="hljs-number">0</span>;&#125;</code></pre><p>将所有有元素的索引置null,不缩减容量.O(n)</p><h3 id="addAll-Collection-lt-extends-E-gt-c"><a href="#addAll-Collection-lt-extends-E-gt-c" class="headerlink" title="addAll(Collection&lt;? extends E&gt; c)"></a>addAll(Collection&lt;? extends E&gt; c)</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;    Object[] a = c.toArray();    <span class="hljs-type">int</span> <span class="hljs-variable">numNew</span> <span class="hljs-operator">=</span> a.length;    ensureCapacityInternal(size + numNew);  <span class="hljs-comment">// Increments modCount</span>    System.arraycopy(a, <span class="hljs-number">0</span>, elementData, size, numNew);    size += numNew;    <span class="hljs-keyword">return</span> numNew != <span class="hljs-number">0</span>;&#125;</code></pre><p>将集合的所有元素追加至末尾,复杂度O(k),k为集合的元素个数</p><p>addAll(int index, Collection&lt;? extends E&gt; c)</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(<span class="hljs-type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;    rangeCheckForAdd(index);    Object[] a = c.toArray();    <span class="hljs-type">int</span> <span class="hljs-variable">numNew</span> <span class="hljs-operator">=</span> a.length;    ensureCapacityInternal(size + numNew);  <span class="hljs-comment">// Increments modCount</span>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index;    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)        System.arraycopy(elementData, index, elementData, index + numNew,                         numMoved);    System.arraycopy(a, <span class="hljs-number">0</span>, elementData, index, numNew);    size += numNew;    <span class="hljs-keyword">return</span> numNew != <span class="hljs-number">0</span>;&#125;</code></pre><p>将集合所有元素追加至具体位置上,其后所有元素往后移k位,复杂度O(n + k)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ArrayList源码分析&quot;&gt;&lt;a href=&quot;#ArrayList源码分析&quot; class=&quot;headerlink&quot; title=&quot;ArrayList源码分析&quot;&gt;&lt;/a&gt;ArrayList源码分析&lt;/h1&gt;&lt;p&gt;基于&lt;code&gt;java version &amp;quot</summary>
      
    
    
    
    
    <category term="JDK" scheme="https://ainexur.github.io/tags/JDK/"/>
    
    <category term="Java" scheme="https://ainexur.github.io/tags/Java/"/>
    
    <category term="源码计划" scheme="https://ainexur.github.io/tags/%E6%BA%90%E7%A0%81%E8%AE%A1%E5%88%92/"/>
    
    <category term="ArrayList" scheme="https://ainexur.github.io/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>十个经典排序</title>
    <link href="https://ainexur.github.io/2022/02/10/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/"/>
    <id>https://ainexur.github.io/2022/02/10/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/</id>
    <published>2022-02-10T06:26:06.000Z</published>
    <updated>2022-06-20T00:09:23.079Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><h1 id="排序是什么"><a href="#排序是什么" class="headerlink" title="排序是什么"></a>排序是什么</h1><blockquote><p>百度百科：排序是计算机内经常进行的一种操作，其目的是将一组“无序”的记录序列调整为“有序”的记录序列。分内部排序和外部排序，若整个排序过程不需要访问外存便能完成，则称此类排序问题为内部排序。反之，若参加排序的记录数量很大，整个序列的排序过程不可能在内存中完成，则称此类排序问题为外部排序。内部排序的过程是一个逐步扩大记录的有序序列长度的过程。</p></blockquote><p>排序是<strong>将一组“无序”的记录序列调整为“有序”的记录序列</strong>，分内部排序和外部排序。本文主要介绍内部排序</p><p><strong>稳定排序</strong>：假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法是稳定的。其中冒泡，插入，基数，归并属于稳定排序，选择，快速，希尔，归属于不稳定排序。 </p><p><strong>就地排序</strong>：若排序算法所需的辅助空间并不依赖于问题的规模n，即辅助空间为O（1）则称为就地排序。</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序，顾名思义就是</p><ol><li>两两比较，如果左边元素大于右边元素，则交换两个元素</li><li>重复直到交换到最右边界，则当前区间最大元素被移到最右边，区间-1</li><li>重复1-2，每一轮排序后最大的数将移动到数据序列的最后，直到所有元素都移到有序的位置上，排序完成</li></ol><p>这样一个个元素按序冒到最后，就像冒泡一样的排序称为冒泡排序</p><p><strong>复杂度：</strong></p><p>O（n^2)，稳定排序</p><p><strong>代码：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span> &#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];        arr[i] = arr[j];        arr[j] = t;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i --)  <span class="hljs-comment">//控制区间右边界</span>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j ++)  <span class="hljs-comment">//当前冒的元素的位置</span>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])                    swap(arr, j, j + <span class="hljs-number">1</span>);    <span class="hljs-comment">//两两交换</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">123</span>, <span class="hljs-number">34</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;;        bubbleSort(arr);<span class="hljs-comment">//冒泡排序</span>        System.out.println(Arrays.toString(arr));    &#125;&#125;</code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li>每一趟从待排序的数据元素中，选出最小的元素放在已排序的元素列的最后面</li><li>重复，直到待排序数据元素为空，排序完成</li></ul><p><strong>复杂度：</strong></p><p>O(n^2)，可以分为稳定和不稳定两种实现</p><p><strong>代码：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSort</span> &#123;        <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];        arr[i] = arr[j];        arr[j] = t;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> i;  <span class="hljs-comment">//第i小的元素的下标</span>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j ++) &#123;                <span class="hljs-keyword">if</span> (arr[j] &lt; arr[t])                    t = j;            &#125;            swap(arr, i, t);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">123</span>, <span class="hljs-number">34</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;;        selectSort(arr);        System.out.println(Arrays.toString(arr));    &#125;&#125;</code></pre><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><ul><li>将待插入的元素，与已排序好的元素逐个比较，找到一个合适的位置插入，该位置后的所有元素后移一位。</li><li>直到所有元素插入完毕，排序完成</li></ul><p><strong>复杂度：</strong></p><p>O(n^2)，稳定排序</p><p><strong>代码：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertionSort</span> &#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];        arr[i] = arr[j];        arr[j] = t;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> i;  <span class="hljs-comment">//第i小的元素的下标</span>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j --) &#123;                <span class="hljs-keyword">if</span> (arr[t] &lt; arr[j]) swap(arr, t--, j); <span class="hljs-comment">//如果t比j小，说明j要往后挪一位，t往前挪一位</span>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">123</span>, <span class="hljs-number">34</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;;        insertionSort(arr);        System.out.println(Arrays.toString(arr));    &#125;&#125;</code></pre><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>是直接插入排序的优化</p><p>- </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1&lt;/p&gt;
&lt;h1 id=&quot;排序是什么&quot;&gt;&lt;a href=&quot;#排序是什么&quot; class=&quot;headerlink&quot; title=&quot;排序是什么&quot;&gt;&lt;/a&gt;排序是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;百度百科：排序是计算机内经常进行的一种操作，其目的是将一组“无序”的记录</summary>
      
    
    
    
    
    <category term="排序、算" scheme="https://ainexur.github.io/tags/%E6%8E%92%E5%BA%8F%E3%80%81%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Windwos文件校验</title>
    <link href="https://ainexur.github.io/2022/01/26/Windwos%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/"/>
    <id>https://ainexur.github.io/2022/01/26/Windwos%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/</id>
    <published>2022-01-25T16:33:19.000Z</published>
    <updated>2023-03-20T15:17:32.348Z</updated>
    
    <content type="html"><![CDATA[<p><strong>命令</strong>：</p><pre><code class="hljs shell">certutil -hashfile xxx MD5certutil -hashfile xxx SHA1certutil -hashfile xxx SHA256</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;certutil -hashfile xxx MD5
certutil -hashfile xxx SHA1
certutil -hashfile xxx SHA2</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://ainexur.github.io/tags/Windows/"/>
    
  </entry>
  
</feed>
