<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring4实战</title>
    <link href="/2023/05/15/Spring%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/15/Spring%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Spring致力于全方位的简化Java开发，采取了4种策略：</p><ol><li>基于POJO的轻量级和最小侵入性编程; </li><li>通过依赖注入和面向接口实现松耦合;</li><li>基于切面和惯例进行声明式编程;</li><li>通过切面和模板减少样板式代码。</li></ol><h1 id="01-Spring-Core"><a href="#01-Spring-Core" class="headerlink" title="01.Spring-Core"></a>01.Spring-Core</h1><blockquote><p>下载地址：<a href="https://repo.spring.io/ui/native/libs-release/org/springframework/spring">https://repo.spring.io/ui/native/libs-release/org/springframework/spring</a></p></blockquote><h1 id="IoC（控制反转）"><a href="#IoC（控制反转）" class="headerlink" title="IoC（控制反转）"></a>IoC（控制反转）</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>目的：降低耦合性。   </p><blockquote><p>控制反转是软件工程中的一项原则，它将对对象或程序部分的控制转移到容器或框架中。我们最常在面向对象编程的上下文中使用它。</p></blockquote><blockquote><p>与我们的自定义代码调用库的传统编程相比，IoC 使框架能够控制程序的流程并调用我们的自定义代码。为了实现这一点，框架使用内置附加行为的抽象。<strong>如果我们想添加自己的行为，我们需要扩展框架的类或插入我们自己的类。</strong></p><p>我们可以通过各种机制来实现控制反转，例如：策略设计模式、服务定位器模式、工厂模式和依赖注入（DI）。</p></blockquote><h3 id="IOC操作Bean管理（FactoryBean）"><a href="#IOC操作Bean管理（FactoryBean）" class="headerlink" title="IOC操作Bean管理（FactoryBean）"></a>IOC操作Bean管理（FactoryBean）</h3><p>Spring里的Bean分为普通Bean和工厂Bean（FactoryBean），普通Bean在配置文件中配置的类即是Bean实例类型；工厂Bean返回的类型可以和配置文件中定义的类型不同。</p><p>工厂Bean实现：</p><h2 id="DI-（依赖注入）"><a href="#DI-（依赖注入）" class="headerlink" title="DI （依赖注入）"></a>DI （依赖注入）</h2><blockquote><p>依赖注入是我们可以用来实现 IoC 的一种模式，其中被反转的控制是设置对象的依赖关系。</p><p>将对象与其他对象连接起来，或将对象“注入”到其他对象中，是由汇编程序完成的，而不是由对象本身完成的。</p></blockquote><h1 id="AOP-切面编程）"><a href="#AOP-切面编程）" class="headerlink" title="AOP (切面编程）"></a>AOP (切面编程）</h1><p>不改变源码的前提下，增强源码功能。实现手段有<strong>JDK动态代理</strong>和<strong>cglib动态代理</strong>。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>方便解耦、简化开发</li><li>AOP的编程支持</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便继承各种优秀的框架</li><li>降低Java EE API的使用难度</li><li>Java源码是经典学习范例</li></ul><h2 id="实现手段"><a href="#实现手段" class="headerlink" title="实现手段"></a>实现手段</h2><h3 id="接口的JDK动态代理"><a href="#接口的JDK动态代理" class="headerlink" title="接口的JDK动态代理"></a>接口的JDK动态代理</h3><p><code>UserDao.java</code>：接口类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>UserDaoImpl.java</code>：接口实现类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add()方法执行..&quot;</span>);<br>         <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;update()方法执行..&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>JDKProxy.java</code>：动态代理增强例子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//要增强的接口类</span><br>        Class[] interfaces = &#123;UserDao.class&#125;;<br>        <span class="hljs-comment">//接口实现类实例</span><br>        <span class="hljs-type">UserDaoImpl</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        <span class="hljs-comment">//获取接口的增强实现类</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> (UserDao)Proxy.newProxyInstance<br>                (JDKProxy.class.getClassLoader()<br>                , interfaces<br>                , <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br>        <span class="hljs-comment">//调用增强实现类后的add方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//调用增强实现类后的update方法</span><br>        dao.update(<span class="hljs-string">&quot;update....&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;res = &quot;</span> + res);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//对接口实现类做一个动态代理增强。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-comment">//增强的逻辑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//before</span><br>        System.out.println(<span class="hljs-string">&quot;方法执行之前...&quot;</span> + method.getName() + <span class="hljs-string">&quot;传递的参数: &quot;</span> + Arrays.toString(args));<br>        <span class="hljs-comment">//被增强的方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>        <span class="hljs-comment">//after</span><br>        System.out.println(<span class="hljs-string">&quot;方法执行之后...&quot;</span> + obj);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>OUTPUT</code>:</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">方法执行之前...add传递的参数: <span class="hljs-selector-attr">[1, 2]</span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">()</span></span>方法执行..<br>方法执行之后..<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ainexur</span><span class="hljs-selector-class">.spring5</span>.UserDaoImpl@<span class="hljs-number">79</span>fc0f2f<br>方法执行之前...update传递的参数: <span class="hljs-selector-attr">[update....]</span><br><span class="hljs-function"><span class="hljs-title">update</span><span class="hljs-params">()</span></span>方法执行..<br>id = update....<br>方法执行之后..<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ainexur</span><span class="hljs-selector-class">.spring5</span>.UserDaoImpl@<span class="hljs-number">79</span>fc0f2f<br>res = <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h3 id="无接口的cglib动态代理"><a href="#无接口的cglib动态代理" class="headerlink" title="无接口的cglib动态代理"></a>无接口的cglib动态代理</h3><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li><strong>连接点</strong>：类里面哪些方法可以被增强，这些方法称为连接点</li><li><strong>切入点</strong>：实际被真正增强的方法，称为切入点</li><li><strong>通知</strong>（增强）：<ul><li>实际增强的逻辑部分称为通知（增强）</li><li>通知有多种类型：前置通知、后置通知、环绕通知、异常通知、最终通知</li></ul></li><li><strong>切面</strong>：是动作，把通知应用到切入点的过程称为切面。</li></ol><h2 id="AOP操作（准备）"><a href="#AOP操作（准备）" class="headerlink" title="AOP操作（准备）"></a>AOP操作（准备）</h2><p>Spring框架一般基于AspectJ实现AOP操作</p><h3 id="1-什么是AspectJ"><a href="#1-什么是AspectJ" class="headerlink" title="1. 什么是AspectJ"></a>1. 什么是AspectJ</h3><p>不是Spring的组成部分，独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</p><h3 id="2-基于AspectJ实现AOP操作"><a href="#2-基于AspectJ实现AOP操作" class="headerlink" title="2. 基于AspectJ实现AOP操作"></a>2. 基于AspectJ实现AOP操作</h3><p>基于XML配置文件实现</p><p>*基于注解方式实现（使用）</p><h3 id="3-导包"><a href="#3-导包" class="headerlink" title="3. 导包"></a>3. 导包</h3><h3 id="4-切入点表达式"><a href="#4-切入点表达式" class="headerlink" title="4. 切入点表达式"></a>4. 切入点表达式</h3><p>作用：知道对哪个类里面的那个方法进行增强</p><p>语法结构：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">execution(<span class="hljs-selector-attr">[权限修饰符]</span><span class="hljs-selector-attr">[返回类型]</span><span class="hljs-selector-attr">[类全路径]</span><span class="hljs-selector-attr">[方法名称]</span><span class="hljs-selector-attr">[参数列表]</span>)<br></code></pre></div></td></tr></table></figure><p>举例1：对<code>io.ainexur.dao.BookDao</code>类里面的add进行增强</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* io.ainexur.dao.BookDao.add(..)</span></span>)<br></code></pre></div></td></tr></table></figure><p>举例2：对<code>io.ainexur.dao.BookDao</code>类里面的所有方法进行增强</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* io.ainexur.dao.BookDao.*(..)</span></span>)<br></code></pre></div></td></tr></table></figure><p>举例3：对<code>io.ainexur.dao</code>包里的所有类里面的所有方法进行增强</p><figure class="highlight lisp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lisp">execution(<span class="hljs-name">*</span> io.ainexur.dao.*.*(..))<br></code></pre></div></td></tr></table></figure><h3 id="5-AspectJ注解实现"><a href="#5-AspectJ注解实现" class="headerlink" title="5. AspectJ注解实现"></a>5. AspectJ注解实现</h3><p>创建被增强类<code>User.class</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//被增强的类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add()........&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>创建增强类<code>UserProxy.class</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//增强类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br><br>    <span class="hljs-comment">//@before表示前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* io.ainexur.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before().......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>进行通知文件的配置：</p><ul><li>在Spring配置文件中，开启注解扫描</li><li>使用注解创建User和UserProxy对象：<code>@Component</code></li><li>在增强类上面添加注解：<code>@Aspect</code></li><li>在Spring配置文件中开启生成代理对象</li></ul><h3 id="6-AspectJ-XML配置文件实现"><a href="#6-AspectJ-XML配置文件实现" class="headerlink" title="6.AspectJ XML配置文件实现"></a>6.AspectJ XML配置文件实现</h3><h1 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h1><p>Spring对jdbc的封装， 使用JdbcTemplate方便实现对数据库操作。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h3><img src="C:\Users\coco\AppData\Roaming\Typora\typora-user-images\image-20220314074220155.png" alt="image-20220314074220155" style="zoom:50%;" /><h3 id="2-在Spring配置文件中配置连接池"><a href="#2-在Spring配置文件中配置连接池" class="headerlink" title="2. 在Spring配置文件中配置连接池"></a>2. 在Spring配置文件中配置连接池</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    数据库连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///user_db&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-配置JdbcTemplate对象"><a href="#3-配置JdbcTemplate对象" class="headerlink" title="3.配置JdbcTemplate对象"></a>3.配置JdbcTemplate对象</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--JdbcTemplate对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入DataSource属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-创建Service类，创建Dao类，在Dao注入jdbcTemplate对象"><a href="#4-创建Service类，创建Dao类，在Dao注入jdbcTemplate对象" class="headerlink" title="4. 创建Service类，创建Dao类，在Dao注入jdbcTemplate对象"></a>4. 创建Service类，创建Dao类，在Dao注入jdbcTemplate对象</h3><p>组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;io.ainexur.spring5&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>Dao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-comment">//注入JdbcTemplate</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Service</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h1><p>事务添加到JavaEE三层结构里的Service层</p><p>在Spring进行事务管理操作：</p><ol><li>有两种方式：编程式事务管理（不经常用）和声明式事务管理（使用）</li><li>声明式事务管理：<ul><li>基于注解方式（简单，常用）</li><li>基于XML配置文件方式</li></ul></li></ol><p>在Spring进行声明式事务管理，底层使用AOP</p><p>Spring事务管理API：提供一个接口，代表事务管理，这个接口针对不同的框架提供不同的实现类。</p><img src="C:\Users\coco\AppData\Roaming\Typora\typora-user-images\image-20220316103821056.png" alt="image-20220316103821056" style="zoom:50%;" /><h2 id="基于注解-amp-XML的声明式事务管理"><a href="#基于注解-amp-XML的声明式事务管理" class="headerlink" title="基于注解&amp;XML的声明式事务管理"></a>基于注解&amp;XML的声明式事务管理</h2><p><strong>xml配置事务管理器</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    创建事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>xml开启事务管理</strong></p><ul><li><p>引入<code>tx</code>命名空间</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>开启事务注解</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    开启事务注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:annotation-driven</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在Service类上（或者Service类里面方法上）添加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ol><li><code>@Transactional</code>该注解添加到类上，则类里所有方法都添加事务</li><li><code>@Transactional</code>该注解添加到方法上，则只为该方法添加事务</li></ol></li></ul><h2 id="声明式事务管理参数配置（注解配置相关参数）"><a href="#声明式事务管理参数配置（注解配置相关参数）" class="headerlink" title="声明式事务管理参数配置（注解配置相关参数）"></a>声明式事务管理参数配置（注解配置相关参数）</h2><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220316233206706.png" alt="image-20220316233206706"></p><h3 id="propagation"><a href="#propagation" class="headerlink" title="propagation"></a>propagation</h3><p>事务传播行为</p><ol><li><p>多事务方法直接进行调用，这个过程事务是如何进行管理的</p><ul><li>事务方法：对数据库表数据进行变化的操作(增删改是，查不是)</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>    update();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upadte</span><span class="hljs-params">()</span> &#123;<br>    <br>&#125;<br><span class="hljs-comment">//通过add()调用upadte()，事务是怎么处理的，这个过程就叫传播行为</span><br></code></pre></div></td></tr></table></figure></li><li><p>Spring框架事务传播有七种传播行为</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220317003631476.png" alt="image-20220317003631476"></p></li><li><p>主要使用前两种，其他了解有个印象就行</p></li></ol><p>配置举例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br></code></pre></div></td></tr></table></figure><h3 id="ioslation"><a href="#ioslation" class="headerlink" title="ioslation"></a>ioslation</h3><p>事务隔离级别</p><ol><li><p>事务有特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题：</p></li><li><p>三个读问题</p><ul><li>脏读：一个未提交事务读取到另一个未提交事务的数据（问题）</li><li>不可重复读：一个未提交事务读到一个已经提交事务的数据（现象）</li><li>幻读（虚读）：一个未提交事务读到另一个提交事务添加数据（）</li></ul></li><li><p>通过设置事务隔离性，解决读问题</p><p>四个隔离级别：</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220317024524526.png" alt="image-20220317024524526"></p></li></ol><p>配置举例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.REPEATABLE_READ)</span><br></code></pre></div></td></tr></table></figure><p>MySQL中默认的隔离级别</p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>超时时间：</p><ol><li>事务需要在一定的时间内进行提交，如果不提交进行回滚</li><li>默认为-1（即不超时），设置时间以秒为单位进行计算</li></ol><p>配置举例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(timeout = 100)</span><br></code></pre></div></td></tr></table></figure><h3 id="readOnly"><a href="#readOnly" class="headerlink" title="readOnly"></a>readOnly</h3><p>是否只读：</p><ol><li>读：查询操作，写：添加修改删除操作</li><li>readOnly默认值是False，表示可以增删改查</li><li>设置readOnly为True时，只能使用查询</li></ol><p>配置举例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true)</span><br></code></pre></div></td></tr></table></figure><h3 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h3><p>回滚：</p><ol><li>设置出现哪些异常进行事务回滚</li></ol><h3 id="noRollbackFor"><a href="#noRollbackFor" class="headerlink" title="noRollbackFor"></a>noRollbackFor</h3><p>不回滚：</p><ol><li>设置出现哪些异常不进行事务回滚</li></ol><h2 id="基于XML配置的方式声明式事务管理"><a href="#基于XML配置的方式声明式事务管理" class="headerlink" title="基于XML配置的方式声明式事务管理"></a>基于XML配置的方式声明式事务管理</h2><ul><li>配置事务管理器</li><li>配置通知（增强的类）</li><li>配置切入点和切面（要增强的类，即要使用事务的类）</li></ul><p>XML配置例子：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--1, 创建事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2。配置通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txadvice&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置事务参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定哪种方法上添加事务--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acountMoney&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;tx:method name=&quot;acount*&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--3.配置切入点和切面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* io.ainexur.spring5.service.UserService.* (..)&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txadvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="完全注解方式的声明式事务管理"><a href="#完全注解方式的声明式事务管理" class="headerlink" title="完全注解方式的声明式事务管理"></a>完全注解方式的声明式事务管理</h2><p><strong>创建配置类<code>TxConfig.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;io.ainexur&quot;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span>    <span class="hljs-comment">//开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxConfig</span> &#123;<br><br>    <span class="hljs-comment">//创建配置类的连接池</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">getDruidDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///user_db?allowPublicKeyRetrieval=true&amp;useSSL=false&quot;</span>);<br>        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br><br>    <span class="hljs-comment">//创建JdbcTemplate对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span> &#123;    <span class="hljs-comment">//到IOC容器里自动寻找DataSource对象</span><br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">//创建事务管理容器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTransactional2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(TxConfig.class);<br><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    userService.accountMoney();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>结果</strong></p><p>配置类代理XML配置，和XML配置运行结果一致。</p><h1 id="Spring5新功能和特性"><a href="#Spring5新功能和特性" class="headerlink" title="Spring5新功能和特性"></a>Spring5新功能和特性</h1><h2 id="更"><a href="#更" class="headerlink" title="更"></a>更</h2><ol><li><p>整个Spring5框架基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除</p></li><li><p>Spring5框架自带了日志的封装</p><ul><li>Spring5已经移除了Log4jConfigListener，官方建议使用Log4j2</li><li>Spring5框架整合Log4j2</li><li>整合Log4j2<ul><li>引入jar包</li><li>创建<code>Log4j2.xml</code>配置文件，<code>log4j2.xml</code>文件名字是固定的。</li></ul></li></ul></li><li><p>Spring5框架核心容器支持<code>@Nullable</code>注解</p><p><code>@Nullable</code>注解可以用在方法、属性、参数上</p><ul><li>用在方法上，表示返回值可以为空</li><li>用在属性上，表示属性值可以为空</li><li>用在参数上，表示参数可以为空</li></ul></li><li><p>Spring5核心容器支持函数式风格<code>GenericApplicationContext</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenericApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//创建GenericApplicationContext对象</span><br>    <span class="hljs-type">GenericApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericApplicationContext</span>();<br>    <span class="hljs-comment">//调用context方法对象注册</span><br>    context.refresh();<br>    context.registerBean(User.class, () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>    <span class="hljs-comment">//获取在Spring中注册的对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(User.class);<br>    System.out.println(user);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>Spring5支持整合JUnit5</p></li></ol><h2 id="新"><a href="#新" class="headerlink" title="新"></a>新</h2><ol><li>SpringWebFlux</li></ol><h2 id="Spring单元测试"><a href="#Spring单元测试" class="headerlink" title="Spring单元测试"></a>Spring单元测试</h2><h3 id="Spring整合JUnit4"><a href="#Spring整合JUnit4" class="headerlink" title="Spring整合JUnit4"></a>Spring整合JUnit4</h3><ol><li><p>引入Spring相关依赖<code>spring-test-5.3.16.jar</code>、<code>hamcrest-core-1.3.jar</code>、<code>junit-4.13.1.jar</code></p></li><li><p>创建测试类<code>JTest4.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="hljs-comment">//单元测试框架</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span>    <span class="hljs-comment">//加载配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest4</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        userService.accountMoney();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//通过注解自动加载配置文件，省去每个测试方法都需要手动加载配置文件。</span><br><span class="hljs-comment">//自动加载配置文件后，可以通过注解注入属性</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="Spring5整合JUnit5"><a href="#Spring5整合JUnit5" class="headerlink" title="Spring5整合JUnit5"></a>Spring5整合JUnit5</h3><ol><li><p>引入相关依赖</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220317174135264.png" alt="image-20220317174135264" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">apiguardian-api-<span class="hljs-number">1.1</span><span class="hljs-number">.2</span>.jar<br>junit-jupiter-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jar<br>junit-jupiter-api-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jar <br>junit-jupiter-engine-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jar<br>junit-jupiter-params-<span class="hljs-number">5.8</span><span class="hljs-number">.1</span>.jar<br>junit-platform-commons-<span class="hljs-number">1.8</span><span class="hljs-number">.1</span>.jar<br>junit-platform-engine-<span class="hljs-number">1.8</span><span class="hljs-number">.1</span>.jar<br>opentest4j-<span class="hljs-number">1.2</span><span class="hljs-number">.0</span>.jar<br></code></pre></div></td></tr></table></figure></li><li><p>创建测试类<code>JTest5.java</code>:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@ExtendWith(SpringExtension.class)</span><br><span class="hljs-comment">//@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:bean1.xml&quot;)</span> <span class="hljs-comment">//复合注解，代替上面两个，简化配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest5</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        userService.accountMoney();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="SpringWebFlux"><a href="#SpringWebFlux" class="headerlink" title="*SpringWebFlux"></a>*SpringWebFlux</h2><h3 id="1-什么是SpringWebFlux"><a href="#1-什么是SpringWebFlux" class="headerlink" title="1.什么是SpringWebFlux"></a>1.什么是SpringWebFlux</h3><ul><li>Spring5添加的新模块，用于Web开发，功能和SpringMVC类似， WebFlux为当前一种比较流行的响应式编程出现的框架。</li><li>使用传统Web框架，比如SpringMVC，这些都基于Servlet容器；WebFlux是一种异步非阻塞的框架，异步非阻塞的框架在Servlet3.1以后才支持。核心<strong>基于Reactor的相关API实现</strong>。<ul><li>异步非阻塞：</li></ul></li></ul><h3 id="2-响应式编程"><a href="#2-响应式编程" class="headerlink" title="2.响应式编程"></a>2.响应式编程</h3><h3 id="3-WebFlux执行流程和API"><a href="#3-WebFlux执行流程和API" class="headerlink" title="3.WebFlux执行流程和API"></a>3.WebFlux执行流程和API</h3><h3 id="4-SpringWebFlux（基于注解编程模型）"><a href="#4-SpringWebFlux（基于注解编程模型）" class="headerlink" title="4. SpringWebFlux（基于注解编程模型）"></a>4. SpringWebFlux（基于注解编程模型）</h3><h3 id="5-SpringWebFlux（基于注解编程模型）"><a href="#5-SpringWebFlux（基于注解编程模型）" class="headerlink" title="5.SpringWebFlux（基于注解编程模型）"></a>5.SpringWebFlux（基于注解编程模型）</h3><h1 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h1><ol><li>maven导入Spring包</li><li>创建Dao接口和实现</li><li>创建Spring核心配置文件</li><li>在Spring配置文件中配置UserDaoImpl</li><li>使用Spring的API获得Beans实例</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7指南</title>
    <link href="/2023/03/20/centos7%E6%8C%87%E5%8D%97/"/>
    <url>/2023/03/20/centos7%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="常用命令和操作"><a href="#常用命令和操作" class="headerlink" title="常用命令和操作"></a>常用命令和操作</h2><h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo adduser k<br></code></pre></div></td></tr></table></figure><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">passwd k<br></code></pre></div></td></tr></table></figure><h4 id="开启sudo权限"><a href="#开启sudo权限" class="headerlink" title="开启sudo权限"></a>开启sudo权限</h4><ol><li><p>将root用户的sudoers增加写权限， 使得下一步可以修改该文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod -v u+w /etc/sudoers#root用户增加写权限， 使得可修改该文件<br></code></pre></div></td></tr></table></figure></li><li><p>找到该位置<code>rootALL=(ALL)ALL</code>， 并在接下来的一行新增</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">kALL=(ALL)ALL<br></code></pre></div></td></tr></table></figure></li><li><p>去除root用户的写权限</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod -v u+w /etc/sudoers#root用户增加写权限， 使得可修改该文件<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="CentOS7允许root-x2F-开启密码登录"><a href="#CentOS7允许root-x2F-开启密码登录" class="headerlink" title="CentOS7允许root&#x2F;开启密码登录"></a>CentOS7允许root&#x2F;开启密码登录</h3><p>1、 修改sshd配置</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/ssh/sshd\_config<br></code></pre></div></td></tr></table></figure><p>将如下两项改为yes， 如果是注释#状态就取消注释</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">PasswordAuthentication yes#允许使用密码登录<br>PermitRootLogin yes#允许root认证登录<br></code></pre></div></td></tr></table></figure><p>2、重启sshd</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl restart sshd<br></code></pre></div></td></tr></table></figure><p>3、设置免密登录(可选)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh\-kengen ssh\-copy-id -i .ssh/id\_rsa.pub  root@172.0.0.3<br></code></pre></div></td></tr></table></figure><h3 id="查看包名和安装位置"><a href="#查看包名和安装位置" class="headerlink" title="查看包名和安装位置"></a>查看包名和安装位置</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">先查看一波软件包名</span><br>rpm -qa|grep mysql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">再使用rpm -ql 包名查看目录，例如：</span><br>rpm -ql mysql80-community-release-el8-2.noarch<br></code></pre></div></td></tr></table></figure><h3 id="查看所有已安装的包"><a href="#查看所有已安装的包" class="headerlink" title="查看所有已安装的包"></a>查看所有已安装的包</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum list installed <br></code></pre></div></td></tr></table></figure><h3 id="更新具体的yum包"><a href="#更新具体的yum包" class="headerlink" title="更新具体的yum包"></a>更新具体的yum包</h3><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby">yum update mysql<br></code></pre></div></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>由于mysql被oracle收购，后面可能面临闭源问题，所以用mariadb（mysql的另一个分支代替）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum remove mysql#卸载残留<br>yum -y install mariadb-server mariadb#安装<br>service mariadb start#启动<br></code></pre></div></td></tr></table></figure><p>设置开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">sudo systemctl enable mariadb#设置开机启动<br>sudo systemctl is-enabled maradb#查看是否开机启动<br></code></pre></div></td></tr></table></figure><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">apt-get update<br>apt-get install vim<br></code></pre></div></td></tr></table></figure><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">ntp</span><br>sudo yum install ntp<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置时区</span><br>sudo timedatectl set-timezone Asia/Shanghai<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/npt.conf新增下面配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">new(新增)</span><br>server ntp1.aliyun.com prefer<br>server ntp2.aliyun.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">手动同步</span><br>sudo ntpdate ntp1.aliyun.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看时间</span><br>date<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动ntp服务</span><br>sudo service ntpd start<br><span class="hljs-meta prompt_">#</span><span class="language-bash">开机启动</span><br>sudo chkconfig ntpd on<br></code></pre></div></td></tr></table></figure><h2 id="docker安装配置"><a href="#docker安装配置" class="headerlink" title="docker安装配置"></a>docker安装配置</h2><h3 id="centos7安装docker"><a href="#centos7安装docker" class="headerlink" title="centos7安装docker"></a>centos7安装docker</h3><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><blockquote><p>基本命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">基本命令</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前服务器内核版本</span><br>uname -r<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装 Docker</span><br>yum -y install docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动 Docker 后台服务</span><br>service docker start<br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试运行 hello-world,由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</span><br>docker run hello-world<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker</span><br>systemctl start docker.service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置docker开机自启动</span><br>systemctl enable docker.service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启docker</span><br>systemctl restart docker.service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看docker版本</span><br>docker -v<br><span class="hljs-meta prompt_">#</span><span class="language-bash">概要信息</span><br>docker info<br><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取hello-world测验</span><br>docker pull hello-world<br><span class="hljs-meta prompt_">#</span><span class="language-bash">镜像查看</span><br>docker images<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看容器列表：</span><br>docker ps -a<br></code></pre></div></td></tr></table></figure><p>CentOS7安装dokcer：<a href="https://docs.docker.com/engine/install/centos/#install-using-the-repository">https://docs.docker.com/engine/install/centos/#install-using-the-repository</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum install -y yum-utils<br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br>sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br>yum list docker-ce --showduplicates | sort -r<br>sudo yum install docker-ce docker-ce-cli<br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制回车，中途会提示好几个按y</span><br></code></pre></div></td></tr></table></figure><h3 id="docker镜像加速"><a href="#docker镜像加速" class="headerlink" title="docker镜像加速"></a>docker镜像加速</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>&quot;registry-mirrors&quot;: [&quot;https://mirror.ccs.tencentyun.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></div></td></tr></table></figure><h3 id="docker下安装mysql"><a href="#docker下安装mysql" class="headerlink" title="docker下安装mysql"></a>docker下安装mysql</h3><p>docker hub：<a href="https://hub.docker.com/search?q=mysql">https://hub.docker.com/search?q=mysql</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看镜像列表</span><br>sudo docker images<br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载mysql容器镜像,默认最新版</span><br>sudo docker pull mysql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建容器并启动</span><br>sudo docker run -itd --name mysql \<br>-v /mydata/mysql/data:/var/lib/mysql \<br>-v /mydata/mysql/conf:/etc/mysql \<br>-v /mydata/mysql/log:/var/log/mysql \<br>-v /mydata/mysql/mysql-files:/var/lib/mysql-files/ \<br>-p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">随docker启动</span><br>docker update mysql --restart=always<br></code></pre></div></td></tr></table></figure><p>如果要指定版本例如5.7</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo docker pull mysql:5.7<br>docker run -itd --name mysql:5.7 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql<br></code></pre></div></td></tr></table></figure><p>如果mysql切换了版本后，需要将挂载的文件删除重新生成，原因：不一致的文件会无法启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建容器但无法启动时需要执行如下：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CentOS7中的安全模块selinux把权限禁掉了，无法使用-v命令进行挂载</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加selinux规则，将要挂载的目录添加到白名单</span><br>sudo chcon -Rt svirt_sandbox_file_t /mydata/mysql/log<br>sudo chcon -Rt svirt_sandbox_file_t /mydata/mysql/data<br>sudo chcon -Rt svirt_sandbox_file_t /mydata/mysql/conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">原文链接：https://blog.csdn.net/qq_41999034/article/details/106162366</span><br></code></pre></div></td></tr></table></figure><p>进入mysql bash</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker exec -it mysql /bin/bash<br></code></pre></div></td></tr></table></figure><p>设置字符编码</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /mydata/mysql/conf/my.cnf<br></code></pre></div></td></tr></table></figure><p>将以下配置项复制</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[client]<br>default-character-set=utf8<br><br>[mysql]<br>default-character-set=utf8<br><br>[mysqld]<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>skip-name-resolve<br></code></pre></div></td></tr></table></figure><h3 id="docker下安装redis"><a href="#docker下安装redis" class="headerlink" title="docker下安装redis"></a>docker下安装redis</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo docker pull redis<br>sudo mkdir -p /mydata/redis/conf<br>sudo touch /mydata/redis/conf/redis.conf<br>sudo docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \<br>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-d redis redis-server /etc/redis/redis.conf<br>sudo docker exec -it redis redis-cli<br><span class="hljs-meta prompt_">#</span><span class="language-bash">随docker容器启动</span><br>docker update redis --restart=always<br></code></pre></div></td></tr></table></figure><h2 id="安装nps"><a href="#安装nps" class="headerlink" title="安装nps"></a>安装nps</h2><p>项目GitHub地址**<a href="https://github.com/ehang-io/nps">nps</a>**</p><p><a href="https://github.com/ehang-io/nps/blob/master/README_zh.md">中文文档</a></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz<br></code></pre></div></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar zxvf linux_amd64_server.tar.gz<br></code></pre></div></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./nps install<br></code></pre></div></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nps start<br></code></pre></div></td></tr></table></figure><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>浏览器输入url</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ip:8080<br></code></pre></div></td></tr></table></figure><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>默认账号 admin</p><p>密码 123</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看日志</span><br>cat /var/log/nps.log<br></code></pre></div></td></tr></table></figure><h4 id="修改web密码"><a href="#修改web密码" class="headerlink" title="修改web密码"></a>修改web密码</h4><p>编辑<code>/etc/nps/conf/nps.conf</code>的</p><table><thead><tr><th>web_password</th><th>web界面管理密码</th></tr></thead><tbody><tr><td>web_username</td><td>web界面管理账号</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>centos7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac指南</title>
    <link href="/2022/11/10/mac%E6%8C%87%E5%8D%97/"/>
    <url>/2022/11/10/mac%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Ctrl+A#到行首（达到Home键的效果）<br>Ctrl+E#到行尾（达到End键的效果）<br>Ctrl+N#到下一行<br>Ctrl+P#到上一行<br>Ctrl+K#从光标处开始删除，直到行尾<br>fn +左方向键是HOME<br>fn键+右方向键是END<br>fn+上方向键是page up<br>fn+下方向键是page down<br></code></pre></div></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">cnpm</span><br>sudo npm install cnpm -g --registry=https://registry.npmmirror.com<br></code></pre></div></td></tr></table></figure><h2 id="Git代理"><a href="#Git代理" class="headerlink" title="Git代理"></a>Git代理</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置如下</span><br>git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27;<br>git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取消如下</span><br>git unset http_proxy<br>git unset https_proxy<br></code></pre></div></td></tr></table></figure><h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">任意来源安装</span><br>sudo spctl --master-disable<br><span class="hljs-meta prompt_"># </span><span class="language-bash">brew安装，amd黑果只支持7.0以下的版本，7.0以上使用了apple 虚拟框架，amd无法开启</span><br>brew install virtualbox@6.1.8 --cask<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kuangbin专题</title>
    <link href="/2022/10/24/kuangbin%E4%B8%93%E9%A2%98/"/>
    <url>/2022/10/24/kuangbin%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="专题一-简单搜索"><a href="#专题一-简单搜索" class="headerlink" title="专题一 简单搜索"></a>专题一 简单搜索</h1><h2 id="1-棋盘问题"><a href="#1-棋盘问题" class="headerlink" title="1. 棋盘问题"></a>1. <a href="https://vjudge.csgrandeur.cn/problem/POJ-1321">棋盘问题</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>n皇后裸体</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">char</span> a[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> mark, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i == n ) <span class="hljs-keyword">return</span> x == <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">dfs</span>(i + <span class="hljs-number">1</span>, mark, x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;.&#x27;</span> || (mark &amp; (<span class="hljs-number">1</span> &lt;&lt; j))) <span class="hljs-keyword">continue</span>;<br>        ans += <span class="hljs-built_in">dfs</span>(i + <span class="hljs-number">1</span>, mark | (<span class="hljs-number">1</span> &lt;&lt; j), x - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; k, n != <span class="hljs-number">-1</span> &amp;&amp; k != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) cin &gt;&gt; a[i];<br>        cout &lt;&lt; <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, k) &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-Dungeon-Master-POJ-2251"><a href="#2-Dungeon-Master-POJ-2251" class="headerlink" title="2.Dungeon Master POJ - 2251 "></a>2.<a href="https://vjudge.csgrandeur.cn/problem/POJ-2251/origin">Dungeon Master POJ - 2251 </a></h2><p>身陷三层迷宫，可上下前后左右走，问从S到E到最小路径。从二维BFS到三维BFS到转换，代码不变。</p><p>要注意POJ使用C98，不支持C++11的特性</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">35</span>;<br><span class="hljs-type">bool</span> g[N][N][N], vis[N][N][N];<br><span class="hljs-type">int</span> n, m, l;<br><span class="hljs-type">int</span> sx, sy, sz;<br><span class="hljs-type">int</span> ex, ey, ez;<br><br><span class="hljs-type">int</span> dirs[][<span class="hljs-number">3</span>]  = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c):<span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b), <span class="hljs-built_in">z</span>(c) &#123;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    queue&lt;Node&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Node</span>(sx, sy, sz));<br>    g[sx][sy][sz] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> size = q.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i ++) &#123;<br>            Node t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (t.x == ex &amp;&amp; t.y == ey &amp;&amp; t.z == ez) <span class="hljs-keyword">return</span> res;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i ++) &#123;<br>                <span class="hljs-type">int</span> tx = t.x + dirs[i][<span class="hljs-number">0</span>], ty = t.y + dirs[i][<span class="hljs-number">1</span>], tz = t.z + dirs[i][<span class="hljs-number">2</span>];<br>                <span class="hljs-keyword">if</span> (tx &gt;= n || tx &lt; <span class="hljs-number">0</span> || ty &gt;= m || ty &lt; <span class="hljs-number">0</span> || tz &gt;= l || tz &lt; <span class="hljs-number">0</span> || !g[tx][ty][tz]) <span class="hljs-keyword">continue</span>;<br>                g[tx][ty][tz] = <span class="hljs-literal">false</span>;<br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Node</span>(tx, ty, tz));<br>            &#125;<br>        &#125;<br>        ++ res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n &gt;&gt; m &gt;&gt; l, n &amp;&amp; m &amp;&amp; l) &#123;<br>        <span class="hljs-type">char</span> ch;<br>        <span class="hljs-built_in">memset</span>(g, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> g);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; l; k ++) &#123;<br>                    cin &gt;&gt; ch;<br>                    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;S&#x27;</span>) sx = i, sy = j, sz = k;<br>                    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;E&#x27;</span>)  ex = i, ey = j, ez = k;<br>                    g[i][j][k] = ch != <span class="hljs-string">&#x27;#&#x27;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">getchar</span>();<br>        &#125;<br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">solve</span>();<br>        <span class="hljs-built_in">printf</span>(res == - <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;Trapped!\n&quot;</span> : <span class="hljs-string">&quot;Escaped in %d minute(s).\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-POJ-3278-Catch-That-Cow"><a href="#3-POJ-3278-Catch-That-Cow" class="headerlink" title="3.POJ-3278 Catch That Cow"></a>3.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3278/origin">POJ-3278</a> <a href="https://vjudge.csgrandeur.cn/problem/POJ-3278">Catch That Cow</a></h2><p>给定数字n和k，从n出发，每次可以-1、+1、*2，问变成k的最小步数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200005</span>;<br><span class="hljs-type">int</span> n, k;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-type">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= N || vis[x]) <span class="hljs-keyword">return</span>;<br>    q.<span class="hljs-built_in">push</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    q.<span class="hljs-built_in">push</span>(n);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> size = q.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i ++) &#123;<br>            <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>            vis[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (t == k) <span class="hljs-keyword">return</span> res;<br>            <span class="hljs-built_in">cal</span>(t + <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">cal</span>(t - <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">cal</span>(t * <span class="hljs-number">2</span>);<br>        &#125;<br>        ++res;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-POJ-3279-Fliptile"><a href="#4-POJ-3279-Fliptile" class="headerlink" title="4.POJ - 3279  Fliptile"></a>4.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3279/origin">POJ - 3279 </a> <a href="https://vjudge.csgrandeur.cn/problem/POJ-3279">Fliptile</a></h2><p>有N*M的格子，格子一边是黑色，一边是白色可以任意翻转，翻转一个格子会触发上下左右四个格子同时翻转。给定初始状态，求翻转为全部白色格子所需要的最小步骤，若有多个翻转方案，输出字典序最小的一个</p><p><strong>思路</strong>：二进制枚举第一列的所有翻转的方案，后续列由于受到前一列的翻转方案约束是固定的要维护前一列的颜色，可以推到而来。具体的，</p><ol><li>若前一列当前格子为黑色，则当前列当前格子需要翻转使得上一个格子可以触发翻转成白色，依次类推若最后一列无法</li><li>若前一列当前格子为白色，则当前列的格子必不能翻转，否则上列则会触发翻转成为黑色</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>, M = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">bool</span> g[N][M], turn[N][N], arr[N][N], ret[N][N];<br><span class="hljs-type">int</span> dirs[][<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">//重置翻转次数</span><br>    <span class="hljs-built_in">memset</span>(turn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> turn);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++) <br>        turn[<span class="hljs-number">1</span>][i + <span class="hljs-number">1</span>] = x &amp; (<span class="hljs-number">1</span> &lt;&lt; i);<br>    <span class="hljs-comment">//拷贝副本，用作当次计算的数组</span><br>    <span class="hljs-built_in">memset</span>(arr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) <br>            arr[i][j] = g[i][j];<br>    <span class="hljs-comment">//计算当前第一列的翻转情况是x时，推演剩下的列的翻转情况</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">1</span> &amp;&amp; arr[i - <span class="hljs-number">1</span>][j])<br>                turn[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (turn[i][j]) &#123;<br>                arr[i][j] = !arr[i][j];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k ++) &#123;<br>                    <span class="hljs-type">int</span> x = i + dirs[k][<span class="hljs-number">0</span>];<br>                    <span class="hljs-type">int</span> y = j + dirs[k][<span class="hljs-number">1</span>];<br>                    arr[x][y] = !arr[x][y];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) <br>        <span class="hljs-keyword">if</span> (arr[n][i]) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            res += turn[i][j];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copy</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            ret[i][j] = turn[i][j];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) <br>            cin &gt;&gt; g[i][j];<br><br>    <span class="hljs-type">int</span> min_res = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">// 枚举第一列的所有翻转可能</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; m); i ++) &#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">solve</span>(i);<br>        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">-1</span> &amp;&amp; res &lt; min_res) &#123;<br>            flag = <span class="hljs-number">1</span>;<br>            min_res = res;<br>            <span class="hljs-built_in">copy</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>                cout &lt;&lt; ret[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-POJ-1426"><a href="#5-POJ-1426" class="headerlink" title="5.POJ-1426"></a>5.<a href="https://vjudge.csgrandeur.cn/problem/POJ-1426/origin">POJ-1426</a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-1426">Find The Multiple</a></p><p>给点n，求任意能整整除n且只包含数字1和0的一个数</p><p>bfs所有数位上1或0的可能，直到找到任意符合条件的值</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br>ull n;<br><br><span class="hljs-function">ull <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    queue&lt;ull&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        ull t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (t % n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> t;<br>        q.<span class="hljs-built_in">push</span>(t * <span class="hljs-number">10</span>);<br>        q.<span class="hljs-built_in">push</span>(t * <span class="hljs-number">10</span> + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123; <br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n, n) &#123;<br>        cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-POJ-3126"><a href="#6-POJ-3126" class="headerlink" title="6.POJ - 3126 "></a>6.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3126/origin">POJ - 3126 </a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-3126">Prime Path</a></p><p>有n组数据，每组输出给出两个四位质数a b，每次可以将一位上的数字变换，求a变成b的最少步数（注意变换的中间值也必须是质数）。</p><p>质数打表+最短路bfs</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a, b;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10005</span>;<br><span class="hljs-type">bool</span> prime[N];  <span class="hljs-comment">// 素数表</span><br><span class="hljs-type">bool</span> vis[N];    <span class="hljs-comment">// 访问标记</span><br><span class="hljs-type">int</span> bases[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 重置访问标记</span><br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-comment">// 加入bfs起点</span><br>    q.<span class="hljs-built_in">push</span>(a);<br>    vis[a] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// bfs</span><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> len = q.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (len --) &#123;<br>            <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-comment">// 找到目标，返回路径值</span><br>            <span class="hljs-keyword">if</span> (t == b) <span class="hljs-keyword">return</span> ans;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++) &#123;<br>                <span class="hljs-type">int</span> base = bases[i];<br>                <span class="hljs-type">int</span> n1 = (t / base / <span class="hljs-number">10</span>) * base * <span class="hljs-number">10</span>;<br>                <span class="hljs-type">int</span> n2 = t % base;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ch = <span class="hljs-number">0</span>; ch &lt;= <span class="hljs-number">9</span>; ch ++) &#123;<br>                    <span class="hljs-type">int</span> n3 = ch * base;<br>                    <span class="hljs-type">int</span> num = n1 + n2 + n3;<br>                    <span class="hljs-keyword">if</span> (!prime[num] || vis[num]) <span class="hljs-keyword">continue</span>;<br>                    vis[num] = <span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">push</span>(num);<br>                &#125;<br>                <span class="hljs-comment">// cout &lt;&lt; endl;</span><br>            &#125;<br>        &#125;<br>        ++ ans;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123; <br>    <span class="hljs-comment">// 素数打表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j * j &lt;= i; j ++)<br>            <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        prime[i] = flag;<br>    &#125;<br>    <span class="hljs-comment">// 输入输出</span><br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        cout &lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-POJ-3087"><a href="#7-POJ-3087" class="headerlink" title="7.POJ-3087"></a>7.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3087/origin">POJ-3087</a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-3087"> Shuffle’m Up</a></p><p>两手扑克牌，s2第一张，s1第二张交替洗，然后对半分，问能否洗成S12的牌，可以输出次数，否则输出-1</p><p>模拟题，没看懂题，看的题解</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">105</span>;<br>string s1, s2, s;<br><span class="hljs-type">int</span> T, n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(string a, string b, <span class="hljs-type">int</span> step)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a + b == s) <span class="hljs-keyword">return</span> step;<br>    string tmp = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) tmp = tmp + b[i] + a[i];<br>    a = tmp.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, n);<br>    b = tmp.<span class="hljs-built_in">substr</span>(n, n);<br>    <span class="hljs-keyword">if</span> (a.<span class="hljs-built_in">compare</span>(s1) == <span class="hljs-number">0</span> &amp;&amp; b.<span class="hljs-built_in">compare</span>(s2) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(a, b, step + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(s1, s2, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123; <br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= T; i ++) &#123;<br>        cin &gt;&gt; n;<br>        cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, <span class="hljs-built_in">solve</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="8-POJ-3414"><a href="#8-POJ-3414" class="headerlink" title="8. POJ-3414"></a>8.<a href="https://vjudge.csgrandeur.cn/problem/POJ-3414/origin"> POJ-3414</a></h2><p><a href="https://vjudge.csgrandeur.cn/problem/POJ-3414">Pots</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vagrant指北</title>
    <link href="/2022/08/27/vagrant%E6%8C%87%E5%8C%97/"/>
    <url>/2022/08/27/vagrant%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<h2 id="Vagrant安装-amp-配置"><a href="#Vagrant安装-amp-配置" class="headerlink" title="Vagrant安装&amp;配置"></a>Vagrant安装&amp;配置</h2><ul><li><p>An error occurred while downloading the remote file. The error message, if any, is reproduced below. Please fix this error and try again</p><p><a href="https://blog.csdn.net/gongzi_9/article/details/123058281">csdn</a></p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可通过<a href="https://developer.hashicorp.com/vagrant/downloads">官网下载安装地址</a>下载安装。</p><h3 id="windows10安装"><a href="#windows10安装" class="headerlink" title="windows10安装"></a>windows10安装</h3><p>选择AMD64版本，下载得到exe文件后双击打开安装即可。</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20230319214628259.png" alt="image-20230319214628259" style="zoom: 33%;" /><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>控制台输入<code>vagrant -v</code>查看版本，可验证是否安装完成，正常输出版本如下：例如我的版本是2.3.4</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20230319215133740.png" alt="image-20230319215133740" style="zoom: 67%;" /><h2 id="配置VMware插件"><a href="#配置VMware插件" class="headerlink" title="配置VMware插件"></a>配置VMware插件</h2><h3 id="安装vagrant-vmware-desktop"><a href="#安装vagrant-vmware-desktop" class="headerlink" title="安装vagrant-vmware-desktop"></a>安装vagrant-vmware-desktop</h3><p><a href="https://developer.hashicorp.com/vagrant/docs/providers/vmware/installation">官网文档</a></p><blockquote><p>前提：安装完成vagrant后</p></blockquote><p>执行命令安装vmware插件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vagrant plugin install vagrant-vmware-desktop<br></code></pre></div></td></tr></table></figure><p>稍等几分钟后出现如下提示则安装完成</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20230319224920262.png" alt="image-20230319224920262" style="zoom:50%;" /><h3 id="安装Vagrant-VMware-Utility"><a href="#安装Vagrant-VMware-Utility" class="headerlink" title="安装Vagrant VMware Utility"></a>安装Vagrant VMware Utility</h3><p>下载页<a href="https://developer.hashicorp.com/vagrant/downloads/vmware">Install | Vagrant | HashiCorp Developer</a></p><p>windows10选择X86_64版本下载后双击安装。</p><h2 id="基础使用配置"><a href="#基础使用配置" class="headerlink" title="基础使用配置"></a>基础使用配置</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>通过简单的几个vagrant命令即可快速初始化一个虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir centos7_1<br>cd centos7_1<br>vagrant init<br>vagrant up<br></code></pre></div></td></tr></table></figure><h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD-问题集合"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD-问题集合" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD### 问题集合"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>### 问题集合</h1><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vagrant up #启动：，状态是 running<br><br>vagrant halt #停止：状态是 poweroff<br><br>vagrant suspend #暂停：状态是 saved<br><br>vagrant reload #重启：状态是 running 命令 reload 是先关闭，再开启<br><br>vagrant destroy #销毁：状态是 not created<br></code></pre></div></td></tr></table></figure><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>228ea1bf0a6fba68ec563ecd720756c6d6913775</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h4 id="vagrant-up报错：Vagrant-encountered-an-error-while-attempting-to-load-the-utility-service-key-file"><a href="#vagrant-up报错：Vagrant-encountered-an-error-while-attempting-to-load-the-utility-service-key-file" class="headerlink" title="vagrant up报错：Vagrant encountered an error while attempting to load the utility service key file."></a>vagrant up报错：Vagrant encountered an error while attempting to load the utility service key file.</h4><p>Vagrant encountered an error while attempting to load the utility<br>service key file. This error can occur if the Vagrant VMware Utility<br>has not yet been installed, or if it was installed incorrectly. If<br>this error persists after running the Vagrant VMware Utility installer<br>again, please contact support at: <a href="mailto:&#x73;&#x75;&#112;&#x70;&#x6f;&#114;&#116;&#64;&#x68;&#x61;&#115;&#x68;&#105;&#x63;&#x6f;&#x72;&#x70;&#x2e;&#x63;&#x6f;&#109;">&#x73;&#x75;&#112;&#x70;&#x6f;&#114;&#116;&#64;&#x68;&#x61;&#115;&#x68;&#105;&#x63;&#x6f;&#x72;&#x70;&#x2e;&#x63;&#x6f;&#109;</a></p><p>Information about the Vagrant VMware Utility, including installation<br>instruction, can be found here:</p><p>  <a href="https://www.vagrantup.com/docs/vmware/vagrant-vmware-utility.html">https://www.vagrantup.com/docs/vmware/vagrant-vmware-utility.html</a></p><p>  Path:  C:&#x2F;ProgramData&#x2F;hashicorp&#x2F;vagrant-vmware-desktop&#x2F;certificates&#x2F;vagrant-utility.client.crt<br>  Error: No such file or directory @ rb_sysopen - C:&#x2F;ProgramData&#x2F;hashicorp&#x2F;vagrant-vmware-desktop&#x2F;certificates&#x2F;vagrant-utility.client.crt</p><p><strong>原因：</strong></p><p>未安装Vagrant VMware Utility。</p><p><strong>解决</strong>：</p><p>参考上面安装Vagrant Vmware Utility</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p><code>vagrant up</code>启动虚拟机后，可通过</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vagrant ssh<br></code></pre></div></td></tr></table></figure><p>ssh连接虚拟机，去除了繁杂的密码密钥等，交由vagrant管理。</p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>配置<code>hostname</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">config.vm.hostname = &quot;centos01&quot;<br></code></pre></div></td></tr></table></figure><h3 id="配置ip"><a href="#配置ip" class="headerlink" title="配置ip"></a>配置ip</h3><p>由于VirtualBox默认的虚拟机策略为网络地址转换，此策略对于后续的程序安装，需要访问时，都得转换一次端口，较为麻烦。为给虚拟机分配一个独有的ip地址，可通过vagrant配置文件指定。编辑虚拟机的Vagrantfile文件，加入如下行</p><p><code>hostname: true</code>启用hostname</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">config.vm.network &quot;public_network&quot;, ip: &quot;192.168.1.10&quot;, hostname: true<br></code></pre></div></td></tr></table></figure><p>保存后，执行<code>vagrant reload</code>命令重新加载配置，通过<code>ip addr</code>命令可查看虚拟机当前ip地址</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化一个vagrant镜像</span><br>vagrant init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动vagrant镜像</span><br>vagrant up<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载配置，用于修改vagrantfile后</span><br>vagrant reload<br></code></pre></div></td></tr></table></figure><h3 id="查看端口监听"><a href="#查看端口监听" class="headerlink" title="查看端口监听"></a>查看端口监听</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo netstat -ntalp | grep 80<br></code></pre></div></td></tr></table></figure><h2 id="问题合集"><a href="#问题合集" class="headerlink" title="问题合集"></a>问题合集</h2><h3 id="1-vagrant-up-faild、在线安装慢"><a href="#1-vagrant-up-faild、在线安装慢" class="headerlink" title="1. vagrant up faild、在线安装慢"></a>1. vagrant up faild、在线安装慢</h3><p>在首次执行vagrant up时需要下载centOS镜像，由于网络问题可能会下载失败或者下载很慢。这时候可以手动把镜像下载到本地，再通过add命令加载镜像到vagrant，再使用up命令即可跳过下载步骤</p><p>镜像搜索：<a href="https://app.vagrantup.com/boxes/search">https://app.vagrantup.com/boxes/search</a></p><p>Centos&#x2F;7：<a href="https://app.vagrantup.com/centos/boxes/7">https://app.vagrantup.com/centos/boxes/7</a></p><p>下载镜像后通过命令添加到vagrant：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vagrant add 镜像名 路径<br><span class="hljs-meta prompt_">#</span><span class="language-bash">例如 vagrant box add centos/7 ./CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box</span><br></code></pre></div></td></tr></table></figure><p>此时再通过<code>vagrant up</code>命令安装启动虚拟机就不需要下载了，速度较快，推荐</p><h2 id="2-code-NS-ERROR-FAILURE-0x80004005-component-ConsoleWrap-interface-IConsole"><a href="#2-code-NS-ERROR-FAILURE-0x80004005-component-ConsoleWrap-interface-IConsole" class="headerlink" title="2.code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole"></a>2.code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">There was an error while executing `VBoxManage`, a CLI used by Vagrant<br>for controlling VirtualBox. The command and stderr is shown below.<br><br>Command: [&quot;startvm&quot;, &quot;605c2e37-9c5a-48fc-8884-26c9160bdf3d&quot;, &quot;--type&quot;, &quot;headless&quot;]<br><br>Stderr: VBoxManage: error: hv_vm_create() failed: 0xfae94001 (VERR_NEM_INIT_FAILED).<br>VBoxManage: error: Driverless mode (VERR_SUP_DRIVERLESS)<br>VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole<br></code></pre></div></td></tr></table></figure><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/202211102230280.png" alt="截屏2022-11-10 22.29.15"></p><p>原因之一：AMD好像只支持到6.1的vbox，卸载7.0安装6.1的，然后在隐私项勾选oracle，确认重启搞定。</p><h2 id="Is-the-docker-daemon-running"><a href="#Is-the-docker-daemon-running" class="headerlink" title="Is the docker daemon running?"></a>Is the docker daemon running?</h2><p>docker服务未启动，</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker</span><br>service start docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash">开机自启</span><br>sudo systemctl enable docker<br></code></pre></div></td></tr></table></figure><h3 id="3-ping-time-out"><a href="#3-ping-time-out" class="headerlink" title="3.ping time out"></a>3.ping time out</h3><p>配置了ip无法连接，检查配置的ip是否和主机处于同一网段</p>]]></content>
    
    
    
    <tags>
      
      <tag>vagrant</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OutOfMemoryErrorLab</title>
    <link href="/2022/04/23/OutOfMemoryErrorLab/"/>
    <url>/2022/04/23/OutOfMemoryErrorLab/</url>
    
    <content type="html"><![CDATA[<h3 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h3><p><code>jvm参数设置</code>：指定堆的大小，<del>避免堆太大运行时间过长</del>（运行的时间同样很长，不懂原因）测试堆内存溢出，没必要分配太大堆内存。<code>-XX:+HeapDumpOnOutOfMemoryError</code>开启HeapDumpOnOutOfMemoryError</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby">-<span class="hljs-title class_">Xmx51m</span> -<span class="hljs-title class_">Xms24m</span> -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+HeapDumpOnOutOfMemoryError</span><br></code></pre></div></td></tr></table></figure><p><code>heapOOM.java</code></p><p>new对象存储在堆区，无限new对象可使堆内存溢出，new的对象存放List内避免对象被清理。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapOOM</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOMObject</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;OOMObject&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OOMObject</span>());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><ol><li>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。</li><li>如果虚拟机的栈内存允许动态扩展，当扩展栈容量无法申请到足够的内存时，将抛出OutOfMemoryError异常。</li></ol><h4 id="1-栈深度过深"><a href="#1-栈深度过深" class="headerlink" title="1 栈深度过深"></a>1 栈深度过深</h4><p>使用-Xss参数减少栈内存容量</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-Xss1m</span><br></code></pre></div></td></tr></table></figure><p><code>class</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaVMStackSOF</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">stackLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stackLeak</span><span class="hljs-params">()</span> &#123;<br>        ++stackLength;<br>        stackLeak();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">JavaVMStackSOF</span> <span class="hljs-variable">oom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaVMStackSOF</span>();<br>        <span class="hljs-keyword">try</span>&#123;<br>            oom.stackLeak();<br>        &#125; <span class="hljs-keyword">catch</span> (StackOverflowError error) &#123;<br>            System.out.println(<span class="hljs-string">&quot;oom.stackLength = &quot;</span> + oom.stackLength);<br>            <span class="hljs-keyword">throw</span> error;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220424213613321.png" alt="image-20220424213613321"></p><h4 id="2-栈申请内存不足"><a href="#2-栈申请内存不足" class="headerlink" title="2 栈申请内存不足"></a>2 栈申请内存不足</h4><p>栈大小参数</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-Xss128k</span><br></code></pre></div></td></tr></table></figure><p><code>class</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaVMStackSOF2</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">stackLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> unused1, unused2, unused3, unused4, unused5,<br>                unused6, unused7, unused8, unused9, unused10,<br>                unused11, unused12, unused13, unused14, unused15,<br>                unused16, unused17, unused18, unused19, unused20,<br>                unused21, unused22, unused23, unused24, unused25,<br>                unused26, unused27, unused28, unused29, unused30,<br>                unused31, unused32, unused33, unused34, unused35,<br>                unused36, unused37, unused38, unused39, unused40,<br>                unused41, unused42, unused43, unused44, unused45,<br>                unused46, unused47, unused48, unused49, unused50,<br>                unused51, unused52, unused53, unused54, unused55,<br>                unused56, unused57, unused58, unused59, unused60,<br>                unused61, unused62, unused63, unused64, unused65,<br>                unused66, unused67, unused68, unused69, unused70,<br>                unused71, unused72, unused73, unused74, unused75,<br>                unused76, unused77, unused78, unused79, unused80,<br>                unused81, unused82, unused83, unused84, unused85,<br>                unused86, unused87, unused88, unused89, unused90,<br>                unused91, unused92, unused93, unused94, unused95,<br>                unused96, unused97, unused98, unused99, unused100;<br>        stackLength++;<br>        test();<br>        unused1 = unused2 = unused3 = unused4 = unused5 = unused6 =<br>            unused7 = unused8 = unused9 = unused10 =<br>            unused11 = unused12 = unused13 = unused14 = unused15 =<br>            unused16 = unused17 = unused18 = unused19 = unused20 =<br>            unused21 = unused22 = unused23 = unused24 = unused25 =<br>            unused26 = unused27 = unused28 = unused29 = unused30 =<br>            unused31 = unused32 = unused33 = unused34 = unused35 =<br>            unused36 = unused37 = unused38 = unused39 = unused40 =<br>            unused41 = unused42 = unused43 = unused44 = unused45 =<br>            unused46 = unused47 = unused48 = unused49 = unused50 =<br>            unused51 = unused52 = unused53 = unused54 = unused55 =<br>            unused56 = unused57 = unused58 = unused59 = unused60 =<br>            unused61 = unused62 = unused63 = unused64 = unused65 =<br>            unused66 = unused67 = unused68 = unused69 = unused70 =<br>            unused71 = unused72 = unused73 = unused74 = unused75 =<br>            unused76 = unused77 = unused78 = unused79 = unused80 =<br>            unused81 = unused82 = unused83 = unused84 = unused85 =<br>            unused86 = unused87 = unused88 = unused89 = unused90 =<br>            unused91 = unused92 = unused93 = unused94 = unused95 =<br>            unused96 = unused97 = unused98 = unused99 = unused100 = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test();<br>        &#125; <span class="hljs-keyword">catch</span> (Error e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;stackLength = &quot;</span> + stackLength);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jvm3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu下文件校验</title>
    <link href="/2022/04/22/ubuntu%E4%B8%8B%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/"/>
    <url>/2022/04/22/ubuntu%E4%B8%8B%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="sha256"><a href="#sha256" class="headerlink" title="sha256"></a><a href="https://help.ubuntu.com/community/HowToSHA256SUM#:~:text=SHA-256%20serves%20a%20similar%20purpose%20to%20a%20prior,of%20errors%20increase%20as%20the%20file%20becomes%20larger.">sha256</a></h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sha256sum file_path<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>sha256</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译OpenJDK12实战</title>
    <link href="/2022/04/22/%E8%87%AA%E7%BC%96%E8%AF%91JDK%E5%AE%9E%E6%88%98/"/>
    <url>/2022/04/22/%E8%87%AA%E7%BC%96%E8%AF%91JDK%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>跟着深入理解jvm3一书中实战操作，自编译JDK12</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><h4 id="直接下载zip（不推荐）"><a href="#直接下载zip（不推荐）" class="headerlink" title="直接下载zip（不推荐）"></a>直接下载zip（不推荐）</h4><p>原书从<a href="https://hg.openjdk.java.net/jdk/jdk12/">官网源码</a>下载（不推荐</p><h4 id="GItHub仓库（推荐）"><a href="#GItHub仓库（推荐）" class="headerlink" title="GItHub仓库（推荐）"></a>GItHub仓库（推荐）</h4><p><del>推荐直接GitHub拉（最近clone的速度快了挺多），大概两三分钟就clone完毕。</del>直接clone到的是JDK最新版本，详解看 <a href="./#%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91">进行编译</a> 第2步。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://github.com/openjdk/jdk<br></code></pre></div></td></tr></table></figure><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>我用的和书中一样的ubuntu18，我的是<code>Ubuntu 18.04.6 LTS x86_64</code></p><h3 id="构建编译环境"><a href="#构建编译环境" class="headerlink" title="构建编译环境"></a>构建编译环境</h3><ol><li><p>依赖</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt-get install build-essential<br></code></pre></div></td></tr></table></figure></li><li><p>安装OpenJDK 11。要编译大版本为N的JDK，要另外准备一个大版本号至少为N-1的、已编译好的JDK。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt-get install openjdk-11-jdk<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h3><ol><li><p>获取编译参数帮助</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">bash configure --help<br></code></pre></div></td></tr></table></figure><p>我这里因为没有安装<code>autoconf</code>会报一个错误<code>Error: Cannot find autoconf</code>，遂安装后再执行获取<code>help</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt-get install autoconf<br></code></pre></div></td></tr></table></figure></li><li><p>配置</p><p>编译FastDebug版、仅含Server模式的HotSpot虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">bash configure --enable-debug --with-jvm-variants=server<br></code></pre></div></td></tr></table></figure><p>在我的ubuntu环境执行配置命令，接收到以下错误</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">configure: (Your Boot JDK version must be one of: 18 19)<br>configure: Could not find a valid Boot JDK. OpenJDK distributions are available at http://jdk.java.net/.<br>configure: This might be fixed by explicitly setting --with-boot-jdk<br>configure: error: Cannot continue<br>configure exiting with result code 1<br></code></pre></div></td></tr></table></figure><p>很明显的提示了前置的JDK版本不对，因为之前安装的是JDK11，要求18或19。由于我直接从GitHub上拉的最新仓库的源码版本为JDK19的，所以需要替换为JDK12的版本。从仓库的Tags找到JDK12的源码，下载解压后，进入该解压目录从新执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">bash configure --enable-debug --with-jvm-variants=server<br></code></pre></div></td></tr></table></figure><p>缺少一些依赖库，报错，按照提示一个个安装，再重新跑一次配置命令即可</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: error: Could not find all X11 headers (shape.h Xrender.h Xrander.h XTest.h Intrinsic.h). You might be able to fix this by running <span class="hljs-string">&#x27;sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev&#x27;</span>.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure exiting with result code 1</span><br>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: error: Could not find fontconfig! You might be able to fix this by running <span class="hljs-string">&#x27;sudo apt-get install libfontconfig1-dev&#x27;</span>.</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure exiting with result code 1</span><br>sudo apt-get install libfontconfig1-dev<br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure: error: Could not find alsa! You might be able to fix this by running <span class="hljs-string">&#x27;sudo apt-get install libasound2-dev&#x27;</span>.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">configure exiting with result code 1</span><br>sudo apt-get install libasound2-dev<br></code></pre></div></td></tr></table></figure><p>输出成功后输出：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">====================================================<br>A new configuration has been successfully created in<br>/home/k/Downloads/jdk-jdk-12-27/build/linux-x86_64-server-fastdebug<br>using configure arguments &#x27;--enable-debug --with-jvm-variants=server&#x27;.<br><br>Configuration summary:<br>* Debug level:    fastdebug<br>* HS debug level: fastdebug<br>* JVM variants:   server<br>* JVM features:   server: &#x27;aot cds cmsgc compiler1 compiler2 epsilongc g1gc graal jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc&#x27; <br>* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64<br>* Version string: 12-internal+0-adhoc.k.jdk-jdk-12-27 (12-internal)<br><br>Tools summary:<br>* Boot JDK:       openjdk version &quot;11.0.14.1&quot; 2022-02-08 OpenJDK Runtime Environment (build 11.0.14.1+1-Ubuntu-0ubuntu1.18.04) OpenJDK 64-Bit Server VM (build 11.0.14.1+1-Ubuntu-0ubuntu1.18.04, mixed mode, sharing)  (at /usr/lib/jvm/java-11-openjdk-amd64)<br>* Toolchain:      gcc (GNU Compiler Collection)<br>* C Compiler:     Version 7.5.0 (at /usr/bin/gcc)<br>* C++ Compiler:   Version 7.5.0 (at /usr/bin/g++)<br><br>Build performance summary:<br>* Cores to use:   3<br>* Memory limit:   3919 MB<br></code></pre></div></td></tr></table></figure><blockquote><p>在configure命令以及后面的make命令的执行过程中，会在“build&#x2F;配置名称”目录下产生如下目录结<br>构。不常使用C&#x2F;C++的读者要特别注意，如果多次编译，或者目录结构成功产生后又再次修改了配<br>置，必须先使用“make clean”和“make dist-clean”命令清理目录，才能确保新的配置生效。编译产生的目<br>录结构以及用途如下所示：</p></blockquote></li><li><p>make images</p><p>前排提示，执行该命令之前分配多点内存和核心数（虚拟机下的话）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">make images<br></code></pre></div></td></tr></table></figure><p>等待…</p><p>出错：内存不足(分配了4G)，由于是虚拟机，swap的空间也挺小1.4G。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000ae800000, 547356672, 0) failed; error=&#x27;Not enough space&#x27; (errno=12)<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># There is insufficient memory for the Java Runtime Environment to continue.</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Native memory allocation (mmap) failed to map 547356672 bytes <span class="hljs-keyword">for</span> committing reserved memory.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">An error report file with more information is saved as:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/home/k/Downloads/jdk-jdk-12-27/make/gensrc/hs_err_pid76398.<span class="hljs-built_in">log</span></span><br><br></code></pre></div></td></tr></table></figure><p>可以使用命令查看内存和swap大小</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">free -m<br></code></pre></div></td></tr></table></figure><p>我给虚拟机分配了8G内存，重新编译得出如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Stopping sjavac server<br>Finished building target &#x27;images&#x27; in configuration &#x27;linux-x86_64-server-fastdebug&#x27;<br></code></pre></div></td></tr></table></figure><p>进入提示的路径<code>./build/linux-x86_64-server-fastdebug/jdk/bin</code>，执行version命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./java -version<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">openjdk version &quot;12-internal&quot; 2019-03-19<br>OpenJDK Runtime Environment (fastdebug build 12-internal+0-adhoc.k.jdk-jdk-12-27)<br>OpenJDK 64-Bit Server VM (fastdebug build 12-internal+0-adhoc.k.jdk-jdk-12-27, mixed mode)<br></code></pre></div></td></tr></table></figure><p>编译完成。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>jvm3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora配置PicGo使用阿里OSS图床</title>
    <link href="/2022/03/27/Typora%E9%85%8D%E7%BD%AEPicGo%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8COSS%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/03/27/Typora%E9%85%8D%E7%BD%AEPicGo%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8COSS%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<p>q</p><p><strong>前言</strong>：之前使用Gitee搭建的Typora图床，25号博客的照片无法访问，查看gitee仓库发现：因外链封禁仓库。免费终归不是长久之道。解封仓库后拉到本地，遂决定使用其他图床。斟酌二三，选择阿里OSS对象存储服务。</p><h1 id="OSS购买与相关配置"><a href="#OSS购买与相关配置" class="headerlink" title="OSS购买与相关配置"></a>OSS购买与相关配置</h1><h2 id="购买OSS"><a href="#购买OSS" class="headerlink" title="购买OSS"></a>购买OSS</h2><ol><li><p>登录阿里云<a href="https://oss.console.aliyun.com/overview">OSS控制台</a>（如果你是第一次使用，需要同意协议）</p></li><li><p>单击左侧资源包管理</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328023248317.png" alt="image-20220328023248317" style="zoom:50%;" /></li><li><p>点击购买资源包</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328023337134.png" alt="image-20220328023337134" style="zoom:50%;" /></li><li><p>进入购买页，选择你要购买的套餐。这里我选择最小的40G，用来存放图床的照片绰绰有余。年选一年，现在搞活动低不到一块</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328023428347.png" alt="image-20220328023428347" style="zoom:80%;" /></li></ol><h2 id="配置Bucket"><a href="#配置Bucket" class="headerlink" title="配置Bucket"></a>配置Bucket</h2><ol><li><p><strong>创建Bucket</strong>：</p><p>返回OSS管理主页，单击右侧进入Bucket列表，单击创建Bucket</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328024321791.png" alt="image-20220328024321791"></p><p>在创建Bucket选项中：</p><ul><li>填写<strong>Bucket名称</strong></li><li>可以选择修改<strong>地域</strong>（我离广州较近，所以选择广州）</li><li><strong>读写权限</strong>必须选择<strong>公共读</strong>（这个关系到别人能否访问你的图片，毕竟你是放到博客上，所以是开发给别人查看）</li><li>其他选项默认即可</li></ul><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328024800282.png" alt="image-20220328024800282"></p></li></ol><h2 id="配置子用户AccessKey"><a href="#配置子用户AccessKey" class="headerlink" title="配置子用户AccessKey"></a>配置子用户AccessKey</h2><ol><li><p><strong>新增子用户AccessKey</strong></p><p>AccessKey相等于子账户，给它OSS权限，用来读写OSS</p><ul><li><p>鼠标停留右上角个人头像，出现面板。单击AccessKey管理</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328025215178.png" alt="image-20220328025215178" style="zoom:50%;" /></li><li><p>跳转页安全提示，选择开始使用子用户AccessKey</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328025825379.png" alt="image-20220328025825379"></p></li><li><p>跳转页选择创建用户</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328025919359.png" alt="image-20220328025919359"></p></li><li><p>创建用户页，填写登录名称、显示名称，勾选OpenAPI访问，最后单击确定。（可能确定后会跳安全验证，验证即可）</p><p><strong>重点</strong>：若开通 Open API 调用访问，请<strong>及时保存 AccessKey 信息</strong>，页面关闭后将无法再次获取信息。可以选择下载CSV文件，这样不怕忘记。</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030055310.png" alt="image-20220328030055310"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030335990.png" alt="image-20220328030335990"></p></li><li><p>添加子用户OSS权限（新建的用户默认是没有权限的，这里添加OSS权限使得可以读写OSS对象存储）</p><p>勾选子用户，单击添加权限</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030516355.png" alt="image-20220328030516355"></p><p>选择OSS权限，其他默认即可，单击确定。单击完成</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328030634815.png" alt="image-20220328030634815"></p></li></ul></li></ol><h1 id="PicGo配置阿里OSS仓库"><a href="#PicGo配置阿里OSS仓库" class="headerlink" title="PicGo配置阿里OSS仓库"></a>PicGo配置阿里OSS仓库</h1><ol><li><p>展开图床设置列表，单击阿里云OSS</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328032037941.png" alt="image-20220328032037941"></p></li><li><p>配置阿里云OSS插件</p><ul><li>KeyId：必填，填入刚刚保存的AccessKey ID</li><li>KeySecret：必填，填入刚刚保存的AccessKey Secret</li><li>存储空间名：必填，即创建的Bucket名，不记得可以进Bucket的概览页复制（如下图）</li><li>存储区域：必填，即创建的Bucket地域，不记得可以进Bucket的概览页复制（如下图）</li><li>指定存储路径：按需填写</li></ul><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328033046731.png" alt="image-20220328033046731"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220328035047677.png" alt="image-20220328035047677"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>PicGo</tag>
      
      <tag>OSS</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK之HashMap源码剖析</title>
    <link href="/2022/03/25/JDK%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <url>/2022/03/25/JDK%E4%B9%8BHashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>基于<code>java version &quot;1.8.0_321&quot;</code></p><h1 id="类继承关系"><a href="#类继承关系" class="headerlink" title="类继承关系"></a>类继承关系</h1><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>HashMap继承自抽象类AbstractMap，并实现了Map、Cloneable、Serializable。</p><h2 id="AbstractMap"><a href="#AbstractMap" class="headerlink" title="AbstractMap"></a>AbstractMap</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt; &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>抽象类AbstractMap实现了Map</p><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Set&lt;Entry&lt;K,V&gt;&gt; <span class="hljs-title function_">entrySet</span><span class="hljs-params">()</span>;<br></code></pre></div></td></tr></table></figure><p>整个抽象类唯一的一个抽象方法，获取Map集合。又由子类实现逻辑。 </p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="DEFAULT-INITIAL-CAPACITY"><a href="#DEFAULT-INITIAL-CAPACITY" class="headerlink" title="DEFAULT_INITIAL_CAPACITY"></a>DEFAULT_INITIAL_CAPACITY</h2><p>默认初始化容量，必须是2的幂。final修饰，不可被子类修改。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br></code></pre></div></td></tr></table></figure><h2 id="MAXIMUM-CAPACITY"><a href="#MAXIMUM-CAPACITY" class="headerlink" title="MAXIMUM_CAPACITY"></a>MAXIMUM_CAPACITY</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br></code></pre></div></td></tr></table></figure><p>最大容量，必须是2的幂，&lt;&#x3D; (1&lt;&lt;30)介于两者之间。</p><h2 id="DEFAULT-LOAD-FACTOR"><a href="#DEFAULT-LOAD-FACTOR" class="headerlink" title="DEFAULT_LOAD_FACTOR"></a>DEFAULT_LOAD_FACTOR</h2><p>负载系数，初始化未指定时为0.75</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br></code></pre></div></td></tr></table></figure><h2 id="TREEIFY-THRESHOLD"><a href="#TREEIFY-THRESHOLD" class="headerlink" title="TREEIFY_THRESHOLD"></a>TREEIFY_THRESHOLD</h2><p>从列表转化为树实现的阈值：当至少有这么多个节点有元素时，容器将转化为树。</p><p>至少为8，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br></code></pre></div></td></tr></table></figure><h2 id="UNTREEIFY-THRESHOLD"><a href="#UNTREEIFY-THRESHOLD" class="headerlink" title="UNTREEIFY_THRESHOLD"></a>UNTREEIFY_THRESHOLD</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UNTREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></div></td></tr></table></figure><h2 id="MIN-TREEIFY-CAPACITY"><a href="#MIN-TREEIFY-CAPACITY" class="headerlink" title="MIN_TREEIFY_CAPACITY"></a>MIN_TREEIFY_CAPACITY</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TREEIFY_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;<br></code></pre></div></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="hash"><a href="#hash" class="headerlink" title="hash()"></a>hash()</h2><p>获取key的hash</p><ul><li>当key为空时，返回0.</li><li>key不为null，返回key.hashCode() ^（key.hashCode() &gt;&gt;&gt;16)的异或值</li></ul><p><code>&gt;&gt;&gt;</code>：逻辑右移</p><p><code>&gt;&gt;</code>：算数右移</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h2><p>put()只是调用putVal()来实现。主要的逻辑和处理在putVal()。</p><p><strong>代码和注释</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);  <span class="hljs-comment">//调用putVal()</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="putVal"><a href="#putVal" class="headerlink" title="putVal()"></a>putVal()</h2><ol><li><p>根据key计hash值：<code>(h=key.hashCode()) ^ (h &gt;&gt;&gt; 16) </code></p></li><li><p>判断是否调整容量，当table为空时调用<code>resize()</code></p></li><li><p>计算下标i（<code>i = (n - 1) &amp; hash</code>），判断小标i处是否存在Node节点</p><ul><li>不存在：当前hash映射的下标的容器为空，则直接new一个对象放在当前容器</li><li>存在：<ul><li>若当前节点的key和要put的key相等，把当前e&#x3D;节点</li><li>若当前容器转化成红黑树：调用putTreeVal()，若key存在则返回对应的对象，key不存在则新增节点返回null</li><li>当前容器是链表：否则遍历当前桶链表，如果存在key，退出；不存在key，新增node&lt;key,value&gt;到链表末尾</li></ul></li></ul></li><li><p>经过第2步操作后，判断e的值若不为空，更新e的value为value参数值，返回oldeValue。否则执行第五步</p></li><li><p>修改标志++modCount，size加一。若size超过要需调整容量大小时，触发resize()函数，调整容量。</p></li><li><p>putVal()结束，返回null</p></li></ol><p><strong>代码和注释</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent, <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab;    <span class="hljs-comment">//容器列表</span><br>    Node&lt;K,V&gt; p;    <span class="hljs-comment">//key映射的下标下的节点</span><br>    <span class="hljs-type">int</span> n, i;   <span class="hljs-comment">//调整后的容量n， i：映射的下标</span><br>    <span class="hljs-comment">//判断是否调整容量</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">//判断(n - 1) &amp; hash下是否已有节点，存在冲突</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);   <span class="hljs-comment">//不存在冲突的话直接存这个位置上</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e;    <span class="hljs-comment">//i下标处的头节点</span><br>        K k;   <span class="hljs-comment">//头节点的key</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))   <span class="hljs-comment">//判断已有元素和当前key是否相同</span><br>            e = p;  <span class="hljs-comment">//是同一个的话，就相当于更新值</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">//当前桶转化成红黑树树的话，就调用putTreeVal()</span><br>            <span class="hljs-comment">//instanceof：Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false。</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//遍历当前桶链表，添加当前key,value到末尾</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//到链表末尾</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>); <span class="hljs-comment">//新增一个节点到末尾</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))   <span class="hljs-comment">//桶中存在元素</span><br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>) e.value = value;<br>            afterNodeAccess(e); <span class="hljs-comment">//保留函数，方便子类继承实现</span><br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount; <span class="hljs-comment">//修改标记</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold) <span class="hljs-comment">//是否需要调整容量</span><br>        resize();<br>    afterNodeInsertion(evict);  <span class="hljs-comment">//保留函数，方便子类继承实现</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="putTreeVal"><a href="#putTreeVal" class="headerlink" title="putTreeVal()"></a>putTreeVal()</h2><p>当桶转换成红黑树时，会执行tree版本的putVal()即putTreeVal()。</p><h2 id="get-Object-key"><a href="#get-Object-key" class="headerlink" title="get(Object key)"></a>get(Object key)</h2><p>根据key获取V，如果根据getNode(key)获取Node，如果为null返回null。存在的话返回Node.value。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : e.value;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="getNode-int-hash-Object-key"><a href="#getNode-int-hash-Object-key" class="headerlink" title="getNode(int hash, Object key)"></a>getNode(int hash, Object key)</h2><p>根据hash和key获取Node。</p><ol><li>如果哈希表和桶不为空，则遍历桶。为空则返回nullli><li>遍历桶：如果桶转换成红黑树，return getTreeNode(hash, key)的返回值；如果桶中是链表则遍历链表。找得到就返回，找不到返回null</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-type">int</span> n; K k;<br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp; (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//哈希表不为空、且下标的桶不为空则匹配</span><br>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node    //检测头节点</span><br>            ((k = first.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">return</span> first;<br>        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//遍历桶</span><br>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);   <span class="hljs-comment">//如果当前桶是红黑树</span><br>            <span class="hljs-keyword">do</span> &#123;   <span class="hljs-comment">//遍历链接</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">return</span> e;<br>            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Java</tag>
      
      <tag>源码计划</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch个人指南</title>
    <link href="/2022/03/23/Arch%E4%B8%AA%E4%BA%BA%E6%8C%87%E5%8D%97/"/>
    <url>/2022/03/23/Arch%E4%B8%AA%E4%BA%BA%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>将一些操作记录下来，方便翻阅</p><h1 id="安装Arch"><a href="#安装Arch" class="headerlink" title="安装Arch"></a>安装Arch</h1><h2 id="源"><a href="#源" class="headerlink" title="源"></a>源</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman-mirrors -i -c China -m rank<br></code></pre></div></td></tr></table></figure><ol><li>下载ISO文件</li><li>U盘制作Ventoy启动盘</li><li>复制ISO文件到Ventoy盘</li><li>重启进入Ventoy</li></ol><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl enable dhcpcd.service #动态ip分配跟随系统启动<br></code></pre></div></td></tr></table></figure><h2 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">grub-mkconfig -o /boot/grub/grub.cfg #生成配置文件<br></code></pre></div></td></tr></table></figure><p>如果要扫描win10，需要安装<code>os-xx</code> 并在grub配置文件里取消注释</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacamn -S sudo<br></code></pre></div></td></tr></table></figure><p>字体</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S noto-fonts-cjk<br></code></pre></div></td></tr></table></figure><p>firefox字体</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S firefox-i18n-zh-cn<br></code></pre></div></td></tr></table></figure><h1 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h1><h2 id="KDE"><a href="#KDE" class="headerlink" title="KDE"></a>KDE</h2><h3 id="美化-macOS-like"><a href="#美化-macOS-like" class="headerlink" title="美化-macOS like"></a>美化-macOS like</h3><ol><li><p>docker栏</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S latte-dock<br></code></pre></div></td></tr></table></figure><p>latte-dock安装后，默认设置了开机自启。若自启不成功，应检查应用设置。</p></li><li></li></ol><h2 id="dwm（窗口管理器）"><a href="#dwm（窗口管理器）" class="headerlink" title="dwm（窗口管理器）"></a>dwm（窗口管理器）</h2><p>fcitx5输入法</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://dwm.suckless.org/patches/autostart/dwm-autostart-20210120-cb3f58a.diff<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">feh --bg-scale ~/Pictures/wallpaper/6617242.jpg<br></code></pre></div></td></tr></table></figure><h1 id="AUR"><a href="#AUR" class="headerlink" title="AUR"></a>AUR</h1><h2 id="安装yay"><a href="#安装yay" class="headerlink" title="安装yay"></a>安装yay</h2><h3 id="添加cn源"><a href="#添加cn源" class="headerlink" title="添加cn源"></a>添加cn源</h3><p>编辑<code>/etc/pacman.conf</code>，尾添加cn源</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[archlinuxcn]</span>          <br><span class="hljs-attr">Server</span> = https://repo.archlinuxcn.org/<span class="hljs-variable">$arch</span><br></code></pre></div></td></tr></table></figure><p>刷新缓存，并安装 <code>archlinuxcn-keyring</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -Sy<br>sudo pacman -S archlinuxcn-keyring<br></code></pre></div></td></tr></table></figure><h3 id="安装yay-1"><a href="#安装yay-1" class="headerlink" title="安装yay"></a>安装yay</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S yay<br></code></pre></div></td></tr></table></figure><h2 id="自编译安装软件包"><a href="#自编译安装软件包" class="headerlink" title="自编译安装软件包"></a>自编译安装软件包</h2><p>以安装yay为例，执行安装的命令如下：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">git clone https://aur.archlinux.org/yay.git<br>cd yay<br>makepkg -si<br></code></pre></div></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S 包名#安装在线包<br>yay -U 软件包路径#安装本地软件包<br></code></pre></div></td></tr></table></figure><h2 id="更新-x2F-升级-AUR-软件"><a href="#更新-x2F-升级-AUR-软件" class="headerlink" title="更新&#x2F;升级 AUR 软件"></a>更新&#x2F;升级 AUR 软件</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -Syy  #更新 AUR 软件包数据库<br>yay -Syyu #更新 AUR 软件包数据库并升级所有已安装的软件包,-u表示upgrade（升级<br></code></pre></div></td></tr></table></figure><h2 id="卸载-AUR-软件"><a href="#卸载-AUR-软件" class="headerlink" title="卸载 AUR 软件"></a>卸载 AUR 软件</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -Ss 关键词 #搜索在线 AUR 软件包<br><br>yay -Qs 关键词 #模糊匹配，搜索本地 AUR 软件包<br>yay -Q 包名 #精确匹配，搜索本地 AUR 软件包<br></code></pre></div></td></tr></table></figure><h2 id="清理无用软件包与缓存"><a href="#清理无用软件包与缓存" class="headerlink" title="清理无用软件包与缓存"></a>清理无用软件包与缓存</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -Scc #清理安装包缓存<br>yay -Rscnu $(yay -Qdtq) #清理孤立软件包<br></code></pre></div></td></tr></table></figure><h1 id="日用环境配置"><a href="#日用环境配置" class="headerlink" title="日用环境配置"></a>日用环境配置</h1><h2 id="makepkg-并行编译"><a href="#makepkg-并行编译" class="headerlink" title="makepkg - 并行编译"></a>makepkg - 并行编译</h2><p>编辑 <code>/etc/makepkg.conf</code> 修改 <code>MAKEFLAGS=&quot;-j8&quot;</code> ，编译的时候将使用 8 个核，速度更快。</p><h2 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h2><h3 id="polybar"><a href="#polybar" class="headerlink" title="polybar"></a>polybar</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S polybar<br></code></pre></div></td></tr></table></figure><h2 id="fcitx5输入法"><a href="#fcitx5输入法" class="headerlink" title="fcitx5输入法"></a>fcitx5输入法</h2><p><a href="https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">wiki</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -Rs $(pacman -Qsq fcitx)<br>sudo pacman -S fcitx5-qt fcitx5-gtk fcitx5-chinese-addons fcitx5-git   fcitx5-pinyin-zhwiki kcm-fcitx5<br></code></pre></div></td></tr></table></figure><ul><li>fcitx5: 输入法基础框架主程序 </li><li>fcitx5-chinese-addons: 简体中文输入的支持，云拼音 </li><li>fcitx5-gtk: GTK程序的支持 </li><li>citx5-qt: QT5程序的支持 </li><li>fcitx5-pinyin-zhwiki: 肥猫制作的维基百万词库，没有版权风险, 放心使用</li><li>kcm-fcitx5: KDE桌面环境的支持</li></ul><p>编辑vim &#x2F;etc&#x2F;environment文件，末尾添加如下参数：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>SDL_IM_MODULE=fcitx<br>GLFW_IM_MODULE=ibus<br></code></pre></div></td></tr></table></figure><p>将下面的内容粘贴到<code>~/.pam_environment</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">GTK_IM_MODULE DEFAULT=fcitx<br>QT_IM_MODULE  DEFAULT=fcitx<br>XMODIFIERS    DEFAULT=@im=fcitx<br></code></pre></div></td></tr></table></figure><p>将下面的内容粘贴到 <code>~/.xprofile</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fcitx5 &amp;<br></code></pre></div></td></tr></table></figure><p>如果dwm环境的话需要打补丁，具体操作看wiki</p><p>注销重新登录。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="ttf-ms-win10"><a href="#ttf-ms-win10" class="headerlink" title="ttf-ms-win10"></a>ttf-ms-win10</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S ttf-ms-win10<br></code></pre></div></td></tr></table></figure><h2 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h2><p><a href="https://wiki.archlinux.org/title/%E5%AE%89%E8%A3%85">安装</a> 软件包 <a href="https://archlinux.org/packages/?name=xf86-input-synaptics">xf86-input-synaptics</a>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S xf86-input-synaptics<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将默认配置文件复制，用以生效</span><br>sudo cp /usr/share/X11/xorg.conf.d/70-synaptics.conf /etc/X11/xorg.conf.d/<br></code></pre></div></td></tr></table></figure><p>配置</p><h2 id="配置时钟同步"><a href="#配置时钟同步" class="headerlink" title="配置时钟同步"></a>配置时钟同步</h2><h3 id="读取硬件时钟"><a href="#读取硬件时钟" class="headerlink" title="读取硬件时钟"></a>读取硬件时钟</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo hwclock --show<br></code></pre></div></td></tr></table></figure><p>要将硬件时钟时间标准更改为本地时间，请使用：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo timedatectl set-local-rtc 1<br></code></pre></div></td></tr></table></figure><p>要恢复为 UTC 格式的硬件时钟，请键入：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo timedatectl set-local-rtc 0<br></code></pre></div></td></tr></table></figure><h3 id="Microsoft-Windows-中的-UTC"><a href="#Microsoft-Windows-中的-UTC" class="headerlink" title="Microsoft Windows 中的 UTC"></a>Microsoft Windows 中的 UTC</h3><p>建议将 Windows 配置为使用 UTC，而不是将 Linux 配置为使用本地时间。</p><p>建议将 Windows 配置为使用 UTC，而不是将 Linux 配置为使用本地时间。（Windows 默认使用本地时间）</p><p>它可以通过一个简单的注册表修复来完成：打开<code>regedit</code>并添加一个<code>DWORD</code>十六进制值<code>1</code>到注册表：</p><figure class="highlight moonscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\RealTimeIsUniversal<br></code></pre></div></td></tr></table></figure><p>您可以从运行的管理员命令提示符执行此操作：</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation&quot;</span> /v RealTimeIsUniversal /d 1 /t REG_DWORD /f</span><br></code></pre></div></td></tr></table></figure><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S netease-cloud-music-gtk4<br></code></pre></div></td></tr></table></figure><h3 id="spotify"><a href="#spotify" class="headerlink" title="spotify"></a><a href="https://aur.archlinux.org/packages/spotify">spotify</a></h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S spotify<br></code></pre></div></td></tr></table></figure><p>缩放问题：<code>ctrl</code> + <code>+</code>&#x2F;<code>-</code></p><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><p><a href="https://wiki.archlinux.org/title/Bluetooth_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Bluetooth-wiki</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol<br>systemctl tart/enable bluetooth.service<br></code></pre></div></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a><strong>开机启动</strong></h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo systemctl enable bluetooth<br></code></pre></div></td></tr></table></figure><p>开机后自动启动，将 <code>AutoEnable=true</code> 添加在 <code>/etc/bluetooth/main.conf</code> 底部的 <code>[Policy]</code> 下面：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo vim /etc/bluetooth/main.conf<br><br>[Policy]<br>AutoEnable=true<br></code></pre></div></td></tr></table></figure><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a><strong>音频</strong></h3><p>要使用蓝牙耳机或音响的话要先安装 <code>pulseaudio-bluetooth</code>。有时要用 <code>pavucontrol</code> 选择音频的输出设备。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S pulseaudio-bluetooth pavucontrol <br></code></pre></div></td></tr></table></figure><h3 id="切换双系统蓝牙需重新匹配问题"><a href="#切换双系统蓝牙需重新匹配问题" class="headerlink" title="切换双系统蓝牙需重新匹配问题"></a>切换双系统蓝牙需重新匹配问题</h3><p><a href="https://wiki.archlinux.org/title/Bluetooth_mouse_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">wiki</a></p><p>原因每次蓝牙连接，对每个网卡生成唯一密钥，切换系统后，密钥不同，验证不通过。</p><p>[解决办法arch 配对设备。重启到windows，将所有蓝牙连接删除，重新配对你要设置的蓝牙。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S chntpw<br></code></pre></div></td></tr></table></figure><ol start="2"><li>重启到arch下安装chntpw</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S chntpw<br></code></pre></div></td></tr></table></figure><ol start="3"><li>挂载windows到&#x2F;mnt&#x2F;win11下<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo fdisk -l #查看分区<br><span class="hljs-meta prompt_">#</span><span class="language-bash">加如我的windows的分区是/dev/nvme0n1p3,则挂载</span><br>sudo mount /dev/nvme0n1p3 /mnt/win11 #修改为你自己的分区<br></code></pre></div></td></tr></table></figure></li><li>获取windows下的蓝牙mac</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /mnt/win11/Windows/System32/config#进入挂载的windows分区的config路径<br>chntpw -e SYSTEM#使用chntpw运行SYSTEM<br>cd  ControlSet001\Services\BTHPORT\Parameters\Keys#进入路径，我的是windwos11，路径是ControlSet001，你的不是的话可以ls打印一下，看看是否是CurrentControlSet<br>ls#打印路径下<br></code></pre></div></td></tr></table></figure><p>看到如下</p><p>Node has 0 subkeys and 1 values<br>  size     type            value name             [value if type DWORD]<br>    16  REG_BINARY        &lt;001f20eb4c9a&gt;</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hex 001f20eb4c9a #选择该变量的以hex进制打印<br><span class="hljs-meta prompt_">#</span><span class="language-bash">看到如下一串：</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">:00000  6F 91 2E 58 23 F3 43 E3 DD E3 90 E5 D2 8A D8 78 o..X<span class="hljs-comment">#.C........x</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将它掐头去尾，中间去掉空格，只保留16进制数。得到如下</span><br>6F912E5823F343E3DDE390E5D28AD878<br></code></pre></div></td></tr></table></figure><ol start="5"><li>将得到的密钥，修改到arch中对应的蓝牙设备的info中的Key为获取到的密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su<br>cd /var/lib/bluetooth/你的蓝牙mac地址 #你的蓝牙设备mac地址自己获取，设置里也有<br>ls #查看一下有哪些<br><span class="hljs-meta prompt_">#</span><span class="language-bash">我的目录下是74:A3:4A:EC:8A:9A  cache  settings</span><br>cd d 74\:A3\:4A\:EC\:8A\:9A/ #\:转义，进入我要配置的蓝牙设备<br>vim info #编辑信息文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将这段中的Key修改为刚刚获取到的密钥。</span><br>[LinkKey]<br>Key=6F912E5823F343E3DDE390E5D28AD878<br>Type=4<br>PINLength=0<br><br></code></pre></div></td></tr></table></figure><ol start="6"><li>重启蓝牙服务，尝试连接蓝牙，成功。</li></ol><h2 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h2><h3 id="迅雷"><a href="#迅雷" class="headerlink" title="迅雷"></a>迅雷</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S xunlei-bin <br></code></pre></div></td></tr></table></figure><h3 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S  baidunetdisk-electron <br></code></pre></div></td></tr></table></figure><h3 id="Motrix"><a href="#Motrix" class="headerlink" title="Motrix"></a>Motrix</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S motrix<br></code></pre></div></td></tr></table></figure><h2 id="v2raya"><a href="#v2raya" class="headerlink" title="v2raya"></a>v2raya</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S v2ray v2raya<br></code></pre></div></td></tr></table></figure><h3 id="规则列表"><a href="#规则列表" class="headerlink" title="规则列表"></a>规则列表</h3><p>SwitchyOmega 扩展里新建 switch profile 模式（适用于Firefox 57+和Chrome）<br>规则列表地址填入 <a href="https://git.io/gfw-list">https://git.io/gfw-list</a> 或 <a href="https://raw.githubusercontent.com/aglent/autoproxy/master/gfwlist.pac">https://raw.githubusercontent.com/aglent/autoproxy/master/gfwlist.pac</a></p><h1 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h1><h2 id="IDEA-VS-Code"><a href="#IDEA-VS-Code" class="headerlink" title="IDEA VS Code"></a>IDEA VS Code</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S  intellij-idea-ultimate-edition visual-studio-code-bin<br></code></pre></div></td></tr></table></figure><h2 id="JDK11"><a href="#JDK11" class="headerlink" title="JDK11"></a>JDK11</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S jdk11-oepnjdk<br></code></pre></div></td></tr></table></figure><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>注意<code>arch</code>下<code>npm</code>包管理需要单独安装</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S nodejs npm<br></code></pre></div></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ol><li><p>检查<code>node.js</code>环境</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></div></td></tr></table></figure></li><li><p>安装<code>cnpm</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></div></td></tr></table></figure></li><li><p>安装hexo(全局)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo cnpm install -g hexo-cli<br></code></pre></div></td></tr></table></figure></li><li><p>检查hexo是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SHELL">hexo -v<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h2><h3 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h3><p><a href="https://wiki.archlinux.org/title/VMware_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85">VMware-wiki</a></p><p>安装依赖项</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S fuse2 gtkmm linux-headers  libcanberra <br>yay -S gksu ncurses5-compat-libs<br></code></pre></div></td></tr></table></figure><p>下载最新的 <a href="https://www.vmware.com/go/tryworkstation">VMware Workstation Pro</a> 或<a href="https://www.vmware.com/go/downloadplayer">Player</a> (或者<a href="https://communities.vmware.com/community/vmtn/beta">beta</a>版，如果有的话)。</p><p>开始安装：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"># sh VMware-edition-<span class="hljs-keyword">version</span>.<span class="hljs-keyword">release</span>.architecture.bundle<br></code></pre></div></td></tr></table></figure><h3 id="AUR-1"><a href="#AUR-1" class="headerlink" title="AUR"></a>AUR</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S vmware-workstation<br></code></pre></div></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>进入maven<a href="https://maven.apache.org/download.cgi">下载页</a>，复制下载链接</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载二进制文件</span><br>curl -O https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压</span><br>tar -zxvf apache-maven-3.8.6-bin.tar.gz <br><br></code></pre></div></td></tr></table></figure><h3 id="settings-xml"><a href="#settings-xml" class="headerlink" title="settings.xml"></a>settings.xml</h3><p>阿里镜像仓库</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>本地仓库路径</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>path<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="vagrant"><a href="#vagrant" class="headerlink" title="vagrant"></a>vagrant</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S vagrant<br></code></pre></div></td></tr></table></figure><h2 id="virtualbox"><a href="#virtualbox" class="headerlink" title="virtualbox"></a>virtualbox</h2><p>基本包，安装时需要选择virtualbox-host-modules-arch模块</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S virtualbox<br></code></pre></div></td></tr></table></figure><p>加载virtualbox内核模块</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo modprobe vboxdrv vboxnetadp vboxnetflt<br></code></pre></div></td></tr></table></figure><p>扩展包</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S virtualbox-ext-oracle<br></code></pre></div></td></tr></table></figure><p>将用户加入组</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo usermod -G vboxusers -a 用户名<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Arch</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitPages绑定个人的域名</title>
    <link href="/2022/03/22/GitPages%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/"/>
    <url>/2022/03/22/GitPages%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="1-GitHub-Pages配置Custom-domain"><a href="#1-GitHub-Pages配置Custom-domain" class="headerlink" title="1. GitHub Pages配置Custom domain"></a>1. GitHub Pages配置Custom domain</h2><ol><li>进入<code>Pages</code>仓库的<code>Settings</code>页面</li><li>左边栏选择<code>Pages</code></li><li>Custom domain&#96;选择要配置的个人域名</li></ol><p>比如我要将<code>pages</code>页绑定到我的个人域名<code>blog.nexur.top</code>下，设置如下</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220322062019731.png" alt="image-20220322062019731" style="zoom: 50%;" /><h2 id="2-配置域名解析"><a href="#2-配置域名解析" class="headerlink" title="2. 配置域名解析"></a>2. 配置域名解析</h2><p>进入个人域名解析设置，添加<code>CNAME</code>指向自己<code>Pages</code>页的仓库名如下</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220322062417072.png" alt="image-20220322062417072" style="zoom: 33%;" /><p><strong>注意</strong>：主机记录连着域名就是刚刚GitHub Pages上配置的域名。我这里配置的是二级域名，若想配置一级域名则将主机记录填写为<code>@</code>即可。</p><h2 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h2><p>有可能配置好后并不能马上访问，需要等几分钟（多则10分钟）。</p><p>如果使用Hexo部署的博客仓库，使用<code>hexo d</code>命令推送时会把<code>CANME</code>文件删掉，需要在hexo博客目录下的source文件夹内添加<code>CNAME</code>文件，文件内写的是你配置的域名，例如我的是</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">blog<span class="hljs-selector-class">.nexur</span>.<span class="hljs-attribute">top</span><br></code></pre></div></td></tr></table></figure><h2 id="4-配置完成，使用HTTPS"><a href="#4-配置完成，使用HTTPS" class="headerlink" title="4. 配置完成，使用HTTPS"></a>4. 配置完成，使用HTTPS</h2><ol><li>当配置完成后，刷新该页，会有个绿色的打勾</li><li>默认使用http方式访问，有可能报安全警告，可如下图打勾开启HTTPS（注意是否有Http资源，后者可能会不加载）</li></ol><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220322062943403.png" alt="image-20220322062943403" style="zoom: 33%;" />]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>GitPages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC笔记</title>
    <link href="/2022/03/20/SpringMVC%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/20/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>是一个Spring的Web框架，基于原生的Serlvet，通过功能强大的DispatcherServlet(继承Servlet)，对请求和响应进行统一处理。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>IDEA、Maven3.8.4、Tomcat8、Spring5.3.16</p><h3 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1. 创建maven项目"></a>1. 创建maven项目</h3><h3 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.atteo.moonshine<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Servlet API --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Tomcat自带的jar，所以不用导入, Tomcat还自带了JSP的jar --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 这句要写，不然会依赖冲突--&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编译需要所以需要导入，打包不需要，所以需要provided参数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring5和thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.15.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-打包方式修改为war"><a href="#3-打包方式修改为war" class="headerlink" title="3. 打包方式修改为war"></a>3. 打包方式修改为<code>war</code></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-添加web模块"><a href="#4-添加web模块" class="headerlink" title="4. 添加web模块"></a>4. 添加<code>web</code>模块</h3><ul><li>src&#x2F;main下新建<code>webapp</code>文件夹（文件夹名称固定webapp）</li><li>webapp文件夹下新建<code>/WEB-INF/web.xml</code>文件</li></ul><h3 id="5-配置web-xml"><a href="#5-配置web-xml" class="headerlink" title="5. 配置web.xml"></a>5. 配置<code>web.xml</code></h3><p>浏览器不能直接访问一个类，要想访问某个类，须得给类以路径。当访问到路径符合类的映射时，servlet就会进行处理。</p><p>注册SpringMVC的前端控制器<code>DispatcherServlet</code></p><h4 id="默认配置方式"><a href="#默认配置方式" class="headerlink" title="默认配置方式"></a>默认配置方式</h4><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<servlet-name> -servlet.xml,例如，以<br>下配置所对应SpringMVC的配置文件位于WEB-INF下,文件名为springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="扩展的配置方式"><a href="#扩展的配置方式" class="headerlink" title="扩展的配置方式"></a>扩展的配置方式</h4><p>可通过init- param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控<br>制器DispatcherServlet的初始化时间</p><p>通过<code>&lt;init-param&gt;</code>参数指定SpringMVC配置文件的名字和路径</p><p>须得在<code>&lt;param-value&gt;</code>的值路径下创建同名的文件。（在这里即在resources下创建SpringMVC.xml文件）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置SpringMVC配置文件的名字和路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置Servlet的初始化时间，优化第一次访问的速度--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="路径-和路径-的区别"><a href="#路径-和路径-的区别" class="headerlink" title="路径/和路径/*的区别"></a>路径<code>/</code>和路径<code>/*</code>的区别</h4><p><code>/</code>：表示当前浏览器发送的所有请求，不包括<code>.jsp</code>为后缀的请求</p><p><code>/*</code>：包括<code>.jsp</code>路径的请求</p><p><code>.jsp</code>由指定的特俗的Servlet进行处理，不需要<code>DispatcherSerlet</code>进行处理。假如由<code>DispatcherServlet</code>进行处理，那么jsp请求将不能访问正确的路径。</p><h3 id="6-创建请求控制器"><a href="#6-创建请求控制器" class="headerlink" title="6. 创建请求控制器"></a>6. 创建请求控制器</h3><p>由于前端请求所有都经过DispatcherServlet，参数获取也在这处理。所以不需要创建Servlet，而只需要创建请求控制器就行。</p><p><code>io.ainexur.mvc.controller.HelloController.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span> <span class="hljs-comment">//注解标识该类为控制器类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-配置springMVC-xml文件"><a href="#7-配置springMVC-xml文件" class="headerlink" title="7. 配置springMVC.xml文件"></a>7. 配置<code>springMVC.xml</code>文件</h3><p>注意添加<code>context</code>命名空间，不然会访问不到</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;io.ainexur.mvc.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="8-配置首页访问"><a href="#8-配置首页访问" class="headerlink" title="8. 配置首页访问"></a>8. 配置首页访问</h3><p>templates下的页面不能直接访问，需要通过servlet</p><p>新建<code>/WEB-INF/templates/index.html</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>控制器添加首页访问控制</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//请求路径&quot;/&quot; --&gt;&gt; /WEB-INF/template/index.html</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span> <span class="hljs-comment">//请求映射，当浏览器访问该路径时，被识图解析器解析</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>; <span class="hljs-comment">//该视图名称会被识图解析器解析（即加上前后缀的路径）</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>tomcat运行项目，访问<code>localhost:8080/context-root/</code>时，通过资源控制器访问请求控制类中的方法，方法返回值则将通过视图解析器补全资源页面的路径，将页面数据返回到客户端。</p><h4 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h4><p>&#x2F;target和target：前者绝对路径，后者相对路径。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/target&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--Thymeleaf上的对控制器的访问--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>访问目标页面target.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h3><p>浏览器访问-&gt; 前端控制器解析url-pattern-&gt;DispatcherServlet处理-&gt;前端控制器读取SpringMVC的核心配置文件，通过扫面组件找到控制器，将请求地址和控制器中的<code>@RequestMapping</code>注解中的<code>value</code>属性值匹配-&gt;控制器方法处理，返回字符串类型的视图名称，该视图会被视图解析器解析，加上前后缀组成路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应的页面</p><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h1><h3 id="ReuquestMapping-的功能"><a href="#ReuquestMapping-的功能" class="headerlink" title="@ReuquestMapping 的功能"></a>@ReuquestMapping 的功能</h3><p>作用：将请求和处理的控制方法关联，<strong>建立映射关系</strong></p><p>SpringMVC接受到指定的请求，就会来找到在映射关系中对应的控制方法来处理这个请求。</p><h3 id="RequestMapping注解的位置"><a href="#RequestMapping注解的位置" class="headerlink" title="@RequestMapping注解的位置"></a>@RequestMapping注解的位置</h3><p><strong>类：</strong>该类下的所有方法受到该注解约束</p><p><strong>方法：</strong>该方法受到该注解约束</p><h3 id="ReuquestMapping-的value属性"><a href="#ReuquestMapping-的value属性" class="headerlink" title="@ReuquestMapping 的value属性"></a>@ReuquestMapping 的<code>value</code>属性</h3><p>value属性是必须设置的。</p><p>当value值是数组时，表示任意的值都可以匹配</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//value数组</span><br><span class="hljs-meta">@RequestMapping(value = &#123;&quot;/hello&quot;,&quot;/hi&quot;&#125;)</span><br><span class="hljs-comment">//value对应单个值</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;)</span><br></code></pre></div></td></tr></table></figure><h3 id="ReuquestMapping-的method属性"><a href="#ReuquestMapping-的method属性" class="headerlink" title="@ReuquestMapping 的method属性"></a>@ReuquestMapping 的<code>method</code>属性</h3><p>method标注了方法的合法请求方式，比如：GET、POST</p><p>当Method值不匹配时，将出现405错误</p><p>不设置method时，任何method都可以</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//多个值</span><br><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-comment">//单个值</span><br><span class="hljs-meta">@RequestMapping( method = RequestMethod.GET )</span><br></code></pre></div></td></tr></table></figure><h4 id="派生注解："><a href="#派生注解：" class="headerlink" title="派生注解："></a>派生注解：</h4><p>派生注解默认设置了RequestMapping的method值，其他并无区别</p><ul><li>GetMapping</li><li>PostMapping</li><li>PutMapping</li><li>DeleteMapping</li></ul><p>@ReuquestMapping 的<code>params</code>属性</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;username&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含username属性</span><br><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;!username&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须不能有username属性</span><br><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;username=admin&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含username属性，且值必须为admin</span><br><span class="hljs-meta">@ReuquestMapping(params = &#123;&quot;username!=admin&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含username属性，且值必须不能为admin</span><br></code></pre></div></td></tr></table></figure><p>@ReuquestMapping 的<code>headers</code>属性</p><p>用法和<code>params</code>一样。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ReuquestMapping(headers = &#123;&quot;Host=localhost:8080&quot;&#125;)</span> <span class="hljs-comment">//表示请求中必须包含Host属性，且值必须为localhost:8080</span><br></code></pre></div></td></tr></table></figure><h3 id="SpringMVC支持ant风格的路径（模糊匹配）"><a href="#SpringMVC支持ant风格的路径（模糊匹配）" class="headerlink" title="SpringMVC支持ant风格的路径（模糊匹配）"></a>SpringMVC支持ant风格的路径（模糊匹配）</h3><ul><li><p><code>?</code>：表示任意的单个字符</p><p>有接口如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/a?a/testAnt&quot;)</span><br></code></pre></div></td></tr></table></figure><p>对应url：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//匹配</span><br>/a1a/testAnt <span class="hljs-comment">//?可以匹配一个数字</span><br>/aSa/testAnt <span class="hljs-comment">//?可以匹配一个字母</span><br>    <br><span class="hljs-comment">//不匹配</span><br>/a?a/testAnt <span class="hljs-comment">//?不可以匹配，因为是url的特殊符号，其他特俗符号同理</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>*</code>：表示任意的0个或多个字符</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/a*a/testAnt&quot;)</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>**</code>：表示任意的一层或多层目录</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/**/testAnt&quot;)</span><span class="hljs-comment">//正确写法</span><br><br><span class="hljs-comment">//错误用法</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/a**a/testAnt&quot;)</span> <span class="hljs-comment">//这样相当于两个单独的*的匹配规则</span><br><br><span class="hljs-comment">///总结：在使用**时，只能使用`/**/xxx`的方式</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="SpringMVC支持路径中的占位符（重点）"><a href="#SpringMVC支持路径中的占位符（重点）" class="headerlink" title="SpringMVC支持路径中的占位符（重点）"></a>SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：<code>/deleteUser?id=1</code></p><p>rest方式：<code>/deleteUser/1</code></p><p>SpringMVC路径中的占位符常用于restful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testPath/&#123;id&#125;&quot;)</span> <span class="hljs-comment">//举例url: testPath/999,不加/999这一id层，服务器报404</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPath</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>支持多占位符</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testPath/&#123;id&#125;/&#123;username&#125;&quot;)</span> <span class="hljs-comment">//举例url: testPath/999/zhangsan</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPath2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span>String username)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>占位符<code>&#123;&#125;</code>告诉程序对应url位置的值为参数</p><p><code>@PathVariable(&quot;id&quot;) String id</code>中的id告诉该形参对应哪个参数</p><h1 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h1><p>DispatcherServlet的工作：浏览器发过来的所有请求都被前端控制器先处理，再执行相对应的控制器方法。当DispathcerServlet间接调用控制器方法时，通过路径映射找到要间接调用的方法。这个找的过程时是在DispatcherServlet内部执行，DispatcherServlet中，为我们封装了很多数据，当我们去调用当前的控制器方法时，会根据控制器方法的参数为当前控制器方法注入参数，即为参数赋值</p><h2 id="1-通过Serlvet原生API获取"><a href="#1-通过Serlvet原生API获取" class="headerlink" title="1. 通过Serlvet原生API获取"></a>1. 通过Serlvet原生API获取</h2><p>将HttpServletRequest作为控制器方法形参，由DispatcherServlet注入参数。从HttpServletRequest中获取请求参数。</p><p>控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-comment">//形参位置的request表示当前请求。</span><br><span class="hljs-comment">//该控制器方法由DispatcherServlet调用，并自动注入参数</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br>    System.out.println(<span class="hljs-string">&quot;password = &quot;</span> + password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>前端Thymeleaf:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testServletAPI?username=&#x27;admin&#x27;&amp;password=&#x27;123&#x27;&#125;&quot;</span>&gt;</span>测试使用ServletApi获取请求<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-通过控制器方法的形参获取请求参数"><a href="#2-通过控制器方法的形参获取请求参数" class="headerlink" title="2. 通过控制器方法的形参获取请求参数"></a>2. 通过控制器方法的形参获取请求参数</h2><p> 控制器方法中的形参名和url中的请求参数名保持一致，就可以通过DispatcherServlet自动将请求参数赋值到形参，使控制方法获取请求参数。</p><p>原理：通过反射获取形参名，再将容器中对应的同名请求参数值为参数，使用反射式的函数调用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(String username, String password, String[] hobby)</span> &#123;<br>    <span class="hljs-comment">//多个同名参数可以使用String接收，每个值之间用，分割，也可以使用String数组接收。1</span><br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br>    System.out.println(<span class="hljs-string">&quot;password = &quot;</span> + password);<br>    System.out.println(<span class="hljs-string">&quot;Arrays.toString(hobby) = &quot;</span> + Arrays.toString(hobby));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-RequestParam注解"><a href="#3-RequestParam注解" class="headerlink" title="3. @RequestParam注解"></a>3. @RequestParam注解</h2><p>在形参前添加，使用该注解将名和形参建立映射关系</p><p>当前端传的名字为<code>user_name</code>时，DispatcherServlet不会主动将该字段注入形参<code>usernam</code>中。如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;user_name&quot;)</span> String username)</span> &#123; <span class="hljs-comment">//注解建立映射</span><br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>value</strong>：映射的请求参数的名称</p><p><strong>requred</strong>：默认为true，即当访问时不带value名称的参数报404，带则正常访问。定义为false时，带不带都可以访问。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = true</span><br></code></pre></div></td></tr></table></figure><p><strong>defaultValue</strong>：当不传该参数时，设置默认值。传参数则使用参数值。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = false, defaultValue = &quot;defaultName&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-RequestHeader注解"><a href="#4-RequestHeader注解" class="headerlink" title="4. RequestHeader注解"></a>4. RequestHeader注解</h2><p>将请求头信息和控制器方法的形参创建映射关系。</p><p>拥有value、required、defaultValue三个属性，用法和@RequestParam相同</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;user_name&quot;)</span> String username, )</span> &#123; <span class="hljs-comment">//注解建立映射</span><br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-CookieValue注解"><a href="#5-CookieValue注解" class="headerlink" title="5. CookieValue注解"></a>5. CookieValue注解</h2><p>将请求头Cookie和控制器方法的形参创建映射关系。</p><p>拥有value、required、defaultValue三个属性，用法和@RequestParam相同</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String JSESSIONID)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;JSESSIONID = &quot;</span> + JSESSIONID);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-通过控制器方法的Pojo形参获取请求参数"><a href="#6-通过控制器方法的Pojo形参获取请求参数" class="headerlink" title="6. 通过控制器方法的Pojo形参获取请求参数"></a>6. 通过控制器方法的Pojo形参获取请求参数</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testPojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPojo</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testPojo&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    id：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;测试Pojo形参获取请求参数&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.ainexur.mvc.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-解决获取请求参数乱码问题"><a href="#7-解决获取请求参数乱码问题" class="headerlink" title="7. 解决获取请求参数乱码问题"></a>7. 解决获取请求参数乱码问题</h2><h3 id="服务器执行顺序"><a href="#服务器执行顺序" class="headerlink" title="服务器执行顺序"></a>服务器执行顺序</h3><p>监听器-过滤器-Servlet-控制方法</p><h3 id="Get请求中文乱码"><a href="#Get请求中文乱码" class="headerlink" title="Get请求中文乱码"></a>Get请求中文乱码</h3><p>Tomcat8以下Tomcat服务器的原因，将Tomcat的server.xml的配置加上<code>URLEncoding=&quot;UTF-8&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">URLEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>Tomcat8：</p><ul><li><p>找到两个idea的vmoptions配置文件，在文件中追加<code>-Dfile.encoding=UTF-8</code></p></li><li><p>或者直接修改idea中的tomcat配置，在vm-options中添加<code>-Dfile.encoding=UTF-8</code>，两者效果相同，都是更改系统默认的GBK编码</p></li></ul><h3 id="post乱码：web-xml配置过滤器及其编码"><a href="#post乱码：web-xml配置过滤器及其编码" class="headerlink" title="post乱码：web.xml配置过滤器及其编码"></a>post乱码：web.xml配置过滤器及其编码</h3><p>通过源码追踪，得出要设置编码才会进行编码。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>注意，如果写<code>/</code>不生效，目前还不懂为什么</p><h1 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h1><h2 id="1-通过ServletAPI向Request域对象共享数据"><a href="#1-通过ServletAPI向Request域对象共享数据" class="headerlink" title="1. 通过ServletAPI向Request域对象共享数据"></a>1. 通过ServletAPI向Request域对象共享数据</h2><p>控制方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestByServletApi&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestByServletApi</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello, servletApi&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>访问接口：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestByServletApi&#125;&quot;</span>&gt;</span>测试testRequestByServletApi<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>success.html</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;testRequestScope&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>//成功获取到&quot;hello, servletApi&quot;<br></code></pre></div></td></tr></table></figure><h2 id="2-通过ModelAndView向Request域对象共享数据"><a href="#2-通过ModelAndView向Request域对象共享数据" class="headerlink" title="2. 通过ModelAndView向Request域对象共享数据"></a>2. 通过ModelAndView向Request域对象共享数据</h2><p>model：指的是往域对象共享数据的过程</p><p>view：最终经过视图解析器跳转到最终页面的过程</p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testModelAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//必须是ModelAndView类型的返回数据才能起作用</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//处理模型数据：向Request共享数据</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, ModelAndView&quot;</span>);<br>    <span class="hljs-comment">//设置视图名称，</span><br>    modelAndView.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-通过Model向Request域对象共享数据"><a href="#3-通过Model向Request域对象共享数据" class="headerlink" title="3. 通过Model向Request域对象共享数据"></a>3. 通过Model向Request域对象共享数据</h2><p>例子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testModel&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span> &#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, Model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-通过Map向Request域对象共享数据"><a href="#4-通过Map向Request域对象共享数据" class="headerlink" title="4. 通过Map向Request域对象共享数据"></a>4. 通过Map向Request域对象共享数据</h2><p>例子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, String&gt; mp)</span> &#123;<br>    mp.put(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-通过ModelMap向Request域对象共享数据"><a href="#5-通过ModelMap向Request域对象共享数据" class="headerlink" title="5. 通过ModelMap向Request域对象共享数据"></a>5. 通过ModelMap向Request域对象共享数据</h2><p>例子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;testModelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span> &#123;<br>    modelMap.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;Hello, Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringMVC</tag>
      
      <tag>MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb入门笔记</title>
    <link href="/2022/03/02/JavaWeb%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <url>/2022/03/02/JavaWeb%E5%85%A8%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>这个阶段主要是学习静态页面</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>客户端浏览器请求：Http Request  -&gt; 服务器响应：Http Response -&gt; 客户端浏览器处理响应数据（字符串），渲染成页面。这些字符串就是HTML。HTML是超文本标记语言，决定页面显示的内容。</p><p>解释性语言，不缺分大小写</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><ul><li>html<ul><li>head<ul><li>meta</li><li>meta</li></ul></li><li>body</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p><code>tr</code>:行</p><p><code>th</code>:表头行列</p><p><code>td</code>:行列，和th功能一直，th内置了一些css</p><h4 id="from表单"><a href="#from表单" class="headerlink" title="from表单"></a>from表单</h4><p>action：提交表单触发的动作</p><p>method：表单提交请求方式</p><p>radioi单选按钮，同name为一组。</p><p>checked复选框，可以不同name，但同组应为同name，以方便传参给后端处理。</p><p>select：下拉选择框</p><p>注意提交和重置表单按钮为<code>submit</code>、<code>reset</code></p><p>注意：当<code>name</code>&#x3D;<code>value</code>时，可单写name，效果一致，如checked</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;ok.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span>456<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    账号<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    在线状态<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    爱好<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>篮球<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>足球<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>乒乓球<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;star&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;star&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>白羊<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>天蝎<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>巨蟹<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;texts&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;texts&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 18;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="frameset"><a href="#frameset" class="headerlink" title="*frameset:"></a>*frameset:</h4><p>页面框架：多个页面拼凑成一个页面，代替body。已经淘汰，做个了解</p><h4 id="iframe"><a href="#iframe" class="headerlink" title="*iframe:"></a>*iframe:</h4><p>在一个 正常页面嵌入另外一个页面</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>css决定页面上的内容(HTML)以何种形式显示出来，即决定页面上的美观程度美化页面</p><h3 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h3><h4 id="单样式"><a href="#单样式" class="headerlink" title="单样式"></a>单样式</h4><p>标签样式、类样式、id样式</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 标签样式 */</span><br><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-comment">/* 类样式 */</span><br><span class="hljs-selector-class">.f20</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;<br>&#125;<br><br><span class="hljs-comment">/* ID样式 */</span><br><span class="hljs-selector-id">#p4</span>&#123;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">70px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="组合样式"><a href="#组合样式" class="headerlink" title="组合样式"></a>组合样式</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 混合样式 */</span><br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Lucida Sans&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="位置上的分类"><a href="#位置上的分类" class="headerlink" title="位置上的分类"></a>位置上的分类</h3><p>css渲染时，采取就近原则</p><p>嵌入式样式表、内部样式表、</p><p>外部样式表</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>实现页面的特效</p><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="BS-x2F-CS"><a href="#BS-x2F-CS" class="headerlink" title="BS&#x2F;CS"></a>BS&#x2F;CS</h2><p>Browser&#x2F;Server、Client&#x2F;Server</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>服务器程序的容器，体积小，免费</p><p><strong>目录结构</strong></p><ul><li>Tomcat<ul><li>bin：可执行文件目录</li><li>conf：配置文件的目录</li><li>lib：运行tomcat所需要的依赖文件库</li><li>logs：存放日志目录</li><li>temp：临时目录</li><li>webapps：项目部署目录</li><li>work：工作目录</li></ul></li></ul><p><strong>配置</strong></p><p>需要jre：即配置JAVA_HOME环境变量</p><p><strong>访问</strong></p><p>localhost:8080&#x2F;context root&#x2F;xxx.html：不同项目的contextroot不同</p><p>tomcat.xml下配置wellcome页是index，如果context后不接任何路径则默认访问该wellcome页</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>IDEA配置Tomcat</strong></p><p>java项目添加web module：new-&gt;module-&gt;web</p><p>右键项目-&gt;add Frameword support-&gt;JavaEE-&gt;tomcat</p><h2 id="Servelet"><a href="#Servelet" class="headerlink" title="Servelet"></a>Servelet</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Servlet3.0开始支持<code>@WebServlet</code>注解，通过注解方式配置一个Servlet</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet</span><br></code></pre></div></td></tr></table></figure><p>Java Servelet是服务器应用程序，是客户端请求和服务器上的数据库或应用程序之间的中间层。</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//image-20220304003801554.png" alt="image-20220304003801554" style="zoom:50%;" /><h3 id="自定义Servlet"><a href="#自定义Servlet" class="headerlink" title="自定义Servlet"></a>自定义Servlet</h3><p><strong>新建servlet类</strong></p><blockquote><p>对于一个 Servlet 类，我们日常最常用的方法是继承自 HttpServlet 类，提供了 Http 相关的方法，HttpServlet 扩展了 GenericServlet 类，而 GenericServlet 类又实现了 Servlet 类和 ServletConfig 类。</p></blockquote><p>web mudole中src下新建servlet类，继承自HttpServlet类，可根据需要重写doPost\doGet方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">addServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;age&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;age = &quot;</span> + age);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>配置servlet类映射http请求路径</strong></p><p>web.xml配置映射路径</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>addPeople<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.ainexur.servlets.addServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>addPeople<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/add<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这样一个servlet就配置完成，http请求contextroot&#x2F;add就可以访问到该servlet中间件。</p><h3 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h3><ol><li>用户点击提交表单，带着请求数据发起Http请求</li><li>项目中，从web.xml寻找到url</li><li>寻找url对应的servlet-name</li><li>寻找servlet-name对应的servlet-class</li><li>进入class，根据表单提交的方式进入该servlet类的doPost或者doGet方法，进行处理</li><li>处理结束，</li></ol><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>servlet生命周由容器(Tomcat)自动化管理。</p><p>默认情况下，第一次请求时，tomcat才会实例化，并且只会创建一个实例，所有的服务都通过这个实例处理请求。优势：提高系统启动速度，但第一次请求时耗时较长。如果需要提高响应速度，可以在配置文件设置<code>load-on-startup</code>的值来指定初始化时机。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo02Servlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.ainexur.io.Demo02Servlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>//指定servlet的启动时机、数字越小，启动越靠前<br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Servlet在容器中是单例的、<strong>线程不安全的</strong>，尽量不要在servlet中定义成员变量、不要根据成员变量的值来判断，做操作。</p><p>servlet生命周期定义为从创建直到毁灭的整个过程：</p><ol><li>Servlet初始化后调用init()函数</li><li>Servlet调用service()函数处理客户端请求</li><li>Servlet摧毁前调用destroy()方法</li><li>最后，Serlvet由JVM的垃圾回收器进行垃圾回收</li></ol><p><strong>部署</strong></p><p>部署到tomcat的并非源代码，而是一个部署包-Artifacts：web应用程序压缩包（war包）的解压缩的包，</p><ol><li><p>新建项目，新建web模块</p></li><li><p>创建artifact部署包</p></li><li><p>lib-artifact：现有artifact，后面再添加的mysql.jar文件</p></li><li><p>lib放在module里是module独用，lib放在项目里是所有module都可以用：</p><p>设置lib为库-&gt;module引用该库。module引用新lib后，要更新部署包</p></li></ol><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><ol><li><p>javax.servlet.Servlet 接口</p><ul><li>void init(config) 初始化方法</li><li>void service() 服务方法</li><li>void destroy() 销毁方法</li></ul></li><li><p>javax.servlet.ericServlet 抽象类</p><ul><li>void service() 抽象方法</li></ul></li><li><p>javax.servlet.http.HttpServlet 抽象子类</p><ul><li><p>void service():</p><p>根据请求的的method判断，调用对应的方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException <br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<span class="hljs-comment">//获取method</span><br>    <span class="hljs-type">long</span> lastModified;<br>    <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;GET&quot;</span>)) &#123;<span class="hljs-comment">//根据method，调用对应的方法</span><br>        lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>        <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1L</span>) &#123;<br>            <span class="hljs-built_in">this</span>.doGet(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span> ifModifiedSince;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ifModifiedSince = req.getDateHeader(<span class="hljs-string">&quot;If-Modified-Since&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>                ifModifiedSince = -<span class="hljs-number">1L</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="hljs-number">1000L</span> * <span class="hljs-number">1000L</span>) &#123;<br>                <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>                <span class="hljs-built_in">this</span>.doGet(req, resp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                resp.setStatus(<span class="hljs-number">304</span>);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;HEAD&quot;</span>)) &#123;<br>        lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>        <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>        <span class="hljs-built_in">this</span>.doHead(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doPost(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;PUT&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doPut(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;DELETE&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doDelete(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doOptions(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;TRACE&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doTrace(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);<br>        Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;method&#125;;<br>        errMsg = MessageFormat.format(errMsg, errArgs);<br>        resp.sendError(<span class="hljs-number">501</span>, errMsg);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>调用的方法类似：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_get_not_supported&quot;</span>);<br>    <span class="hljs-built_in">this</span>.sendMethodNotAllowed(req, resp, msg);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_post_not_supported&quot;</span>);<br>    <span class="hljs-built_in">this</span>.sendMethodNotAllowed(req, resp, msg);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>相关信息绑定在这里</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ResourceBundle lStrings  ResourceBundle.getBundle(<span class="hljs-string">&quot;javax.servlet.http.LocalStrings&quot;</span>);<br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><h4 id="405：请求方法和servlet方法不匹配"><a href="#405：请求方法和servlet方法不匹配" class="headerlink" title="405：请求方法和servlet方法不匹配"></a>405：请求方法和servlet方法不匹配</h4><h4 id="未解决：new-module时，添加web不成功，为java项目"><a href="#未解决：new-module时，添加web不成功，为java项目" class="headerlink" title="未解决：new-module时，添加web不成功，为java项目"></a>未解决：new-module时，添加web不成功，为java项目</h4><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><ol><li>Http称之为<strong>超文本传输协议</strong></li><li>Http包含两个部分：请求和响应<ul><li>请求包含三个部分：<ul><li>请求行：展示当前请求的最基本信息，请求方式、请求URL、协议版本</li><li>请求消息头：包含客户端要告诉服务器的很多信息，</li><li>请求主体：get方式没有请求体，但有que’r’yString。post方式有请求体form data，json格式有请求体requst payload。</li></ul></li><li>响应包含三个部分：<ul><li>相应行：包括协议、响应状态码、响应状态</li><li>响应头：包含服务器信息、服务器发给浏览器的信息（内容的媒体类型、编码、内容长度等）</li><li>响应体：响应的实际内容（比如html页面、字符串…)</li></ul></li></ul></li></ol><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>Http传输协议没有状态是说，服务端无法判断两个会话是来自同一个客户端还是不同客户端，因此引入session</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="保存作用域"><a href="#保存作用域" class="headerlink" title="保存作用域"></a>保存作用域</h3><h3 id="服务器内部转发"><a href="#服务器内部转发" class="headerlink" title="服务器内部转发"></a>服务器内部转发</h3><p>服务器内部转发对客户端而言是不可见的，客户端不知道服务器内部转发是否进行，进行了几次。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">req.getRequestDispatcher(<span class="hljs-string">&quot;demo07&quot;</span>).forward(req,resp);<br></code></pre></div></td></tr></table></figure><h3 id="客户端重定向"><a href="#客户端重定向" class="headerlink" title="客户端重定向"></a>客户端重定向</h3><p>客服端重定向，是客户端发出的多次请求，在客户端是可见的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">resp.sendRedirect(<span class="hljs-string">&quot;demo07&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="thymeleaf-视图模板"><a href="#thymeleaf-视图模板" class="headerlink" title="thymeleaf - 视图模板"></a>thymeleaf - 视图模板</h2><p>在页面上展示java内存内数据的过程称为渲染（render）</p><h2 id="保存作用域-1"><a href="#保存作用域-1" class="headerlink" title="保存作用域"></a>保存作用域</h2><p>四个级别保存作用域：</p><ul><li>page ：页面级别，淘汰不用</li><li>reqeust：一次请求，客户端重定向后失效、服务器内部转发有效</li><li>session：一次会话，session未失效前都有效</li><li>application：一次应用程序范围内有效</li></ul><h2 id="MVC优化的Servlet"><a href="#MVC优化的Servlet" class="headerlink" title="MVC优化的Servlet"></a>MVC优化的Servlet</h2><p>增删改查各要给Servlet，当服务器内容很多时，会有各种各种的Servlet，繁多而杂乱，不仅开发难，维护也难。</p><p>MVC：</p><p>Model（模型）、View（视图）、Controller（控制器）</p><ul><li>视图层：用于数据展示、用户交互</li><li>控制层：接受客户端的请求，具体的业务逻辑还要借助模型组件来完成</li><li>模型层：模型分为很多种，有比较简单的pojo&#x2F;vo（value object），有业务模型组件，有数据库访问组件<ol><li>pojo&#x2F;vo：值对象</li><li>DAO：数据访问对象</li><li>BO：业务对象</li></ol></li></ul><p>区分业务对象和数据访问对象：</p><ol><li>DAO中的方法都是单精度方法：一个方法只考虑一个操作，比如添加、查询</li><li>BO中的方法属于业务方法，也就是说注册这个方法属于业务方法，也就是说注册这个业务功能需要多个DAO的组合调用，从而完成注册功能</li><li></li></ol><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="耦合-x2F-依赖"><a href="#耦合-x2F-依赖" class="headerlink" title="耦合&#x2F;依赖"></a>耦合&#x2F;依赖</h3><p>依赖指xxx离不开xxx</p><p>在软件系统中，层与层之间是存在依赖的，我们亦称之为耦合。</p><p>系统架构或者是设计的一个原则是：高内聚低耦合</p><p>层内部的组成应该是高度聚合的，而层与层之间的关系应该是低耦合的，最理想的情况是0耦合。</p><p>IOC：控制反转&#x2F; DI：依赖注入</p><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p>在servlet前的一层可定义过滤器。可定义放行前代码、放行后代码。</p><p>可定义多个过滤器，注解过滤器顺序按照命名字典序执行，xml配置的过滤器按照配置前后执行顺序。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">init();<br><br>doFilter();<br><br>destory();<br></code></pre></div></td></tr></table></figure><h2 id="事务-过滤器的一个典型应用"><a href="#事务-过滤器的一个典型应用" class="headerlink" title="事务(过滤器的一个典型应用)"></a>事务(过滤器的一个典型应用)</h2><p>假如事务管理的操作写在dao层，一个service对应多个dao，dao的部分成功和失败，无法作为service判断成功或者失败的依据。</p><p>service是一个整体：事务管理不能以DAO层的单精度方法为单位，而应该以业务层的方法为单位。</p><p><strong>实现原理：</strong></p><p>在过滤器中</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>放行();<br>&#125;<span class="hljs-keyword">catch</span>()&#123;<br>    回滚;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实现难题：多个dao可能对应多个Connect，多个DAO应该用同一个Connect达到事务管理的目的。所以用ThreadLocal.set(conn), get()，获取同一个Connect，</p><p><strong>ThreadLocal</strong></p><p><strong>注意：</strong></p><p>DAO层catch Exception后，会导致service层获取不到错误，故DAO层不能catch，只能throw错误。</p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>1）ServletContextListener： 监听ServletContext对象的创建和销毁过程</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson之类模板parseObject</title>
    <link href="/2022/02/27/fastjson%E4%B9%8B%E7%B1%BB%E6%A8%A1%E6%9D%BFparseObject/"/>
    <url>/2022/02/27/fastjson%E4%B9%8B%E7%B1%BB%E6%A8%A1%E6%9D%BFparseObject/</url>
    
    <content type="html"><![CDATA[<p>fastjson之类模板parseObject</p><p>有如下类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestPojo</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> T data;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>将Json字符串转RequestPojo对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">JSON.parseObject(response.getBody().toString(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;RequestPojo&lt;Token&gt;&gt;() &#123; &#125;).getData();<br></code></pre></div></td></tr></table></figure><p>注意<code>new TypeReference&lt;RequestPojo&lt;Token&gt;&gt;() &#123; &#125;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK之ArrayList源码剖析</title>
    <link href="/2022/02/12/JDK%E4%B9%8BArrayList%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <url>/2022/02/12/JDK%E4%B9%8BArrayList%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h1><p>基于<code>java version &quot;1.8.0_321&quot;</code></p><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>ArrayList底层是用数组实现的，<code>Object</code>数组</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> Object[] elementData; <span class="hljs-comment">// non-private to simplify nested class access</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<span class="hljs-comment">//元素个数</span><br></code></pre></div></td></tr></table></figure><h2 id="扩容分析"><a href="#扩容分析" class="headerlink" title="扩容分析"></a>扩容分析</h2><p>看一下add方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在添加元素之前，会进行一个容量是否需要增长判断操作<code>ensureCapacityInternal(size + 1); </code>。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//2</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<span class="hljs-comment">//如果数组是默认空元素数组</span><br>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<span class="hljs-comment">// 将两者中较大的值作为minCapacity</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> minCapacity;<span class="hljs-comment">//否则minCapacity不变</span><br>&#125;<br><span class="hljs-comment">//1</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//</span><br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br><span class="hljs-comment">//3</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//如果需要的容量大于现有数组容量</span><br>        grow(minCapacity);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果当前数组的容量不足够放下元素个数，就执行<code>grow(minCapacity);</code>扩容</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_ARRAY_SIZE</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE - <span class="hljs-number">8</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//如果扩容1.5倍还不满足大小，就直接扩容到minCapacity</span><br>    newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//负数-正数，结果可能是正数，所以这个时候就需要特判容量是否溢出</span><br>    newCapacity = hugeCapacity(minCapacity);<span class="hljs-comment">//如果容量超过默认的最大容量，判断是否过大</span><br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<span class="hljs-comment">//将旧数组复制到新容量的数组返回</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hugeCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//判断容量是否超int大小</span><br>    <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>    <span class="hljs-keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?<br>        Integer.MAX_VALUE :<br>    MAX_ARRAY_SIZE;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>由<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>判断，新的数组的容量是原来的1.5倍（<code>&gt;&gt;</code>右移等价于除以2）</p><p>要注意的是，扩容后的容量可能溢出变为负数，这时候就需要<code>hugeCapacity(minCapacity)</code>函数判断溢出这种情况.</p><h2 id="ArrayList常用方法复杂度分析"><a href="#ArrayList常用方法复杂度分析" class="headerlink" title="ArrayList常用方法复杂度分析"></a>ArrayList常用方法复杂度分析</h2><h3 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>直接在元素列末尾添加一个元素,复杂度可看成O(1)</p><h3 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    rangeCheckForAdd(index);<br><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>,<br>                     size - index);<br>    elementData[index] = element;<br>    size++;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>index及后的所有元素往后移一位,复杂度近似O(n)</p><h3 id="remove-int-index"><a href="#remove-int-index" class="headerlink" title="remove(int index)"></a>remove(int index)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    rangeCheck(index);<br><br>    modCount++;<br>    <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                         numMoved);<br>    elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// clear to let GC do its work</span><br><br>    <span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>删除指定位置的元素,其他的所有元素往前移一位,O(n)</p><h3 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (elementData[index] == <span class="hljs-literal">null</span>) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>删除首个指定元素,其后所有元素往前移一位O(n)</p><h3 id="indexOf-Object-o"><a href="#indexOf-Object-o" class="headerlink" title="indexOf(Object o)"></a>indexOf(Object o)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>            <span class="hljs-keyword">if</span> (elementData[i]==<span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> i;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>            <span class="hljs-keyword">if</span> (o.equals(elementData[i]))<br>                <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>O(n)</p><h3 id="contains-Object-o"><a href="#contains-Object-o" class="headerlink" title="contains(Object o)"></a>contains(Object o)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">return</span> indexOf(o) &gt;= <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>O(n)</p><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    modCount++;<br><br>    <span class="hljs-comment">// clear to let GC do its work</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>        elementData[i] = <span class="hljs-literal">null</span>;<br><br>    size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>将所有有元素的索引置null,不缩减容量.O(n)</p><h3 id="addAll-Collection-lt-extends-E-gt-c"><a href="#addAll-Collection-lt-extends-E-gt-c" class="headerlink" title="addAll(Collection&lt;? extends E&gt; c)"></a>addAll(Collection&lt;? extends E&gt; c)</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    Object[] a = c.toArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numNew</span> <span class="hljs-operator">=</span> a.length;<br>    ensureCapacityInternal(size + numNew);  <span class="hljs-comment">// Increments modCount</span><br>    System.arraycopy(a, <span class="hljs-number">0</span>, elementData, size, numNew);<br>    size += numNew;<br>    <span class="hljs-keyword">return</span> numNew != <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>将集合的所有元素追加至末尾,复杂度O(k),k为集合的元素个数</p><p>addAll(int index, Collection&lt;? extends E&gt; c)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(<span class="hljs-type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;<br>    rangeCheckForAdd(index);<br><br>    Object[] a = c.toArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numNew</span> <span class="hljs-operator">=</span> a.length;<br>    ensureCapacityInternal(size + numNew);  <span class="hljs-comment">// Increments modCount</span><br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index, elementData, index + numNew,<br>                         numMoved);<br><br>    System.arraycopy(a, <span class="hljs-number">0</span>, elementData, index, numNew);<br>    size += numNew;<br>    <span class="hljs-keyword">return</span> numNew != <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>将集合所有元素追加至具体位置上,其后所有元素往后移k位,复杂度O(n + k)</p>]]></content>
    
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Java</tag>
      
      <tag>源码计划</tag>
      
      <tag>ArrayList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十个经典排序</title>
    <link href="/2022/02/10/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/02/10/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>1</p><h1 id="排序是什么"><a href="#排序是什么" class="headerlink" title="排序是什么"></a>排序是什么</h1><blockquote><p>百度百科：排序是计算机内经常进行的一种操作，其目的是将一组“无序”的记录序列调整为“有序”的记录序列。分内部排序和外部排序，若整个排序过程不需要访问外存便能完成，则称此类排序问题为内部排序。反之，若参加排序的记录数量很大，整个序列的排序过程不可能在内存中完成，则称此类排序问题为外部排序。内部排序的过程是一个逐步扩大记录的有序序列长度的过程。</p></blockquote><p>排序是<strong>将一组“无序”的记录序列调整为“有序”的记录序列</strong>，分内部排序和外部排序。本文主要介绍内部排序</p><p><strong>稳定排序</strong>：假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法是稳定的。其中冒泡，插入，基数，归并属于稳定排序，选择，快速，希尔，归属于不稳定排序。 </p><p><strong>就地排序</strong>：若排序算法所需的辅助空间并不依赖于问题的规模n，即辅助空间为O（1）则称为就地排序。</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序，顾名思义就是</p><ol><li>两两比较，如果左边元素大于右边元素，则交换两个元素</li><li>重复直到交换到最右边界，则当前区间最大元素被移到最右边，区间-1</li><li>重复1-2，每一轮排序后最大的数将移动到数据序列的最后，直到所有元素都移到有序的位置上，排序完成</li></ol><p>这样一个个元素按序冒到最后，就像冒泡一样的排序称为冒泡排序</p><p><strong>复杂度：</strong></p><p>O（n^2)，稳定排序</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = t;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i --)  <span class="hljs-comment">//控制区间右边界</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j ++)  <span class="hljs-comment">//当前冒的元素的位置</span><br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>                    swap(arr, j, j + <span class="hljs-number">1</span>);    <span class="hljs-comment">//两两交换</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">123</span>, <span class="hljs-number">34</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;;<br>        bubbleSort(arr);<span class="hljs-comment">//冒泡排序</span><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li>每一趟从待排序的数据元素中，选出最小的元素放在已排序的元素列的最后面</li><li>重复，直到待排序数据元素为空，排序完成</li></ul><p><strong>复杂度：</strong></p><p>O(n^2)，可以分为稳定和不稳定两种实现</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSort</span> &#123;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = t;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> i;  <span class="hljs-comment">//第i小的元素的下标</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j ++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &lt; arr[t])<br>                    t = j;<br>            &#125;<br>            swap(arr, i, t);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">123</span>, <span class="hljs-number">34</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;;<br>        selectSort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><ul><li>将待插入的元素，与已排序好的元素逐个比较，找到一个合适的位置插入，该位置后的所有元素后移一位。</li><li>直到所有元素插入完毕，排序完成</li></ul><p><strong>复杂度：</strong></p><p>O(n^2)，稳定排序</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertionSort</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = t;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> i;  <span class="hljs-comment">//第i小的元素的下标</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j --) &#123;<br>                <span class="hljs-keyword">if</span> (arr[t] &lt; arr[j]) swap(arr, t--, j); <span class="hljs-comment">//如果t比j小，说明j要往后挪一位，t往前挪一位</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">123</span>, <span class="hljs-number">34</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;;<br>        insertionSort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>是直接插入排序的优化</p><p>- </p>]]></content>
    
    
    
    <tags>
      
      <tag>排序、算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windwos文件校验</title>
    <link href="/2022/01/26/Windwos%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/"/>
    <url>/2022/01/26/Windwos%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p><strong>命令</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">certutil -hashfile xxx MD5<br>certutil -hashfile xxx SHA1<br>certutil -hashfile xxx SHA256<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows10-WSL2</title>
    <link href="/2022/01/23/windows10-WSL2/"/>
    <url>/2022/01/23/windows10-WSL2/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wsl --install<br></code></pre></div></td></tr></table></figure><p><strong>列出所有可用发行版</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wsl --list --online<br></code></pre></div></td></tr></table></figure><p><strong>列出已安装发行版</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wsl --list --verbose<br></code></pre></div></td></tr></table></figure><p><strong>查看WSL状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wsl --status<br></code></pre></div></td></tr></table></figure><h1 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wsl --shutdown #立即终止所有正在运行的发行版和 WSL 2 轻量级实用工具虚拟机。<br></code></pre></div></td></tr></table></figure><p><strong>注销并卸载 WSL 发行版</strong></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--unregister</span> &lt;DistributionName&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>WSL2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10端口转发</title>
    <link href="/2022/01/13/Windows10%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <url>/2022/01/13/Windows10%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows10端口转发"><a href="#Windows10端口转发" class="headerlink" title="Windows10端口转发"></a>Windows10端口转发</h1><h2 id="查看转发端口："><a href="#查看转发端口：" class="headerlink" title="查看转发端口："></a>查看转发端口：</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netsh interface portproxy show v4tov4<br></code></pre></div></td></tr></table></figure><p>netstat -ano|find 4000 查看端口是否已在监听<br>telnet 127.0.0.1 4000 测试端口是否连通</p><h2 id="添加端口转发"><a href="#添加端口转发" class="headerlink" title="添加端口转发"></a>添加端口转发</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netsh interface portproxy add v4tov4 listenport=445 connectaddress=localhost connectport=4445<br></code></pre></div></td></tr></table></figure><h2 id="删除端口转发"><a href="#删除端口转发" class="headerlink" title="删除端口转发"></a>删除端口转发</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netsh interface portproxy del v4tov4 listenport=4000 listenaddress=127.0.0.1<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA安装配置</title>
    <link href="/2022/01/12/IDEA%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/01/12/IDEA%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA安装配置"><a href="#IDEA安装配置" class="headerlink" title="IDEA安装配置"></a>IDEA安装配置</h1><h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h1><ol><li><a href="https://www.jetbrains.com/idea/download/#section=windows">官网下载</a>：有Ultimate和Community两个版本选择，由于用于SpringBoot开发，这里选Community就足够（Ultimate版本需要购买激活）。</li><li>安装</li><li>启动</li></ol><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h1><h3 id="多行显示tabs"><a href="#多行显示tabs" class="headerlink" title="多行显示tabs"></a>多行显示tabs</h3><p>File | Settings | Editor | General | Editor Tabs</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/image-20220124002740466.png" alt="image-20220124002740466" style="zoom: 50%;" /><h3 id="文件模板"><a href="#文件模板" class="headerlink" title="文件模板"></a>文件模板</h3><p>所有文件模板位于File | Settings | Editor | File and Code Template，打开该路径，可对每个种类模板文件进行自定义配置</p><h4 id="1-java类模板"><a href="#1-java类模板" class="headerlink" title="1.java类模板"></a>1.java类模板</h4><p><strong>说明</strong></p><p>单机Files类别下的Class，可见默认配置如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">#<span class="hljs-keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="hljs-string">&quot;&quot;</span>)<span class="hljs-keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end<br>#parse(<span class="hljs-string">&quot;File Header.java&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">$</span>&#123;NAME&#125; &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里用了#if #end来配置.java文件的包名，用了#parse引用一个<code>File Header</code>文件作为类的注释。该文件可相应单机include目录，找到一个名为File Header的配置，单击该配置可见默认配置为空。</p><p><strong>配置</strong></p><p>类注释，修改File Header文件为如下内容</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;功能简要&gt; &lt;br&gt;</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> $&#123;USER&#125;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@create</span> $&#123;DATE&#125; </span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>将在创建.java文件时自动添加这段类注释</p><h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p>某些时候需要在文件头置入版权声明信息，模板位于File | Settings | Editor | Copyright下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Copyright $today.year xxx, Inc. All rights reserved.<br></code></pre></div></td></tr></table></figure><h1 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3. 快捷键"></a>3. 快捷键</h1><p> <a href="https://www.jetbrains.com/help/idea/mastering-keyboard-shortcuts.html">官方文档</a></p><h2 id="单词操作"><a href="#单词操作" class="headerlink" title="单词操作"></a>单词操作</h2><h3 id="跳到单词前"><a href="#跳到单词前" class="headerlink" title="跳到单词前"></a>跳到单词前</h3><p><code>Ctrl</code>+<code>←</code></p><h3 id="跳到单词后"><a href="#跳到单词后" class="headerlink" title="跳到单词后"></a>跳到单词后</h3><p><code>Ctrl</code>+<code>→</code></p><h3 id="选中前面的单词"><a href="#选中前面的单词" class="headerlink" title="选中前面的单词"></a>选中前面的单词</h3><p><code>Ctrl</code>+<code>Shift</code>+<code>←</code></p><h3 id="选中后面的单词"><a href="#选中后面的单词" class="headerlink" title="选中后面的单词"></a>选中后面的单词</h3><p><code>Ctrl</code>+<code>Shift</code>+<code>→</code></p><h2 id="收起或展开方法"><a href="#收起或展开方法" class="headerlink" title="收起或展开方法"></a>收起或展开方法</h2><h3 id="当前方法展开"><a href="#当前方法展开" class="headerlink" title="当前方法展开"></a>当前方法展开</h3><p><code>Ctrl</code>+<code>+</code></p><h3 id="当前方法折叠"><a href="#当前方法折叠" class="headerlink" title="当前方法折叠"></a>当前方法折叠</h3><p><code>Ctrl</code>+<code>-</code></p><h3 id="类方法全部展开"><a href="#类方法全部展开" class="headerlink" title="类方法全部展开"></a>类方法全部展开</h3><p><code>Ctrl</code>+<code>Shift</code>+<code>+</code></p><h3 id="类方法全部折叠"><a href="#类方法全部折叠" class="headerlink" title="类方法全部折叠"></a>类方法全部折叠</h3><p><code>Ctrl</code>+<code>Shift</code>+<code>-</code></p><h2 id="自动创建赋值对象"><a href="#自动创建赋值对象" class="headerlink" title="自动创建赋值对象"></a>自动创建赋值对象</h2><p><code>ctrl+alt+v</code></p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul><li>双击<code>Shift</code>：<a href="https://www.jetbrains.com/help/idea/searching-everywhere.html"> Search Everywhere</a></li><li><code>Ctrl+Shift+A</code>：<a href="https://www.jetbrains.com/help/idea/searching-everywhere.html#find_action"> Find Action</a></li><li><code>Alt+Enter</code>：<a href="https://www.jetbrains.com/help/idea/intention-actions.html"> Show Context Actions</a></li><li><code>F2</code>：<a href="https://www.jetbrains.com/help/idea/navigating-through-the-source-code.html#navigate-errors-warnings">Navigate between code issues</a></li><li><code>Shift+F2</code>：Jump to the next or previous highlighted error.</li><li></li></ul><h2 id="查看类继承关系"><a href="#查看类继承关系" class="headerlink" title="查看类继承关系"></a>查看类继承关系</h2><p><code>Ctrl</code> + <code>H</code></p><h2 id="查看当前类的所有方法"><a href="#查看当前类的所有方法" class="headerlink" title="查看当前类的所有方法"></a>查看当前类的所有方法</h2><p><code>Alt</code>+<code>7</code></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/WVvpFZTeYqr42Md.png" alt="image-20220111214348709" style="zoom: 50%;" /><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/lSQbNAdLPBEx1na.png" alt="image-20220111214410413" style="zoom:50%;" />]]></content>
    
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis基础篇</title>
    <link href="/2022/01/11/Mybatis%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/01/11/Mybatis%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p><a href="https://mybatis.net.cn/index.html">简介</a></p><p>mybatiis是一款持久层框架，支持自定义SQL、存储过程以及高级映射。让开发者只关注SQL语句本身，不用关注繁杂的注册驱动、等额外的代码。</p><p>MyBatis 可以通过</p><ul><li>简单的 XML </li><li>注解</li></ul><p>来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>导入mybatis jar包或者maven中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果用的mysql，则需要导入mysql驱动依赖，根据版本修改version</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2 id="创建User-class、UserDao-class"><a href="#创建User-class、UserDao-class" class="headerlink" title="创建User.class、UserDao.class"></a>创建User.class、UserDao.class</h2><p>User.class：User对象类，属性对应数据库t_user表中的字段</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String uId;<br>    <span class="hljs-keyword">private</span> String uName;<br>    <span class="hljs-keyword">private</span> String money;<br>    <span class="hljs-comment">//....get set toString省略，此处应有</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>UserDao.class：接口类，有两个方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    User <span class="hljs-title function_">selectUser</span><span class="hljs-params">(String id)</span>;<br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="从-XML-中构建-SqlSessionFactory"><a href="#从-XML-中构建-SqlSessionFactory" class="headerlink" title="从 XML 中构建 SqlSessionFactory"></a>从 XML 中构建 SqlSessionFactory</h2><h3 id="1-mybatis配置文件"><a href="#1-mybatis配置文件" class="headerlink" title="1. mybatis配置文件"></a>1. mybatis配置文件</h3><p>在resource下新建mybatis-config.xml文件</p><p>environments：环境</p><p>mappers：配置mapper文件资源路径</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///user_db?allowPublicKeyRetrieval=true<span class="hljs-symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;top/nexur/Dao/mapper/UserDaoMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-创建UserDao的映射"><a href="#2-创建UserDao的映射" class="headerlink" title="2. 创建UserDao的映射"></a>2. 创建UserDao的映射</h3><p>两种方式都可以实现，貌似注解更省心。但当sql语句多且长时，注解就显得力不从心。</p><h4 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h4><p>一个接口类对应一个xml映射</p><blockquote><p>namespace:命名空间的作用有两个，一个是利用更长的全限定名来将不同的语句隔离开来，同时也实现了你上面见到的接口绑定。就算你觉得暂时用不到接口绑定，你也应该遵循这里的规定，以防哪天你改变了主意。 长远来看，只要将命名空间置于合适的 Java 包命名空间之中，你的代码会变得更加整洁，也有利于你更方便地使用 MyBatis。</p><p><strong>命名解析：</strong>为了减少输入量，MyBatis 对所有具有名称的配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。</p><ul><li>全限定名（比如 “com.mypackage.MyMapper.selectAllThings）将被直接用于查找及使用。</li><li>短名称（比如 “selectAllThings”）如果全局唯一也可以作为一个单独的引用。 如果不唯一，有两个或两个以上的相同名称（比如 “com.foo.selectAllThings” 和 “com.bar.selectAllThings”），那么使用时就会产生“短名称不唯一”的错误，这种情况下就必须使用全限定名。</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;top.nexur.Dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;top.nexur.Pojo.User&quot;</span>&gt;</span><br>        select * from t_user where uid = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;top.nexur.Pojo.User&quot;</span>&gt;</span><br>        select * from t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.mybatis.example;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlogMapper</span> &#123;<br>  <span class="hljs-meta">@Select(&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;)</span><br>  Blog <span class="hljs-title function_">selectBlog</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-pom-xml配置xml资源加载路径"><a href="#3-pom-xml配置xml资源加载路径" class="headerlink" title="3. pom.xml配置xml资源加载路径"></a>3. pom.xml配置xml资源加载路径</h3><p>为了使项目编译时，将非resource下的xml配置文件也加入配置中，需要对pom.xml进行额外配置。加入如下build项。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/Java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/*.java<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.* <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-t-user表结构和数据"><a href="#4-t-user表结构和数据" class="headerlink" title="4. t_user表结构和数据"></a>4. t_user表结构和数据</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220330060408022.png" alt="image-20220330060408022"></p><h3 id="5-新建测试类（SqlSessionFactory"><a href="#5-新建测试类（SqlSessionFactory" class="headerlink" title="5. 新建测试类（SqlSessionFactory"></a>5. 新建测试类（SqlSessionFactory</h3><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession()) &#123;<br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserDao.class);<br>    <span class="hljs-comment">//Blog blog = (Blog) session.selectOne(&quot;org.mybatis.example.BlogMapper.selectBlog&quot;, 101); </span><br>    <span class="hljs-comment">//或者用</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.selectUser(<span class="hljs-string">&quot;1&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><p>user &#x3D; User{uId&#x3D;’1’, uName&#x3D;’zhang’, money&#x3D;’1000’}</p><p>正确查出数据库数据。</p><h3 id="6-未提及事项及遇到的问题"><a href="#6-未提及事项及遇到的问题" class="headerlink" title="6. 未提及事项及遇到的问题"></a>6. 未提及事项及遇到的问题</h3><ul><li>注意要在pom.xml中配置资源解析路径，否则会提示xxx.xml资源文件未找到</li><li>注意数据库驱动版本</li><li>一个mapper中的namespace对应一个接口类；select id唯一，重复会报错已有映射；resultType要全路径，不然识别不了类</li><li>通常开发中，实体类对象的属性和数据表中的字段并非一一对应，此时可以配置映射来解决。</li></ul><h3 id="不使用-XML-构建-SqlSessionFactory"><a href="#不使用-XML-构建-SqlSessionFactory" class="headerlink" title="不使用 XML 构建 SqlSessionFactory"></a>不使用 XML 构建 SqlSessionFactory</h3><p>可以不使用xml配置，例子如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DataSourceFactory.getBlogDataSource(); <span class="hljs-comment">//DataSourceFactory需要自己或者使用框架实现的容器</span><br><span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">transactionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTransactionFactory</span>();<br><span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Environment</span>(<span class="hljs-string">&quot;development&quot;</span>, transactionFactory, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MysqlDataSource</span>());<br><span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(environment);<br>configuration.addMapper(UserDao.class);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(configuration);<br></code></pre></div></td></tr></table></figure><h1 id="作用域和生命周期"><a href="#作用域和生命周期" class="headerlink" title="作用域和生命周期"></a>作用域和生命周期</h1><h2 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h2><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p><h2 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h2><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。 下面的示例就是一个确保 SqlSession 关闭的标准模式：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession()) &#123;<br>  <span class="hljs-comment">// 应用逻辑代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>在所有代码中都遵循这种使用模式，可以保证所有数据库资源都能被正确地关闭。</p><h2 id="映射器实例"><a href="#映射器实例" class="headerlink" title="映射器实例"></a>映射器实例</h2><p>映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的。虽然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃。 映射器实例并不需要被显式地关闭。尽管在整个请求作用域保留映射器实例不会有什么问题，但是你很快会发现，在这个作用域上管理太多像 SqlSession 的资源会让你忙不过来。 因此，最好将映射器放在方法作用域内。就像下面的例子一样：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession()) &#123;<br>  <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(BlogMapper.class);<br>  <span class="hljs-comment">// 应用逻辑代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h1><h2 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h2><p>属性可以在外部进行配置，并可以进行动态替换。可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dev_user&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p><ul><li>首先读取在 properties 元素体内指定的属性。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ul><p>因此，通过方法参数传递的属性具有最高优先级，resource&#x2F;url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>从 MyBatis 3.4.2 开始，可以为占位符指定一个默认值。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username:ut_user&#125;&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 如果属性 &#x27;username&#x27; 没有被配置，&#x27;username&#x27; 属性的值将为 &#x27;ut_user&#x27; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>特性默认关闭， 要添加一个特性开启：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 启用默认值特性 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h2><p>MyBatis 中极为重要的调整设置，会改变Mybatis的运行时行为。</p><h2 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>可为Java类型设置一个缩写的别名，仅用于XML配置。类似一个字符串替换效果</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;top.nexur.Pojo.User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>也可以配置一个包，MyBatis会在包下搜索需要的Java Bean，例如</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;to.nexur.Pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>每一个在包 <code>to.nexur.Pojo</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>to.nexur.Pojo.User</code> 的别名为 <code>user</code>；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;User&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="类型处理器（typeHandlers）"><a href="#类型处理器（typeHandlers）" class="headerlink" title="类型处理器（typeHandlers）"></a>类型处理器（typeHandlers）</h2><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。</p><table><thead><tr><th align="left">类型处理器</th><th align="left">Java 类型</th><th align="left">JDBC 类型</th></tr></thead><tbody><tr><td align="left"><code>BooleanTypeHandler</code></td><td align="left"><code>java.lang.Boolean</code>, <code>boolean</code></td><td align="left">数据库兼容的 <code>BOOLEAN</code></td></tr><tr><td align="left"><code>ByteTypeHandler</code></td><td align="left"><code>java.lang.Byte</code>, <code>byte</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>BYTE</code></td></tr><tr><td align="left"><code>ShortTypeHandler</code></td><td align="left"><code>java.lang.Short</code>, <code>short</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>SMALLINT</code></td></tr><tr><td align="left"><code>IntegerTypeHandler</code></td><td align="left"><code>java.lang.Integer</code>, <code>int</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>INTEGER</code></td></tr><tr><td align="left"><code>LongTypeHandler</code></td><td align="left"><code>java.lang.Long</code>, <code>long</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>BIGINT</code></td></tr><tr><td align="left"><code>FloatTypeHandler</code></td><td align="left"><code>java.lang.Float</code>, <code>float</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>FLOAT</code></td></tr><tr><td align="left"><code>DoubleTypeHandler</code></td><td align="left"><code>java.lang.Double</code>, <code>double</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>DOUBLE</code></td></tr><tr><td align="left"><code>BigDecimalTypeHandler</code></td><td align="left"><code>java.math.BigDecimal</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>DECIMAL</code></td></tr><tr><td align="left"><code>...</code></td><td align="left"><code>...</code></td><td align="left"><code>...</code></td></tr></tbody></table><h2 id="事务管理器（transactionManager）"><a href="#事务管理器（transactionManager）" class="headerlink" title="事务管理器（transactionManager）"></a>事务管理器（transactionManager）</h2><h1 id="XML-映射器"><a href="#XML-映射器" class="headerlink" title="XML 映射器"></a>XML 映射器</h1><p>MyBatis 的真正强大在于它的语句映射，映射器的 XML 文件就显得相对简单，减少使用成本，让用户能更专注于 SQL 代码。</p><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>cache</code> – 该命名空间的缓存配置。</li><li><code>cache-ref</code> – 引用其它命名空间的缓存配置。</li><li><code>resultMap</code> – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。</li><li><del>parameterMap – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。</del></li><li><code>sql</code> – 可被其它语句引用的可重用语句块。</li><li><code>insert</code> – 映射插入语句。</li><li><code>update</code> – 映射更新语句。</li><li><code>delete</code> – 映射删除语句。</li><li><code>select</code> – 映射查询语句。</li></ul><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>查询语句是mybatis中最常用的元素之一。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPerson&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;hashmap&quot;</span>&gt;</span><br>  SELECT * FROM PERSON WHERE ID = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>语句名是selectPerson，接受的参数类型是int(Integer)，并返回一个HashMap类型的对象，键是列名，值是结果行中的对应值。参数<code>#&#123;id&#125;</code>是预处理占位符，类似于</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 近似的 JDBC 代码，非 MyBatis 代码...</span><br><span class="hljs-type">String</span> <span class="hljs-variable">selectPerson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM PERSON WHERE ID=?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(selectPerson);<br>ps.setInt(<span class="hljs-number">1</span>,id);<br></code></pre></div></td></tr></table></figure><h3 id="Select-元素的属性"><a href="#Select-元素的属性" class="headerlink" title="Select 元素的属性"></a>Select 元素的属性</h3><p>允许配置很多属性对每条语句行为细节控制</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;select<br>  id=<span class="hljs-string">&quot;selectPerson&quot;</span><br>  parameterType=<span class="hljs-string">&quot;int&quot;</span><br>  parameterMap=<span class="hljs-string">&quot;deprecated&quot;</span><br>  resultType=<span class="hljs-string">&quot;hashmap&quot;</span><br>  resultMap=<span class="hljs-string">&quot;personResultMap&quot;</span><br>  flushCache=<span class="hljs-string">&quot;false&quot;</span><br>  useCache=<span class="hljs-string">&quot;true&quot;</span><br>  timeout=<span class="hljs-string">&quot;10&quot;</span><br>  fetchSize=<span class="hljs-string">&quot;256&quot;</span><br>  statementType=<span class="hljs-string">&quot;PREPARED&quot;</span><br>  resultSetType=<span class="hljs-string">&quot;FORWARD_ONLY&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left">parameterMap</td><td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td></tr><tr><td align="left"><code>resultType</code></td><td align="left">期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>resultMap</code></td><td align="left">对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td align="left"><code>useCache</code></td><td align="left">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>fetchSize</code></td><td align="left">这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>resultSetType</code></td><td align="left">FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。</td></tr><tr><td align="left"><code>databaseId</code></td><td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr><tr><td align="left"><code>resultOrdered</code></td><td align="left">这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：<code>false</code>。</td></tr><tr><td align="left"><code>resultSets</code></td><td align="left">这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。</td></tr></tbody></table><h2 id="insert-update-和-delete"><a href="#insert-update-和-delete" class="headerlink" title="insert, update 和 delete"></a>insert, update 和 delete</h2><p>数据变更语句 insert，update 和 delete 的实现非常接近：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuthor&quot;</span>&gt;</span><br>  insert into Author (id,username,password,email,bio)<br>  values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthor&quot;</span>&gt;</span><br>  update Author set<br>    username = #&#123;username&#125;,<br>    password = #&#123;password&#125;,<br>    email = #&#123;email&#125;,<br>    bio = #&#123;bio&#125;<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteAuthor&quot;</span>&gt;</span><br>  delete from Author where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="Insert-Update-Delete-元素的属性"><a href="#Insert-Update-Delete-元素的属性" class="headerlink" title="Insert, Update, Delete 元素的属性"></a>Insert, Update, Delete 元素的属性</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left"><code>parameterMap</code></td><td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>useGeneratedKeys</code></td><td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="left"><code>keyProperty</code></td><td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="left"><code>keyColumn</code></td><td align="left">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="left"><code>databaseId</code></td><td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr></tbody></table><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>之前的语句都使用了简单的参数形式，如果 User 类型的参数对象传递到了语句中，会查找 id、username 和 password 属性，然后将它们的值传入预处理语句的参数中。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  insert into users (id, username, password)<br>  values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>和 MyBatis 的其它部分一样，参数也可以指定一个特殊的数据类型。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">#&#123;property,javaType=int,jdbcType=NUMERIC&#125;<br></code></pre></div></td></tr></table></figure><p>对象是一个 <code>HashMap</code>。这个时候，需要显式指定 <code>javaType</code> 来确保正确的类型处理器（<code>TypeHandler</code>）被使用。</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">#&#123;age,javaType=<span class="hljs-type">int</span>,jdbcType=<span class="hljs-type">NUMERIC</span>,typeHandler=MyTypeHandler&#125;<br></code></pre></div></td></tr></table></figure><p>设置 <code>numericScale</code> 指定小数点后保留的位数。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">#&#123;height,javaType=<span class="hljs-type">double</span>,jdbcType=NUMERIC,numericScale=<span class="hljs-number">2</span>&#125;<br></code></pre></div></td></tr></table></figure><p>尽管上面这些选项很强大，但<strong>大多时候，只须简单指定属性名</strong>，顶多要为可能为空的列指定 <code>jdbcType</code>，其他的事情交给 MyBatis 自己去推断就行了。</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">#&#123;firstName&#125;</span><br><span class="hljs-meta">#&#123;middleInitial,jdbcType=VARCHAR&#125;</span><br><span class="hljs-meta">#&#123;lastName&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><p>用 <code>#&#123;&#125;</code> 参数语法时，MyBatis 会创建 <code>PreparedStatement</code> 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。</p><p>有时你就是想直接在 SQL 语句中直接插入一个不转义的字符串。 比如 ORDER BY 子句</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">ORDER</span> <span class="hljs-title">BY</span> $&#123;columnName&#125;<br></code></pre></div></td></tr></table></figure><p>这样MyBatis 就不会修改或转义该字符串了。</p><p>当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。 举个例子，如果你想 <code>select</code> 一个表任意一列的数据时，不需要这样写：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">long</span> id)</span>;<br><br><span class="hljs-meta">@Select(&quot;select * from user where name = #&#123;name&#125;&quot;)</span><br>User <span class="hljs-title function_">findByName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span>;<br><br><span class="hljs-meta">@Select(&quot;select * from user where email = #&#123;email&#125;&quot;)</span><br>User <span class="hljs-title function_">findByEmail</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;email&quot;)</span> String email)</span>;<br><br><span class="hljs-comment">// 其它的 &quot;findByXxx&quot; 方法</span><br></code></pre></div></td></tr></table></figure><p>而是可以只写这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span><br>User <span class="hljs-title function_">findByColumn</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;column&quot;)</span> String column, <span class="hljs-meta">@Param(&quot;value&quot;)</span> String value)</span>;<br></code></pre></div></td></tr></table></figure><h2 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h2><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p><p>假如一个Pojo类User，基于 JavaBean 的规范，这个类有 3 个属性：id，username 和 hashedPassword。这些属性会对应到 select 语句中的列名。<br>这样的一个 JavaBean 可以被映射到 <code>ResultSet</code>，就像映射到 <code>HashMap</code> 一样简单。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.someapp.model.User&quot;</span>&gt;</span><br>  select id, username, hashedPassword<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="类别名"><a href="#类别名" class="headerlink" title="类别名"></a>类别名</h3><p>类型别名是你的好帮手。使用它们，你就可以不用输入类的全限定名了。比如：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-config.xml 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.someapp.model.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- SQL 映射 XML 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  select id, username, hashedPassword<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM笔记</title>
    <link href="/2022/01/10/JVM%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/JVM%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringClound笔记</title>
    <link href="/2022/01/10/SpringClound%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/SpringClound%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SpingClound"><a href="#SpingClound" class="headerlink" title="SpingClound"></a>SpingClound</h1><h1 id="1-微服务"><a href="#1-微服务" class="headerlink" title="1. 微服务"></a>1. 微服务</h1><h1 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">https://github.com/alibaba/nacos.git<br></code></pre></div></td></tr></table></figure><p>下载后解压，进入bin目录执行启动命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">单独启动命令</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">windows</span><br>startup.cmd -m standalone<br><span class="hljs-meta prompt_">#</span><span class="language-bash">linux</span><br>sh startup.sh -m standalone<br></code></pre></div></td></tr></table></figure><ul><li><p>*Param ‘serviceName’ is illegal, serviceName is blank</p><p>配置<code>spring.application.name</code>值</p></li></ul><h1 id="2-SpringCloud入门"><a href="#2-SpringCloud入门" class="headerlink" title="2. SpringCloud入门"></a>2. SpringCloud入门</h1><p>接着创建数据库<br>然后接着去sqlyog直接我们的操作，在左侧root上右键建立数据库：<br>字符集选utf8mb4，他能兼容utf8且能解决一些乱码的问题。分别<br>建立了下面数据库</p><p>gulimall_oms<br>gulimall_pms<br>gulimall_sms<br>gulimall_ums<br>gulimall_wms</p><p>所有的数据库数据再复杂也不建立外键，因为在电商系统里，数据量大，<br>做外键关联很耗性能。</p><h1 id="3-Restful"><a href="#3-Restful" class="headerlink" title="3. Restful"></a>3. Restful</h1><h1 id="4-Eureka"><a href="#4-Eureka" class="headerlink" title="4. Eureka"></a>4. Eureka</h1><h1 id="5-Ribbon"><a href="#5-Ribbon" class="headerlink" title="5. Ribbon"></a>5. Ribbon</h1><h1 id="6-Feign"><a href="#6-Feign" class="headerlink" title="6. Feign"></a>6. Feign</h1><h1 id="7-HyStrix"><a href="#7-HyStrix" class="headerlink" title="7. HyStrix"></a>7. HyStrix</h1><h1 id="8-Zuul路由网关"><a href="#8-Zuul路由网关" class="headerlink" title="8. Zuul路由网关"></a>8. Zuul路由网关</h1><h1 id="9-SpringCloud-config-git"><a href="#9-SpringCloud-config-git" class="headerlink" title="9. SpringCloud config: git"></a>9. SpringCloud config: git</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot笔记</title>
    <link href="/2022/01/10/SpringBoot%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p><strong>@Autowired</strong></p><p><a href="https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring">文档</a></p><blockquote><p>从 Spring 2.5 开始，该框架引入了注解驱动的<em>依赖注入</em>。此功能的主要注释是*@Autowired* <em>。</em> <strong>它允许 Spring 解析协作 bean 并将其注入到我们的 bean 中。</strong></p></blockquote><blockquote><p>启用注解注入后，<strong>我们可以对属性、设置器和构造器使用自动装配</strong>。</p></blockquote><p><strong>四个Bean注解对应四层，作用相同</strong></p><p>@Component</p><p>@Repository</p><p>@Service</p><p>@Controller</p><h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><ol><li>@SpringBootApplication</li><li>@EnableAutoConfiguration</li><li>@Import(AutoConfigurationImportSelector.class)</li><li>public String[] selectImports()</li><li>protected AutoConfigurationEntry getAutoConfigurationEntry()</li><li>protected List<String> getCandidateConfigurations()</li><li>protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass()</li><li>public static List<String> loadFactoryNames()</li><li>private static Map&lt;String, List<String>&gt; loadSpringFactories()</li><li>public static final String FACTORIES_RESOURCE_LOCATION &#x3D; “META-INF&#x2F;spring.factories”;</li></ol><ul><li>xxxxAutoConfiguration…向容器种自动配置组件。由@…On…进行条件过滤</li><li>xxxxProperties 自动配置类，装配配置文件中的自定义内容</li></ul><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><ul><li>springboot-boot-dependencies: 核心依赖在父工程中</li><li>在引入SprinBoot依赖时，不需要指定版本，就因为有这些版本仓库</li></ul><h2 id="启动器（starter）"><a href="#启动器（starter）" class="headerlink" title="启动器（starter）"></a>启动器（starter）</h2><h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p>SpringBoot是在Spring的基础上简化Spring配置，内置了Tomcat Web服务器，快速整合第三方框架</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="1-配置文件强大之处："><a href="#1-配置文件强大之处：" class="headerlink" title="1. 配置文件强大之处："></a>1. 配置文件强大之处：</h2><h3 id="通过配置文件，修改自动配置的默认值"><a href="#通过配置文件，修改自动配置的默认值" class="headerlink" title="通过配置文件，修改自动配置的默认值"></a>通过配置文件，修改自动配置的默认值</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration()</span> <span class="hljs-comment">//表示这是一个配置类</span><br><span class="hljs-meta">@EnableConfigurationProperties(CodecProperties.class)</span> <span class="hljs-comment">//自动配置属性，值为</span><br><span class="hljs-comment">//CodecProperties.class</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.codec&quot;)</span> <span class="hljs-comment">//配置绑定，可以在配置文件修改该属性，达到自动修改自动配置的属性的目的</span><br><br><span class="hljs-meta">@ConditionalOnClass()</span> <span class="hljs-comment">//判断条件，条件不吻合则配置不生效</span><br><br></code></pre></div></td></tr></table></figure><p>解释：</p><p>xxxxAutoConfiguration.class提供默认配置。能通过配置文件修改的默认值，即通过某个xxxProperties.class来和配置文件绑定， 就可以使用自定义的配置。</p><h2 id="2-yaml给实体类赋值"><a href="#2-yaml给实体类赋值" class="headerlink" title="2. yaml给实体类赋值"></a>2. yaml给实体类赋值</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span> <span class="hljs-comment">//类注解,默认配置文件</span><br></code></pre></div></td></tr></table></figure><p>代替 </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Vaule(&quot;张三&quot;)</span><span class="hljs-comment">//属性注解</span><br><span class="hljs-meta">@Vaule(&quot;16&quot;)</span><br><span class="hljs-comment">//...</span><br></code></pre></div></td></tr></table></figure><h2 id="3-加载自定义配置文件"><a href="#3-加载自定义配置文件" class="headerlink" title="3. 加载自定义配置文件"></a>3. 加载自定义配置文件</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(value = &quot;classpath:xxx.properties&quot;)</span> <span class="hljs-comment">//类注解，加载自定义配置文件</span><br><br><span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span> <span class="hljs-comment">//属性注解</span><br></code></pre></div></td></tr></table></figure><h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><p>要解决的问题：</p><ul><li>导入静态资源</li><li>首页</li><li>JSP，模板引擎Thymeleaf</li><li>装配扩展SpringMVC</li><li>增删改查</li><li>拦截器</li><li>国际化 （中英文切换）</li></ul><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>看源码配置：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    addResourceHandler(registry, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>        registration.addResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.servletContext != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ServletContextResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(<span class="hljs-built_in">this</span>.servletContext, SERVLET_LOCATION);<br>            registration.addResourceLocations(resource);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果自定义了静态资源路径，则不适用默认配置。否则使用如下配置：</p><h3 id="引入静态文件的方式："><a href="#引入静态文件的方式：" class="headerlink" title="引入静态文件的方式："></a>引入静态文件的方式：</h3><ol><li><p>WebJars：访问方式：localhost:8080&#x2F;webjars&#x2F;</p></li><li><p>resources文件夹xia ：访问：localhost:8080&#x2F;</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br><span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> &#125;;<br></code></pre></div></td></tr></table></figure><p>优先级：resources &gt; static &gt; public</p><p>借鉴用处：</p><ul><li>public：js等公共资源</li><li>static：图片等静态资源</li><li>resources：用户上传的文件</li></ul></li></ol><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>读源码。在静态资源页面新建<code>index.html</code>即可。</p><p>在templates目录下的所有页面只能通过Controller跳转</p><h2 id="templates模板引擎-thymeleaf"><a href="#templates模板引擎-thymeleaf" class="headerlink" title="templates模板引擎 (thymeleaf)"></a>templates模板引擎 (thymeleaf)</h2><p><strong>依赖</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--Thymeleaf--&gt;<br>&lt;dependency&gt;<br>   &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;<br>   &lt;artifactId&gt;thymeleaf-spring5&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>   &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;<br>   &lt;artifactId&gt;thymeleaf-extras-java8time&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>导入依赖后，必然有对应的xxxxProperties：public class ThymeleafProperties{}：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">DEFAULT_ENCODING</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br></code></pre></div></td></tr></table></figure><p><strong>使用：</strong></p><ol><li><p>在<code>DEFAULT_PREFIX</code>路径下，新建一个<code>DEFAULT_SUFFIX</code>后缀的文件<code>test.html</code>。</p></li><li><p>新建controller</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在templates目录下的所有页面只能通过Controller跳转</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>浏览器访问<code>http://localhost:8080/test</code>，发现通过controller正常访问templates下的文件。</p></li></ol><p><strong>理解</strong>：在导入thymeleaf依赖后，在处理templates下的路径时，对相应的controller的String类型返回值自动增加前缀后缀，使得正确访问html页面。</p><h2 id="SpringMVC-※"><a href="#SpringMVC-※" class="headerlink" title="SpringMVC ※"></a>SpringMVC ※</h2><p>SpringBoot中，有非常多的xxxxConfiguration帮助我们进行扩展，要特别注意。</p><h2 id="增删改查（CRUD"><a href="#增删改查（CRUD" class="headerlink" title="增删改查（CRUD"></a>增删改查（CRUD</h2><h2 id="拦截器（登录拦截例子"><a href="#拦截器（登录拦截例子" class="headerlink" title="拦截器（登录拦截例子"></a>拦截器（登录拦截例子</h2><ol><li>MyMvcConfig实现WebMvcConfigurer</li><li>MyMvcConfig覆写addInterceptors(InterceptorRegistry registry)方法</li><li>registry.addInterceptor(new MyHandlerInterceptor())注册一个HandlerInterceptor来拦截和放行</li><li>MyHandlerInterceptor实现HandlerInterceptor接口，主要实现什么时候拦截，什么时候放行</li></ol><p>例子：</p><p>MyHandlerInterceptor.class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*通过session获取用户id，判断用户是否登录进行拦截重定向请求</span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);<br>        <span class="hljs-keyword">if</span> (loginUser == <span class="hljs-literal">null</span>) &#123;<br>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;没有权限，请先登录&quot;</span>);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/index.html&quot;</span>).forward(request, response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>MyMvcConfig.(InterceptorRegistry registry)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>    registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandlerInterceptor</span>())<br>            .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<span class="hljs-comment">//拦截的路径</span><br>            .excludePathPatterns(<span class="hljs-string">&quot;/index.html&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>, <span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/js/**&quot;</span>, <span class="hljs-string">&quot;/img/**&quot;</span>);<span class="hljs-comment">//放行的路径</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><h3 id="配置I18n文件"><a href="#配置I18n文件" class="headerlink" title="配置I18n文件"></a><strong>配置I18n文件</strong></h3><p><strong>i18n</strong>：internationalization </p><ol><li>resource下新建i18n文件夹</li><li>i18n下新建<img src="C:\Users\k\AppData\Roaming\Typora\typora-user-images\image-20220127145253900.png" alt="image-20220127145253900" style="zoom: 50%;" /></li></ol><h3 id="自定义LocaleResolver组件"><a href="#自定义LocaleResolver组件" class="headerlink" title="自定义LocaleResolver组件"></a>自定义LocaleResolver组件</h3><h3 id="注入Spring容器"><a href="#注入Spring容器" class="headerlink" title="注入Spring容器"></a>注入Spring容器</h3><h1 id="数据库（Data"><a href="#数据库（Data" class="headerlink" title="数据库（Data"></a>数据库（Data</h1><p>导入JDBC和MYSQL依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jdbc--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mysql--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>配置mysql：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.31.40:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></div></td></tr></table></figure><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p>Spring实现的Bean，方便的进行数据操作的模板Bean。</p><p>示例：</p><p>没有实体类时获取数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/allDatabases&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">allDatabases</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;show databases&quot;</span>;<br>        List&lt;Map&lt;String, Object&gt;&gt; list =  jdbcTemplate.queryForList(sql);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>实体类获取数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM mybatis.user&quot;</span>;<br>    List&lt;User&gt; list =  jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowMapper</span>&lt;User&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> User <span class="hljs-title function_">mapRow</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> rowNum)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>), rs.getString(<span class="hljs-string">&quot;username&quot;</span>), rs.getString(<span class="hljs-string">&quot;password&quot;</span>));<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>新增</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;INSERT INTO mybatis.user(&#x27;username&#x27;, &#x27;password&#x27;) VALUES (&#x27;zhangsan&#x27;, &#x27;123&#x27;)&quot;</span>;<br>    jdbcTemplate.update(sql);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;insert is ok!&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>修改</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;update/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE mybatis.user SET username=?, password=? WHERE id =?&quot;</span>;<br>    Object[] objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, id&#125;;<br>    jdbcTemplate.update(sql, objects);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update is OK!&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>删除</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE FROM mybatis.user WHERE id = ?&quot;</span>;<br>    jdbcTemplate.update(sql, id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete is OK!&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="DRUID"><a href="#DRUID" class="headerlink" title="DRUID"></a>DRUID</h2><p>alibaba开源平台下的一个数据库连接池</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jdbc--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mysql--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--DRUID--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--log4j2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.31.40:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span><br><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>      <span class="hljs-comment">########## 连接池 配置 ##########</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-comment"># 配置初始化大小、最小、最大</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">minIdle:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment"># 配置获取连接等待超时的时间(单位：毫秒)</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">2000</span><br>      <span class="hljs-comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">600000</span><br>      <span class="hljs-attr">max-evictable-idle-time-millis:</span> <span class="hljs-number">900000</span><br>      <span class="hljs-comment"># 用来测试连接是否可用的SQL语句,默认值每种数据库都不相同,这是mysql</span><br>      <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">select</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用</span><br>      <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的</span><br>      <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用</span><br>      <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle</span><br>      <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，</span><br>      <span class="hljs-comment"># 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，</span><br>      <span class="hljs-comment"># 可以把这个数值配置大一些，比如说100</span><br>      <span class="hljs-attr">maxOpenPreparedStatements:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment"># 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作</span><br>      <span class="hljs-attr">keepAlive:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># Spring 监控，利用aop 对指定接口的执行时间，jdbc数进行记录</span><br>      <span class="hljs-attr">aop-patterns:</span> <span class="hljs-string">&quot;com.springboot.template.dao.*&quot;</span><br>      <span class="hljs-comment">########### 启用内置过滤器（第一个 stat必须，否则监控不到SQL）##########</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j2</span><br>      <span class="hljs-comment"># 自己配置监控统计拦截的filter</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-comment"># 开启druiddatasource的状态监控</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">db-type:</span> <span class="hljs-string">mysql</span><br>          <span class="hljs-comment"># 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中</span><br>          <span class="hljs-attr">log-slow-sql:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">slow-sql-millis:</span> <span class="hljs-number">2000</span><br>        <span class="hljs-comment"># 日志监控，使用slf4j 进行日志输出</span><br>        <span class="hljs-attr">slf4j:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">statement-log-error-enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">statement-create-after-log-enabled:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">statement-close-after-log-enabled:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">result-set-open-after-log-enabled:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">result-set-close-after-log-enabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment">########## 配置WebStatFilter，用于采集web关联监控的数据 ##########</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>                   <span class="hljs-comment"># 启动 StatFilter</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/*</span>                 <span class="hljs-comment"># 过滤所有url</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span> <span class="hljs-comment"># 排除一些不必要的url</span><br>        <span class="hljs-attr">session-stat-enable:</span> <span class="hljs-literal">true</span>       <span class="hljs-comment"># 开启session统计功能</span><br>        <span class="hljs-attr">session-stat-max-count:</span> <span class="hljs-number">1000</span>    <span class="hljs-comment"># session的最大个数,默认100</span><br>      <span class="hljs-comment">########## 配置StatViewServlet（监控页面），用于展示Druid的统计信息 ##########</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>                   <span class="hljs-comment"># 启用StatViewServlet</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/druid/*</span>           <span class="hljs-comment"># 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">false</span>              <span class="hljs-comment"># 不允许清空统计数据,重新计算</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-number">1</span>            <span class="hljs-comment"># 配置监控页面访问密码</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">allow:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>           <span class="hljs-comment"># 允许访问的地址，如果allow没有配置或者为空，则允许所有访问</span><br>        <span class="hljs-attr">deny:</span> <br></code></pre></div></td></tr></table></figure><p><a href="http://127.0.0.1:8081/druid">监控后台</a></p><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p>一个持久层框架</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Dao层</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;SELECT * FROM user&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Select(&quot;SELECT * FROM user WHERE id = #&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;INSERT INTO mybatis.user(username, password) VALUES (&#x27;zhangsan&#x27;, &#x27;123&#x27;)&quot;)</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Update(&quot;UPDATE mybatis.user SET username=#&#123;username&#125;, password=#&#123;password&#125; WHERE id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(Integer id, String username, String password)</span>;<br><br>    <span class="hljs-meta">@Delete(&quot;DELETE FROM mybatis.user WHERE id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>controller层调用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/get&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> userDao.getUsers();<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    userDao.deleteUserById(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete is OK!&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="SpringSecurity（安全"><a href="#SpringSecurity（安全" class="headerlink" title="SpringSecurity（安全"></a>SpringSecurity（安全</h1><p>web开发中，安全第一位。过滤器、拦截器可以实现。SpringSecurity是一个安全方面的框架</p><p>非功能性需求</p><p>漏洞、隐私泄露</p><p>Shrio\Security：很像、名字不一样，解决认证和授权问题</p><h2 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h2><ul><li>WebsecurityConfigurerAdapter：自定义Security安全策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式，</li></ul><p>SpringSecurity主要目标时“认证”和”授权“。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Security--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2.配置类"></a>2.配置类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>       <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeHttpRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br>        <span class="hljs-comment">//没有权限默认到登录页</span><br>        http.formLogin();<br>        http.csrf().disable();  <span class="hljs-comment">//防止跨站脚本攻击功能</span><br>        <span class="hljs-comment">//开启注销功能，跳到首页</span><br>        http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">//开启记住我功能 cookie</span><br>        http.rememberMe();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication()<br>                <span class="hljs-comment">//springSecurity 5.0+ 需要加密密码</span><br>                .passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>())<br>                .withUser(<span class="hljs-string">&quot;1&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;1&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>).and()<br>                .withUser(<span class="hljs-string">&quot;2&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;1&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>).and()<br>                .withUser(<span class="hljs-string">&quot;3&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;1&quot;</span>)).roles(<span class="hljs-string">&quot;vip3&quot;</span>).and()<br>                .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;1&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>, <span class="hljs-string">&quot;vip2&quot;</span>, <span class="hljs-string">&quot;vip3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Shrio"><a href="#Shrio" class="headerlink" title="Shrio"></a>Shrio</h1><p>Apache Shrio 是一个安全框架，既可以用在JavaEE、也可以用在JavaSE。可以完成认证、授权、加密、会话管理，Web集成、缓存等</p><h1 id="分布式开发"><a href="#分布式开发" class="headerlink" title="分布式开发"></a>分布式开发</h1><h1 id="接口文档：Swagger2"><a href="#接口文档：Swagger2" class="headerlink" title="接口文档：Swagger2"></a>接口文档：Swagger2</h1><h1 id="8-任务调度"><a href="#8-任务调度" class="headerlink" title="8. 任务调度"></a>8. 任务调度</h1><h1 id="9-SprintSecurity-Shiro"><a href="#9-SprintSecurity-Shiro" class="headerlink" title="9. SprintSecurity: Shiro"></a>9. SprintSecurity: Shiro</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记</title>
    <link href="/2022/01/10/Java%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/10/Java%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java笔记"><a href="#Java笔记" class="headerlink" title="Java笔记"></a>Java笔记</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="1-重载"><a href="#1-重载" class="headerlink" title="1 重载"></a>1 重载</h3><p>方法重载：具有多个同名方法称为方法的重载。前提是不同方法之间的参数列表互不相同，例如参数个数、参数顺序、参数类型都可以算做不同的参数列表。返回值不同不能作为重载的依据。</p><p>注意：构造方法也可以重载。无参构造方法执行时，类内部没有执行初始化的属性将执行默认初始化。</p><h3 id="2-封装"><a href="#2-封装" class="headerlink" title="2 封装"></a>2 封装</h3><p>封装：将类的属性设置为private，再设置public方法。外部通过调用public方法获取或修改privae属性。</p><p>优势：加强权限控制。</p><p>劣势：代码繁琐（可通过插件，自动在编译时加上默认get\set方法，省去人工编写的工作量以及类代码更简洁）。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String className;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    Animal(String className, <span class="hljs-type">int</span> age)&#123;<br>        <span class="hljs-built_in">this</span>.className = className;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClassName</span><span class="hljs-params">(String className)</span>&#123;<br>        <span class="hljs-built_in">this</span>.className = className;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClassName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.className;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-继承"><a href="#3-继承" class="headerlink" title="3 继承"></a>3 继承</h3><p>一个类继承另一个类的所有属性及方法称为继承。Java只支持单继承（C++支持多继承），避免了菱形继承。</p><p>Animal.java:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is animal speaking!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Cat.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        animal.speak();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">This <span class="hljs-keyword">is</span> <span class="hljs-keyword">animal</span> speaking!<br></code></pre></div></td></tr></table></figure><p>解释：虽然Cat类未定义<code>speak()</code>方法，但继承了Animal类，所以也继承了Animal的<code>speak()</code>方法。</p><h4 id="3-1-重写"><a href="#3-1-重写" class="headerlink" title="3.1 重写"></a>3.1 重写</h4><p>子类重写父类方法称为重写。</p><p>建议：重写方法加上<code>@Override</code>注解，编译器将自动检查是否重写方法，避免人为的编码错误。</p><p>Cat.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is cat speaking!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">This <span class="hljs-keyword">is</span> <span class="hljs-keyword">cat</span> speaking!<br></code></pre></div></td></tr></table></figure><p>解释：由于子类重写了父类方法，调用时将调用子类方法。</p><h4 id="3-2-子类方法重载"><a href="#3-2-子类方法重载" class="headerlink" title="3.2 子类方法重载"></a>3.2 子类方法重载</h4><p>Cat.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;This is cat speaking!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">(String info)</span>&#123;<br>        System.out.println(info);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ……</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>cat.speak(<span class="hljs-string">&quot;A cat is speak!&quot;</span>);<br><span class="hljs-comment">// ……</span><br></code></pre></div></td></tr></table></figure><p>output:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">A cat is speak!<br></code></pre></div></td></tr></table></figure><p>解释：子类方法可以与重写的方法重载，也可以与父类方法重载。</p><p>总结：</p><ul><li>当子类方法名和参数列表与父类方法一致时，子类方法将重写父类方法。</li><li>子类方法名和父类方法名一致，但参数列表不一致时，子类方法将与父类方法触发重载（无论子类是否重写父类方法）。</li></ul><h3 id="4-多态"><a href="#4-多态" class="headerlink" title="4 多态"></a>4 多态</h3><p>编译多态：方法重载。</p><p>运行多态：类指针指向父类或子类实例。</p><h4 id="4-1-指向子类实例"><a href="#4-1-指向子类实例" class="headerlink" title="4.1 指向子类实例"></a>4.1 指向子类实例</h4><p>new：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br></code></pre></div></td></tr></table></figure><p>方法调用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">animal.speak();<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">This is cat speaking!<br></code></pre></div></td></tr></table></figure><p>解释：虽然animal是Animal类，但animal是Cat实例，调用方法时将优先调用子类复写的方法。</p><p><del><strong>调用子类重载的方法：</strong></del></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">animal.speak(<span class="hljs-string">&quot;A cat is speak!&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>报错：’speak()’ in ‘多态.Animal’ cannot be applied to ‘(java.lang.String)’</p><p>解释：虽然animal是cat实例，但是animal对象。调用Cat的重载方法时，在animal中找不到该方法，IDE报错。</p><p>总结：对象指向子类实例时，只能调用父类有的方法和属性，优先调用子类重写的方法和属性。</p><h4 id="4-2-指向父类实例"><a href="#4-2-指向父类实例" class="headerlink" title="4.2 指向父类实例"></a>4.2 指向父类实例</h4><p>new:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat)<span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br></code></pre></div></td></tr></table></figure><p>方法调用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">cat.speak(<span class="hljs-string">&quot;A cat is speak!&quot;</span>);  <span class="hljs-comment">//报错：找不到speak的重载方法</span><br></code></pre></div></td></tr></table></figure><p>运行报错：Animal cannot be cast to Cat</p><p>解释：虽然加上<code>(Cat)</code>强转类型在编码阶段不报错，但在运行时候提示无法强制类型转换。（原因不明）</p><h3 id="5-接口"><a href="#5-接口" class="headerlink" title="5 接口"></a>5 接口</h3><ul><li>接口不能拥有private属性、private抽象方法</li><li>接口的属性必须在声明时实例化</li><li>接口抽象方法不能拥有<code>body</code>（不能在接口实现抽象方法）</li><li>接口可省略<code>public</code>关键字，即接口的属性和方法只能是<code>public</code>类型</li><li>接口如要像实例化类一样实例化接口，须得在实例化时带上<code>&#39;body</code>(即实例化同时实现接口)）</li><li>接口可以像类一样使用多态</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机科学导论</title>
    <link href="/2022/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA/"/>
    <url>/2022/01/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机科学导论"><a href="#计算机科学导论" class="headerlink" title="计算机科学导论"></a>计算机科学导论</h1><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>图灵模型：一种设计，并不是实体机器。指所有计算都能通过输入数据，黑盒计算，得到输出数据</p><p>输入数据-&gt;黑盒-&gt;输出数据。  </p><h1 id="冯诺依曼模型"><a href="#冯诺依曼模型" class="headerlink" title="冯诺依曼模型"></a>冯诺依曼模型</h1><p>现代计算机结构。输入和输出数据都储存在寄存器&#x2F;内存上。计算器分四个子系统：输入输出模块、寄存器模块、计算模块、控制模块。</p><h1 id="计算机发展历史"><a href="#计算机发展历史" class="headerlink" title="计算机发展历史"></a>计算机发展历史</h1><p>1.机械计算器</p><p>2.电子计算机发展历程：</p><ul><li>真空管时代计算机</li><li>晶体管时代计算机</li><li>集成电路时代</li><li>大规模集成电路</li></ul><h1 id="数字系统"><a href="#数字系统" class="headerlink" title="数字系统"></a>数字系统</h1><p>十进制、二进制、十六进制、八进制以及之间的转换</p><h1 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h1><ul><li>位</li><li>位模式（数据流）</li><li>字节</li><li>字</li></ul><p>存储数字到计算机中，需要将数字转换成二进制数字。有两个问题需要解决：</p><ul><li>如何存储数字的符号</li><li>如何显示十进制小数</li></ul><h2 id="存储整数"><a href="#存储整数" class="headerlink" title="存储整数"></a>存储整数</h2><ol><li>无符号表示法：存储无符号整数0和正整数时用。</li><li>符号+绝对值表示法：最左边0表示正号，1表示负号，其后跟的值为绝对值。有+0和-0。</li><li>二进制补码表示法：用来存储n位有符号整数。最左位为负权，其后为正权，相加为表示的有符号数值。范围(2^-n-1)<ul><li>反码</li><li>补码</li><li>溢出</li></ul></li></ol><h2 id="存储实数"><a href="#存储实数" class="headerlink" title="存储实数"></a>存储实数</h2><ol><li><p>浮点表示法：符号位 + 移位量 + 定点数。</p><ul><li><p>规范化：由于二进制的科学计数法整数位始终是1，并没有被存储，是隐含的。</p></li><li><p>符号</p></li><li><p>指数</p></li><li><p>尾数</p></li></ul></li><li><p>余码：在浮点表示法上，尾数可以作为无符号整数存储，指数是有符号的数。而在余码系统中，指数通过加上一个移位量，将所有的有符号数的值向右偏移，使得指数是无符号整数存储。</p></li><li><p>IEEE标准</p><ul><li><p>单精度浮点数：符号（1）+ 指数（8）+ 尾数（23）</p><p>余127码。</p></li><li><p>双精度浮点数：符号（1）+ 指数（11）+ 尾数（52）</p><p>余1023码。</p></li></ul></li><li><p>存储零：约定符号、指数、尾数都设为0</p></li></ol><h2 id="3-3-存储文本"><a href="#3-3-存储文本" class="headerlink" title="3.3 存储文本"></a>3.3 存储文本</h2><ol><li>ASCII</li><li>Unicode：如今ASCII码是Unicode的一部分</li></ol><p>截断错误：由于存储小数时需要转换成浮点数存储，尾数只有23位，之后的精度会截断丢失，在需要精密的科研中如航天这种错误是致命的。</p><h2 id="存储音频"><a href="#存储音频" class="headerlink" title="存储音频"></a>存储音频</h2><p>音频区别于可量化的数字文本，是不可数的，随时间变化的实体。只能在每一时刻度量声音的密度，没有无限内存，故度量有间隔。</p><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>在模拟信号点上选择数量有限的点并记录下来，每秒多少个点（采样率）</p><h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><p>将样本的值截取为最接近的整数值的一个过程。</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h2 id="存储图像"><a href="#存储图像" class="headerlink" title="存储图像"></a>存储图像</h2><h3 id="光栅图"><a href="#光栅图" class="headerlink" title="光栅图"></a>光栅图</h3><p>一张照片由模拟数据组成，数据密度随空间变化。图片采样过程称扫描，样本称为像素</p><h4 id="解析度"><a href="#解析度" class="headerlink" title="解析度"></a>解析度</h4><p>每英寸方块内像素的密度</p><h4 id="色彩深度"><a href="#色彩深度" class="headerlink" title="色彩深度"></a>色彩深度</h4><h3 id="矢量图"><a href="#矢量图" class="headerlink" title="矢量图"></a>矢量图</h3><p>并不存储图像的像素的位模式，存储的是图像被分解成的几何图形的数学公式。也成为几何图形或面向对象图形</p><p>不能存储精细的图像</p><h2 id="存储视频"><a href="#存储视频" class="headerlink" title="存储视频"></a>存储视频</h2><p>视频是图像在时间上的表示，连续的帧播放形成运动的图像。视频通常是被压缩存储的</p><h1 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h1><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p>位层次上的逻辑运算：与、或、非、异或</p><h3 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h3><p>把一个位模式上的指定位复位、置位、反转：</p><ul><li>AND：复位（置零）</li><li>OR：置位（置1）</li><li>XOR：反转</li></ul><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><p><strong>算术移位</strong>：左移-整除2、右移-乘2</p><p><strong>逻辑移位</strong>：左移-最低位丢失，右移-最高位丢失</p><p><strong>循环移位</strong>：</p><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>加减乘除，适用于整数和实数</p><h3 id="整数加减"><a href="#整数加减" class="headerlink" title="整数加减"></a>整数加减</h3><p><strong>补码减法</strong>：将减法转化成加法，加上减数的补</p><h3 id="实数加减"><a href="#实数加减" class="headerlink" title="实数加减"></a>实数加减</h3><p>去规范化，对其指数、尾数移位，相加</p><h1 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h1><p>简单计算机由中央处理单元、主存储器、输入输出设备三个部分组成。</p><h2 id="中央处理单元"><a href="#中央处理单元" class="headerlink" title="中央处理单元"></a>中央处理单元</h2><ul><li>算术逻辑单元（ALU）：对程序进行逻辑、移位、算术运算。</li><li>控制单元（PC、IR）：保存当前正在执行的指令的地址。当前指令执行完成后，计数器自动加1，指向下一条指令的地址。</li><li>寄存器组：存放临时数据的高速独立存储单元<ol><li>数据寄存器</li><li>指令寄存器</li><li>程序计数器</li></ol></li></ul><h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><p><strong>地址空间</strong>：每个存储单元都有唯一标识，称为地址。数据以称为字的位组的形式在内存中传入传出。字可以是8、16、32、64位，对应1字节、2字节、4字节、8字节。</p><p><strong>存储器类型</strong>：</p><ul><li><p>RAM：随机存取存储器，与ROM区别是用户能读写RAM。<strong>易失性</strong>：计算机断电后，存储在RAM中的信息将被删除</p><ul><li>SRAM：静态RAM，触发器门电路保存数据，通电数据始终存在，不需要刷新。速度快、价格贵</li><li>DRAM：动态RAM，技术使用电容器。如果电容器充电，状态为1；电容器放电状态为0；电容器会随时间漏电，内存单元需要周期性刷新。速度较慢，价格便宜。</li></ul></li><li><p>ROM：只读存储器。用户只能读。非易失性。用ROM来存储开机时运行的程序。</p><ul><li>PROM：可编程只读存储器。</li><li>EPROM：可擦除可编程只读存储器。</li><li>EEPROM：电可擦除可编程只读存储器。</li></ul></li></ul><p><strong>存储器层次结构</strong>：快&amp;不便宜&amp;少。慢&amp;便宜&amp;多。</p><p><strong>高速缓存存储器</strong>：比主存快，比cpu内的寄存器慢。容量较小，置于CPU与主存之间。根据地址键做缓存用。</p><h2 id="输入输出子系统"><a href="#输入输出子系统" class="headerlink" title="输入输出子系统"></a>输入输出子系统</h2><p><strong>非存储设备</strong>：键盘、监视器等，能与CPU通信，但不能存储数据。</p><p><strong>存储设备</strong>：</p><ul><li>磁介质存储设备：磁盘（硬盘），由一张张磁片叠加而成。通过每片磁片的磁头读写磁介质表面来进行读取和存储。</li><li>磁带：</li><li>光存储设备：CD（光盘）</li></ul><h2 id="子系统互联"><a href="#子系统互联" class="headerlink" title="子系统互联"></a>子系统互联</h2><p>三个子系统通常由称为<strong>总线</strong>的三组线路连在一起。</p><ul><li>数据总线：由多根线组成，每根线传输一个位的数据。数量由计算机字的大小。（假如计算机是32位，4字节字长，需要32根线的数据总线，一次能传送32位数据）</li><li>地址总线：允许访问存储器中的字。线数量取决于存储空间的大小</li><li>控制总线：在计算机和内存之间传送信息。线数量取决于计算机所需要的控制命令的总数。</li></ul><p><strong>IO设备的连接</strong>：IO设备不能直接与连接内存和CPU的总线相连，</p><ol><li>本质不同，</li><li>速度比CPU和内存慢得多</li></ol><p>必须要有中介来处理这种差异，通过一种被称为输入&#x2F;输出控制器或接口的器件连接到总线上。</p><p><strong>控制器</strong>：</p><ul><li>SCSI：</li><li>火线：</li><li>USB：</li><li>HDMI：</li><li></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>黑皮书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2022/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1>]]></content>
    
    
    
    <tags>
      
      <tag>黑皮书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2022/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/01/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>黑皮书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客专题训练</title>
    <link href="/2021/12/07/%E7%89%9B%E5%AE%A2%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/"/>
    <url>/2021/12/07/%E7%89%9B%E5%AE%A2%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/482545564/answer/2111485550">专题链接</a></p><h1 id="1-顺序结构习题"><a href="#1-顺序结构习题" class="headerlink" title="1. 顺序结构习题"></a>1. 顺序结构习题</h1><p><a href="https://ac.nowcoder.com/acm/contest/18839">牛客竞赛语法入门班顺序结构习题 </a></p><h2 id="1001这是一道签到题（多行字符串）"><a href="#1001这是一道签到题（多行字符串）" class="headerlink" title="1001这是一道签到题（多行字符串）"></a>1001这是一道签到题（多行字符串）</h2><p>可用<code>\</code>拼接多行字符串</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;zhe\n\</span><br><span class="hljs-string">shi\n\</span><br><span class="hljs-string">yi\n\</span><br><span class="hljs-string">dao\n\</span><br><span class="hljs-string">qian\n\</span><br><span class="hljs-string">dao\n\</span><br><span class="hljs-string">ti&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1002排列式（全排列）"><a href="#1002排列式（全排列）" class="headerlink" title="1002排列式（全排列）"></a>1002排列式（全排列）</h2><p>c++可以用<code>next_permutation()</code>生成下一个排列</p><p>思路一：暴力遍历所有数字判断是否有重复数字，再检查式子是否符合乘法等式，超时。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> cnt);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = x; a; a/=<span class="hljs-number">10</span>) ++cnt[a%<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i ++) <span class="hljs-keyword">if</span> (cnt[i] != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>; <br>    <span class="hljs-type">int</span> a = x / <span class="hljs-number">100000</span>;<br>    <span class="hljs-type">int</span> b = x % <span class="hljs-number">100000</span> / <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">int</span> c = x % <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">if</span> (a == b * c) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = %d x %d\n&quot;</span>, a, b, c);<br>    b = x % <span class="hljs-number">100000</span> / <span class="hljs-number">10000</span>;<br>    c = x % <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">if</span> (a == b * c) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = %d x %d\n&quot;</span>, a, b, c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">100000000</span>; i &lt; <span class="hljs-number">1000000000</span>; i ++) <span class="hljs-built_in">check</span>(i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>思路二：全排列，AC</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">9</span>;<br><span class="hljs-type">int</span> a[N] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; j) ans = ans * <span class="hljs-number">10</span> + a[i++];<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-type">int</span> b = <span class="hljs-built_in">get</span>(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br>    <span class="hljs-type">int</span> c = <span class="hljs-built_in">get</span>(<span class="hljs-number">6</span>, <span class="hljs-number">9</span>);<br>    <span class="hljs-keyword">if</span> (a == b * c) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = %d x %d\n&quot;</span>, a, b, c);<br>    b = <span class="hljs-built_in">get</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>    c = <span class="hljs-built_in">get</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>);<br>    <span class="hljs-keyword">if</span> (a == b * c) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = %d x %d\n&quot;</span>, a, b, c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (idx == N) <span class="hljs-built_in">check</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = idx; i &lt; N; i ++)<br>&#123;<br><span class="hljs-built_in">swap</span>(a[idx], a[i]);<br><span class="hljs-built_in">dfs</span>(idx + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">swap</span>(a[idx], a[i]);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法三：<code>next_permutation()</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">9</span>;<br><span class="hljs-type">int</span> a[N] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) ans = ans * <span class="hljs-number">10</span> + a[i++];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-type">int</span> b = <span class="hljs-built_in">get</span>(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br>    <span class="hljs-type">int</span> c = <span class="hljs-built_in">get</span>(<span class="hljs-number">6</span>, <span class="hljs-number">9</span>);<br>    <span class="hljs-keyword">if</span> (a == b * c) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = %d x %d\n&quot;</span>, a, b, c);<br>    b = <span class="hljs-built_in">get</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>    c = <span class="hljs-built_in">get</span>(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>);<br>    <span class="hljs-keyword">if</span> (a == b * c) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d = %d x %d\n&quot;</span>, a, b, c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">next_permutation</span>(a, a + <span class="hljs-number">9</span>))  <span class="hljs-built_in">check</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1003小飞机"><a href="#1003小飞机" class="headerlink" title="1003小飞机"></a>1003小飞机</h2><p>直接打印。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;     **     &quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;     **     &quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;    *  *    &quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;    *  *    &quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1004学姐的”Helloworld-”"><a href="#1004学姐的”Helloworld-”" class="headerlink" title="1004学姐的”Helloworld!”"></a>1004学姐的”Helloworld!”</h2><p>看清楚，一般复制字符串过来比较稳妥。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Helo word!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1005乘法表"><a href="#1005乘法表" class="headerlink" title="1005乘法表"></a>1005乘法表</h2><p>格式输出</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d*%d= %d &quot;</span>,j, i, j * i);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1006KiKi学程序设计基础"><a href="#1006KiKi学程序设计基础" class="headerlink" title="1006KiKi学程序设计基础"></a>1006KiKi学程序设计基础</h2><p>注意输出\n的时候要转义<code>\</code></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;printf(\&quot;Hello world!\\n\&quot;);\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cout &lt;&lt; \&quot;Hello world!\&quot; &lt;&lt; endl;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1007疫情死亡率"><a href="#1007疫情死亡率" class="headerlink" title="1007疫情死亡率"></a>1007疫情死亡率</h2><p>百分号输出用<code>%%</code></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f%%\n&quot;</span>, b*<span class="hljs-number">100.0</span> / a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1008爱因斯坦的名言"><a href="#1008爱因斯坦的名言" class="headerlink" title="1008爱因斯坦的名言"></a>1008爱因斯坦的名言</h2><p>难受，cout输出%时不需要转义</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\&quot;Genius is 1% inspiration and 99% perspiration.\&quot;&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1009字符串输出1-0"><a href="#1009字符串输出1-0" class="headerlink" title="1009字符串输出1.0"></a>1009字符串输出1.0</h2><p>没啥。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Welcome to ACM / ICPC!&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Welcome to ACM / ICPC!&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Welcome to ACM / ICPC!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1010牛牛学说话之-整数"><a href="#1010牛牛学说话之-整数" class="headerlink" title="1010牛牛学说话之-整数"></a>1010牛牛学说话之-整数</h2><p>整数输入输出</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    cout &lt;&lt; a;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1011牛牛学说话之-浮点数"><a href="#1011牛牛学说话之-浮点数" class="headerlink" title="1011牛牛学说话之-浮点数"></a>1011牛牛学说话之-浮点数</h2><p>浮点数输入输出</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1012牛牛学加法"><a href="#1012牛牛学加法" class="headerlink" title="1012牛牛学加法"></a>1012牛牛学加法</h2><p>加法。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1013牛牛学除法"><a href="#1013牛牛学除法" class="headerlink" title="1013牛牛学除法"></a>1013牛牛学除法</h2><p>整除</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a / b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1014牛牛学取余"><a href="#1014牛牛学取余" class="headerlink" title="1014牛牛学取余"></a>1014牛牛学取余</h2><p>取余</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a % b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1015浮点除法"><a href="#1015浮点除法" class="headerlink" title="1015浮点除法"></a>1015浮点除法</h2><p>整数浮点除法。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, a * <span class="hljs-number">1.0</span> / b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1016计算带余除法"><a href="#1016计算带余除法" class="headerlink" title="1016计算带余除法"></a>1016计算带余除法</h2><p>整除、求余</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, a / b, a % b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1017K蝴蝶"><a href="#1017K蝴蝶" class="headerlink" title="1017K蝴蝶"></a>1017K蝴蝶</h2><p>减法</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a - b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1018水题再次来袭：明天星期几？"><a href="#1018水题再次来袭：明天星期几？" class="headerlink" title="1018水题再次来袭：明天星期几？"></a>1018水题再次来袭：明天星期几？</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    cout &lt;&lt; a % <span class="hljs-number">7</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1019开学？"><a href="#1019开学？" class="headerlink" title="1019开学？"></a>1019开学？</h2><p>好难</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-type">int</span> c = (a + (b % <span class="hljs-number">7</span>));<br>    cout &lt;&lt;  (c &gt; <span class="hljs-number">7</span> ? c % <span class="hljs-number">7</span> : c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1020helloworld"><a href="#1020helloworld" class="headerlink" title="1020helloworld"></a>1020helloworld</h2><p>如果用char数组，用范围遍历会多出一个以<code>\0</code>字符结尾的输出，</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string a = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : a) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, i + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1021a-b"><a href="#1021a-b" class="headerlink" title="1021a+b"></a>1021a+b</h2><p><code>%x</code>输出十六进制数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, a + b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1022整数的个位"><a href="#1022整数的个位" class="headerlink" title="1022整数的个位"></a>1022整数的个位</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a % <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1023整数的十位"><a href="#1023整数的十位" class="headerlink" title="1023整数的十位"></a>1023整数的十位</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1024反向输出一个四位数"><a href="#1024反向输出一个四位数" class="headerlink" title="1024反向输出一个四位数"></a>1024反向输出一个四位数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-keyword">while</span> (a) &#123;<br>        cout &lt;&lt; a % <span class="hljs-number">10</span>;<br>        a /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1025总成绩和平均分计算"><a href="#1025总成绩和平均分计算" class="headerlink" title="1025总成绩和平均分计算"></a>1025总成绩和平均分计算</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-type">double</span> sum = a + b + c;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f %.2f&quot;</span>, sum, sum / <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1026计算平均成绩"><a href="#1026计算平均成绩" class="headerlink" title="1026计算平均成绩"></a>1026计算平均成绩</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i ++) &#123;<br>        cin &gt;&gt; x;<br>        sum += x;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1f&quot;</span>, sum * <span class="hljs-number">1.0</span> / <span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1027牛牛学梯形"><a href="#1027牛牛学梯形" class="headerlink" title="1027牛牛学梯形"></a>1027牛牛学梯形</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> u, d, h;<br>    cin &gt;&gt; u &gt;&gt; d &gt;&gt; h;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, (u + d) * h / <span class="hljs-number">2.0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1028牛牛学矩形"><a href="#1028牛牛学矩形" class="headerlink" title="1028牛牛学矩形"></a>1028牛牛学矩形</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d&quot;</span>, (a + b) * <span class="hljs-number">2</span>, a * b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1029牛牛学立体"><a href="#1029牛牛学立体" class="headerlink" title="1029牛牛学立体"></a>1029牛牛学立体</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d&quot;</span>, (a * b + b * c + a * c) * <span class="hljs-number">2</span>, a * b * c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1030计算三角形的周长和面积"><a href="#1030计算三角形的周长和面积" class="headerlink" title="1030计算三角形的周长和面积"></a>1030计算三角形的周长和面积</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-type">double</span> d = a + b + c;<br>    <span class="hljs-type">double</span> p = d / <span class="hljs-number">2.0</span>;<br>    <span class="hljs-type">double</span> s = <span class="hljs-built_in">sqrt</span>(p * (p - a) * (p - b) * (p - c));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;circumference=%.2f area=%.2f&quot;</span>, d, s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1031你能活多少秒"><a href="#1031你能活多少秒" class="headerlink" title="1031你能活多少秒"></a>1031你能活多少秒</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> s = <span class="hljs-number">3.156</span> * <span class="hljs-number">1e7</span>;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    cout &lt;&lt; <span class="hljs-number">1LL</span> * a * s &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1032时间转换"><a href="#1032时间转换" class="headerlink" title="1032时间转换"></a>1032时间转换</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span> h = a / <span class="hljs-number">3600</span>;<br>    <span class="hljs-type">int</span> m = a % <span class="hljs-number">3600</span> / <span class="hljs-number">60</span>;<br>    <span class="hljs-type">int</span> s = a % <span class="hljs-number">60</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, h, m, s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1033温度转换"><a href="#1033温度转换" class="headerlink" title="1033温度转换"></a>1033温度转换</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> f;<br>    cin &gt;&gt; f;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, <span class="hljs-number">5.0</span>/<span class="hljs-number">9</span>*(f - <span class="hljs-number">32</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1034计算机内存"><a href="#1034计算机内存" class="headerlink" title="1034计算机内存"></a>1034计算机内存</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; (n * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> / <span class="hljs-number">4</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1035-NOIP2017-成绩"><a href="#1035-NOIP2017-成绩" class="headerlink" title="1035[NOIP2017]成绩"></a>1035[NOIP2017]成绩</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    cout &lt;&lt; (<span class="hljs-number">0.2</span> * a) + (<span class="hljs-number">0.3</span> * b) + (<span class="hljs-number">0.5</span> * c) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1036KiKi的最高分"><a href="#1036KiKi的最高分" class="headerlink" title="1036KiKi的最高分"></a>1036KiKi的最高分</h2><p>max</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    cout &lt;&lt; <span class="hljs-built_in">max</span>(a, <span class="hljs-built_in">max</span>(b, c)) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1037组队比赛"><a href="#1037组队比赛" class="headerlink" title="1037组队比赛"></a>1037组队比赛</h2><p>贪心</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c, d;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>    <span class="hljs-type">int</span> sum = a + b + c + d;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-built_in">max</span>(a, <span class="hljs-built_in">max</span>(b, <span class="hljs-built_in">max</span>(c, d)));<br>    <span class="hljs-type">int</span> mi =  <span class="hljs-built_in">min</span>(a, <span class="hljs-built_in">min</span>(b, <span class="hljs-built_in">min</span>(c, d)));<br>    cout &lt;&lt; <span class="hljs-built_in">abs</span>((mx + mi) * <span class="hljs-number">2</span> - sum) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1038平方根"><a href="#1038平方根" class="headerlink" title="1038平方根"></a>1038平方根</h2><p>数据量不大，直接暴力了。这题标准做法应该用二分。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (ans * ans &lt;= a) ans ++;<br>    cout &lt;&lt; ans - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1039长方体"><a href="#1039长方体" class="headerlink" title="1039长方体"></a>1039长方体</h2><p>列方程求解</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b , c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-type">int</span> x, y, z;<br>    y = <span class="hljs-built_in">sqrt</span>(a * c / b);<br>    x = a / y;<br>    z = c / y;<br>    cout &lt;&lt; (x + y + z) * <span class="hljs-number">4</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1040使徒袭来"><a href="#1040使徒袭来" class="headerlink" title="1040使徒袭来"></a>1040使徒袭来</h2><p>要看清题目，求的是正实数不是正整数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, <span class="hljs-number">3</span> * <span class="hljs-built_in">pow</span>(n, <span class="hljs-number">1.0</span> / <span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1041白兔的分身术"><a href="#1041白兔的分身术" class="headerlink" title="1041白兔的分身术"></a>1041白兔的分身术</h2><p>思维、看题目！</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">using</span> LL = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    LL n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; n + <span class="hljs-number">1</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1042纸牌"><a href="#1042纸牌" class="headerlink" title="1042纸牌"></a>1042纸牌</h2><p>贪心</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1043Tobaku-Mokushiroku-Kaiji"><a href="#1043Tobaku-Mokushiroku-Kaiji" class="headerlink" title="1043Tobaku Mokushiroku Kaiji"></a>1043Tobaku Mokushiroku Kaiji</h2><p>贪心</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c, d, e, f;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">min</span>(a, e) + <span class="hljs-built_in">min</span>(b, f) + <span class="hljs-built_in">min</span>(c, d);<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1044珂朵莉的假动态仙人掌"><a href="#1044珂朵莉的假动态仙人掌" class="headerlink" title="1044珂朵莉的假动态仙人掌"></a>1044珂朵莉的假动态仙人掌</h2><p>贪心</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (n &gt;= t)<br>    &#123;<br>        n -= t;<br>        t = <span class="hljs-number">3</span> - t;<br>        ans ++;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1045旅游观光"><a href="#1045旅游观光" class="headerlink" title="1045旅游观光"></a>1045旅游观光</h2><p>思维</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>  - <span class="hljs-number">1</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1046-NOIP2002-自由落体"><a href="#1046-NOIP2002-自由落体" class="headerlink" title="1046[NOIP2002]自由落体"></a>1046[NOIP2002]自由落体</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1047挂科"><a href="#1047挂科" class="headerlink" title="1047挂科"></a>1047挂科</h2><p>数学</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, x, y;<br>    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;<br>    cout &lt;&lt; <span class="hljs-built_in">min</span>(x, y) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, (x + y - n)) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1048得不到的爱情"><a href="#1048得不到的爱情" class="headerlink" title="1048得不到的爱情"></a>1048得不到的爱情</h2><p>属实不懂了</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    cout &lt;&lt; <span class="hljs-number">1LL</span> * n * m - n - m &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="2-选择结构习题"><a href="#2-选择结构习题" class="headerlink" title="2. 选择结构习题"></a>2. 选择结构习题</h1><p><a href="https://ac.nowcoder.com/acm/contest/19304">牛客竞赛语法入门班选择结构习题</a> </p><h2 id="A比大小"><a href="#A比大小" class="headerlink" title="A比大小"></a>A比大小</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span> (a == b) cout &lt;&lt; <span class="hljs-string">&#x27;=&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (a &gt; b) cout &lt;&lt; <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (a &lt; b) cout &lt;&lt; <span class="hljs-string">&#x27;&lt;&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="B卡拉兹函数"><a href="#B卡拉兹函数" class="headerlink" title="B卡拉兹函数"></a>B卡拉兹函数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-keyword">if</span> (a &amp; <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-number">3</span> * a + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; a / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="C默契"><a href="#C默契" class="headerlink" title="C默契"></a>C默契</h2><p>这个空格没复制到，wa了几次</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b; <br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span> (a == b) cout &lt;&lt; <span class="hljs-string">&quot;Tacit！&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;No Tacit!&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="D整除判断"><a href="#D整除判断" class="headerlink" title="D整除判断"></a>D整除判断</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b; <br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span> (a % b == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ECSimplemathproblem"><a href="#ECSimplemathproblem" class="headerlink" title="ECSimplemathproblem"></a>ECSimplemathproblem</h2><p>题目没看清</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> x, y;<br>    cin &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-keyword">if</span> (y % x == <span class="hljs-number">0</span>) cout &lt;&lt;x + y;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; y - x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="F吃瓜群众"><a href="#F吃瓜群众" class="headerlink" title="F吃瓜群众"></a>F吃瓜群众</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> w;<br>    cin &gt;&gt; w;<br>    <span class="hljs-keyword">if</span> (w &gt; <span class="hljs-number">2</span> &amp;&amp; w % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;YES, you can divide the watermelon into two even parts.&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO, you can&#x27;t divide the watermelon into two even parts.&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Gjyq跳格子"><a href="#Gjyq跳格子" class="headerlink" title="Gjyq跳格子"></a>Gjyq跳格子</h2><p>思维题</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> w;<br>    cin &gt;&gt; w;<br>    <span class="hljs-keyword">if</span> ((w - <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) cout &lt;&lt; w;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="H小名的回答"><a href="#H小名的回答" class="headerlink" title="H小名的回答"></a>H小名的回答</h2><p>思维</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, n;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;<br>    <span class="hljs-keyword">if</span> (a + b &lt;= n &amp;&amp; (n - a - b) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="I牛妹数"><a href="#I牛妹数" class="headerlink" title="I牛妹数"></a>I牛妹数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">50</span> &amp;&amp; n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;yes&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;no&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="J判断闰年"><a href="#J判断闰年" class="headerlink" title="J判断闰年"></a>J判断闰年</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">if</span> ((n % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> &amp;&amp; n % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) || n % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;yes&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;no&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="K统计数据正负个数"><a href="#K统计数据正负个数" class="headerlink" title="K统计数据正负个数"></a>K统计数据正负个数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x, a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, n = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">while</span> (n --)<br>    &#123;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span>) a ++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) b ++;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;positive:&quot;</span> &lt;&lt; a &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;negative:&quot;</span> &lt;&lt; b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="L小乐乐是否被叫家长"><a href="#L小乐乐是否被叫家长" class="headerlink" title="L小乐乐是否被叫家长"></a>L小乐乐是否被叫家长</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-keyword">if</span> (((a + b + c) / <span class="hljs-number">3.0</span>) &lt; <span class="hljs-number">60</span>) cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="M最大最小值"><a href="#M最大最小值" class="headerlink" title="M最大最小值"></a>M最大最小值</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-built_in">max</span>(a, <span class="hljs-built_in">max</span>(b, c));<br>    <span class="hljs-type">int</span> mi = <span class="hljs-built_in">min</span>(a, <span class="hljs-built_in">min</span>(b, c));<br>    cout &lt;&lt; <span class="hljs-string">&quot;The maximum number is : &quot;</span> &lt;&lt; mx &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The minimum number is : &quot;</span> &lt;&lt; mi &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="N送分题"><a href="#N送分题" class="headerlink" title="N送分题"></a>N送分题</h2><p>有1的话，就加，没有就乘。可以添加括号，意味后面两个可能先加得到的结果更大</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a == <span class="hljs-number">1</span> || b == <span class="hljs-number">1</span>) ? a + b : a * b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; <br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>)<br>        cout &lt;&lt; <span class="hljs-built_in">get</span>(a, <span class="hljs-built_in">get</span>(b, c));<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-built_in">get</span>(<span class="hljs-built_in">get</span>(a, b), c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="O四季"><a href="#O四季" class="headerlink" title="O四季"></a>O四季</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> ym;<br>    cin &gt;&gt; ym;<br>    <span class="hljs-type">int</span> m = ym % <span class="hljs-number">100</span>;<br>    string ans;<br>    <span class="hljs-keyword">if</span> (m &gt;= <span class="hljs-number">3</span> &amp;&amp; m &lt;= <span class="hljs-number">5</span>) ans = <span class="hljs-string">&quot;spring&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &gt;= <span class="hljs-number">6</span> &amp;&amp; m &lt;= <span class="hljs-number">8</span>) ans = <span class="hljs-string">&quot;summer&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &gt;= <span class="hljs-number">9</span> &amp;&amp; m &lt;= <span class="hljs-number">11</span>) ans = <span class="hljs-string">&quot;autumn&quot;</span>;<br>    <span class="hljs-keyword">else</span> ans = <span class="hljs-string">&quot;winter&quot;</span>;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="PB是不是太迟了"><a href="#PB是不是太迟了" class="headerlink" title="PB是不是太迟了"></a>PB是不是太迟了</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> y, m, d;<br>    <span class="hljs-type">char</span> c;<br>    cin &gt;&gt; y &gt;&gt; c &gt;&gt; m &gt;&gt; c &gt;&gt; d;<br>    <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">10</span> || (m == <span class="hljs-number">10</span> &amp;&amp; d &lt; <span class="hljs-number">29</span>)) cout &lt;&lt; <span class="hljs-string">&quot;No. It&#x27;s not too late.&quot;</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;QAQ&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="Q前天是哪天"><a href="#Q前天是哪天" class="headerlink" title="Q前天是哪天"></a>Q前天是哪天</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> y, m, d;<br>    <span class="hljs-type">char</span> c;<br>    cin &gt;&gt; y &gt;&gt; c &gt;&gt; m &gt;&gt; c &gt;&gt; d;<br>    d -= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (d &lt; <span class="hljs-number">1</span>) &#123;<br>        --m;<br>        <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">1</span>) &#123;<br>            m = <span class="hljs-number">12</span>;<br>            --y;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span> || m == <span class="hljs-number">3</span> || m == <span class="hljs-number">5</span> || m == <span class="hljs-number">7</span> || m == <span class="hljs-number">8</span> || m == <span class="hljs-number">10</span> || m == <span class="hljs-number">12</span>) &#123;<br>            d = <span class="hljs-number">31</span> + d;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">4</span> || m == <span class="hljs-number">6</span> || m == <span class="hljs-number">9</span> || m == <span class="hljs-number">11</span>) &#123;<br>            d = <span class="hljs-number">30</span> + d;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span> || (y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; y % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>)) d = <span class="hljs-number">29</span> + d;<br>            <span class="hljs-keyword">else</span> d = <span class="hljs-number">28</span> + d;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%02d-%02d&quot;</span>, y, m, d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="R-L1-2单位换算"><a href="#R-L1-2单位换算" class="headerlink" title="R L1-2单位换算"></a>R L1-2单位换算</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    cout &lt;&lt; a * <span class="hljs-number">12.0</span> *<span class="hljs-number">2.54</span> * <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="S纸牌"><a href="#S纸牌" class="headerlink" title="S纸牌"></a>S纸牌</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="T排队领水"><a href="#T排队领水" class="headerlink" title="T排队领水"></a>T排队领水</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, a, b;<br>    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; <span class="hljs-built_in">min</span>(n - a, b + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="U可编程拖拉机比赛"><a href="#U可编程拖拉机比赛" class="headerlink" title="U可编程拖拉机比赛"></a>U可编程拖拉机比赛</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a = <span class="hljs-built_in">ceil</span>(n * <span class="hljs-number">0.1</span>) - <span class="hljs-built_in">floor</span>(n * <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">int</span> b = a + <span class="hljs-built_in">ceil</span>(n * <span class="hljs-number">0.2</span>) - <span class="hljs-built_in">floor</span>(n * <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">int</span> c = b + <span class="hljs-built_in">ceil</span>(n * <span class="hljs-number">0.3</span>) - <span class="hljs-built_in">floor</span>(n * <span class="hljs-number">0.3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, a, b, c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="V-NOIP2004-不高兴的津津"><a href="#V-NOIP2004-不高兴的津津" class="headerlink" title="V[NOIP2004]不高兴的津津"></a>V[NOIP2004]不高兴的津津</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b; cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span> (a + b &gt;= <span class="hljs-number">8</span> &amp;&amp; a + b &gt; mx) &#123;<br>            mx = a + b;<br>            d = i;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; d;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="W-NOIP2008-ISBN号码"><a href="#W-NOIP2008-ISBN号码" class="headerlink" title="W[NOIP2008]ISBN号码"></a>W[NOIP2008]ISBN号码</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> id = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(s[i])) num += (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * id++;<br>    &#125;<br>    num %= <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">if</span> ((num == <span class="hljs-number">10</span> &amp;&amp; s.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;X&#x27;</span>) || (num == s.<span class="hljs-built_in">back</span>() - <span class="hljs-string">&#x27;0&#x27;</span>))<br>        cout &lt;&lt; <span class="hljs-string">&quot;Right&quot;</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">10</span>) s.<span class="hljs-built_in">back</span>() = <span class="hljs-string">&#x27;X&#x27;</span>;<br>        <span class="hljs-keyword">else</span> s.<span class="hljs-built_in">back</span>() = (<span class="hljs-type">char</span>)(num + <span class="hljs-string">&#x27;0&#x27;</span>);<br>        cout &lt;&lt; s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h1 id="3-循环结构习题"><a href="#3-循环结构习题" class="headerlink" title="3. 循环结构习题"></a>3. 循环结构习题</h1><h2 id="1001上下金字塔"><a href="#1001上下金字塔" class="headerlink" title="1001上下金字塔"></a>1001上下金字塔</h2><p>以中间最长的行，分割成上下两部分，先输出上部分，再输出最长的行，然后是下部分。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = n * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (len - sum) / <span class="hljs-number">2</span>; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sum; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>); <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (len - sum) / <span class="hljs-number">2</span>; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i --)<br>    &#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (len - sum) / <span class="hljs-number">2</span>; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sum; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>); <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (len - sum) / <span class="hljs-number">2</span>; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-built_in">p</span>(n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1002数字三角形"><a href="#1002数字三角形" class="headerlink" title="1002数字三角形"></a>1002数字三角形</h2><p>模拟</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j ++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, t ++);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1003字符金字塔"><a href="#1003字符金字塔" class="headerlink" title="1003字符金字塔"></a>1003字符金字塔</h2><p>每行分四个部分考虑</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> c;<br>    cin &gt;&gt; c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-string">&#x27;A&#x27;</span>; i &lt;= c; i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c - i; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-string">&#x27;A&#x27;</span>; j &lt; i; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, j);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-string">&#x27;A&#x27;</span>; j --) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, j);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1004涂小天与他的画"><a href="#1004涂小天与他的画" class="headerlink" title="1004涂小天与他的画"></a>1004涂小天与他的画</h2><p>麻了</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T --)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        cin &gt;&gt; n; <br>        <br>        <span class="hljs-type">int</span> len = <span class="hljs-number">2</span> * n;<br><span class="hljs-comment">//前  </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / <span class="hljs-number">2</span>; i ++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n / <span class="hljs-number">2</span>; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//      中 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//      后 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / <span class="hljs-number">2</span>; i ++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n - <span class="hljs-number">2</span> * i; j ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1005箭形图案"><a href="#1005箭形图案" class="headerlink" title="1005箭形图案"></a>1005箭形图案</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= (n - i + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>; j ++) cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++) cout &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span>;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++) cout &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span>; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; i --)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= (n - i + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>; j ++) cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++) cout &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span>;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1006牛牛学数列"><a href="#1006牛牛学数列" class="headerlink" title="1006牛牛学数列"></a>1006牛牛学数列</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        ans += (i &amp; <span class="hljs-number">1</span> ? i : -i);<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1007牛牛学数列2"><a href="#1007牛牛学数列2" class="headerlink" title="1007牛牛学数列2"></a>1007牛牛学数列2</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">double</span> ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        ans += <span class="hljs-number">1.0</span> / i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6f&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1008牛牛学数列3"><a href="#1008牛牛学数列3" class="headerlink" title="1008牛牛学数列3"></a>1008牛牛学数列3</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">double</span> ans;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        t += (i &amp; <span class="hljs-number">1</span> ? <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span> : -(<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>));<br>        ans += <span class="hljs-number">1.0</span> / t;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1009牛牛学数列4"><a href="#1009牛牛学数列4" class="headerlink" title="1009牛牛学数列4"></a>1009牛牛学数列4</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        sum += i;<br>        ans += sum;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1010牛牛学数列5"><a href="#1010牛牛学数列5" class="headerlink" title="1010牛牛学数列5"></a>1010牛牛学数列5</h2><p>斐波那契数列</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>, c;<br>    <span class="hljs-keyword">while</span> (--n)<br>    &#123;<br>        c = a + b;<br>        a = b;<br>        b = c;<br>    &#125;<br>    cout &lt;&lt; b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1011牛牛学数列6"><a href="#1011牛牛学数列6" class="headerlink" title="1011牛牛学数列6"></a>1011牛牛学数列6</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>, c = <span class="hljs-number">1</span>, d;<br>    <span class="hljs-keyword">while</span> (--n)<br>    &#123;<br>        d = a + <span class="hljs-number">2</span> * b + c;<br>        a = b;<br>        b = c;<br>        c = d;<br>    &#125;<br>    cout &lt;&lt; a;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1012A-B"><a href="#1012A-B" class="headerlink" title="1012A+B"></a>1012A+B</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b)<br>    &#123;<br>        cout &lt;&lt; a + b &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1013多组输入a-b"><a href="#1013多组输入a-b" class="headerlink" title="1013多组输入a+b"></a>1013多组输入a+b</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b)<br>    &#123;<br>        cout &lt;&lt; a + b &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1014多组输入a-b-II"><a href="#1014多组输入a-b-II" class="headerlink" title="1014多组输入a+b II"></a>1014多组输入a+b II</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b;<br>    <span class="hljs-keyword">while</span> (n -- &amp;&amp; cin &gt;&gt; a &gt;&gt; b)<br>    &#123;<br>        cout &lt;&lt; a + b &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1015多组数据a-b-III"><a href="#1015多组数据a-b-III" class="headerlink" title="1015多组数据a+b III"></a>1015多组数据a+b III</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!a &amp;&amp; !b) <span class="hljs-keyword">break</span>;<br>        cout &lt;&lt; a + b &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1016-NOIP2018-标题统计"><a href="#1016-NOIP2018-标题统计" class="headerlink" title="1016[NOIP2018]标题统计"></a>1016[NOIP2018]标题统计</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    <span class="hljs-built_in">getline</span>(cin, a);<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> c : a)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(c) || <span class="hljs-built_in">isalpha</span>(c)) ans ++;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1017栗酱数数"><a href="#1017栗酱数数" class="headerlink" title="1017栗酱数数"></a>1017栗酱数数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">not4</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (n) &#123;<br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">10</span> == <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">4</span> != <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">not4</span>(i))<br>            cout &lt;&lt; i &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1018有趣的二进制"><a href="#1018有趣的二进制" class="headerlink" title="1018有趣的二进制"></a>1018有趣的二进制</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1019-NOIP2006-数列"><a href="#1019-NOIP2006-数列" class="headerlink" title="1019[NOIP2006]数列"></a>1019[NOIP2006]数列</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1020只能吃土豆的牛牛"><a href="#1020只能吃土豆的牛牛" class="headerlink" title="1020只能吃土豆的牛牛"></a>1020只能吃土豆的牛牛</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1021-NOIP2015-金币"><a href="#1021-NOIP2015-金币" class="headerlink" title="1021[NOIP2015]金币"></a>1021[NOIP2015]金币</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1022托米历险记"><a href="#1022托米历险记" class="headerlink" title="1022托米历险记"></a>1022托米历险记</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1023绩点"><a href="#1023绩点" class="headerlink" title="1023绩点"></a>1023绩点</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1024买铅笔"><a href="#1024买铅笔" class="headerlink" title="1024买铅笔"></a>1024买铅笔</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1025整数个数"><a href="#1025整数个数" class="headerlink" title="1025整数个数"></a>1025整数个数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1026栗酱的文明2"><a href="#1026栗酱的文明2" class="headerlink" title="1026栗酱的文明2"></a>1026栗酱的文明2</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1027黑大火与他的猫"><a href="#1027黑大火与他的猫" class="headerlink" title="1027黑大火与他的猫"></a>1027黑大火与他的猫</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1028-NOIP2000-进制转换"><a href="#1028-NOIP2000-进制转换" class="headerlink" title="1028[NOIP2000]进制转换"></a>1028[NOIP2000]进制转换</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1029素数判断"><a href="#1029素数判断" class="headerlink" title="1029素数判断"></a>1029素数判断</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1030Game"><a href="#1030Game" class="headerlink" title="1030Game"></a>1030Game</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1031-NOIP1999-Cantor表"><a href="#1031-NOIP1999-Cantor表" class="headerlink" title="1031[NOIP1999]Cantor表"></a>1031[NOIP1999]Cantor表</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1032最大的差"><a href="#1032最大的差" class="headerlink" title="1032最大的差"></a>1032最大的差</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1033成绩统计"><a href="#1033成绩统计" class="headerlink" title="1033成绩统计"></a>1033成绩统计</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1034糖果俱乐部"><a href="#1034糖果俱乐部" class="headerlink" title="1034糖果俱乐部"></a>1034糖果俱乐部</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1035数字计数"><a href="#1035数字计数" class="headerlink" title="1035数字计数"></a>1035数字计数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1036热杆上的蚂蚁"><a href="#1036热杆上的蚂蚁" class="headerlink" title="1036热杆上的蚂蚁"></a>1036热杆上的蚂蚁</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1037焦虑的蚂蚁"><a href="#1037焦虑的蚂蚁" class="headerlink" title="1037焦虑的蚂蚁"></a>1037焦虑的蚂蚁</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1038拯救小a"><a href="#1038拯救小a" class="headerlink" title="1038拯救小a"></a>1038拯救小a</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1040YoungManDon’tSayFive"><a href="#1040YoungManDon’tSayFive" class="headerlink" title="1040YoungManDon’tSayFive"></a>1040YoungManDon’tSayFive</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1041魔法数字变换"><a href="#1041魔法数字变换" class="headerlink" title="1041魔法数字变换"></a>1041魔法数字变换</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1042-NOIP2005-陶陶摘苹果"><a href="#1042-NOIP2005-陶陶摘苹果" class="headerlink" title="1042[NOIP2005]陶陶摘苹果"></a>1042[NOIP2005]陶陶摘苹果</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1043-NOIP2004-津津的储蓄计划"><a href="#1043-NOIP2004-津津的储蓄计划" class="headerlink" title="1043[NOIP2004]津津的储蓄计划"></a>1043[NOIP2004]津津的储蓄计划</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1044-NOIP2002-级数求和"><a href="#1044-NOIP2002-级数求和" class="headerlink" title="1044[NOIP2002]级数求和"></a>1044[NOIP2002]级数求和</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1045cayun日常之赏月"><a href="#1045cayun日常之赏月" class="headerlink" title="1045cayun日常之赏月"></a>1045cayun日常之赏月</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1046鹏"><a href="#1046鹏" class="headerlink" title="1046鹏"></a>1046鹏</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1047D博弈与核心能源动力"><a href="#1047D博弈与核心能源动力" class="headerlink" title="1047D博弈与核心能源动力"></a>1047D博弈与核心能源动力</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1048好数"><a href="#1048好数" class="headerlink" title="1048好数"></a>1048好数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="10493和5和7"><a href="#10493和5和7" class="headerlink" title="10493和5和7"></a>10493和5和7</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1050回文对称数"><a href="#1050回文对称数" class="headerlink" title="1050回文对称数"></a>1050回文对称数</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1051数位之和"><a href="#1051数位之和" class="headerlink" title="1051数位之和"></a>1051数位之和</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h2 id="1047D博弈与核心能源动力-1"><a href="#1047D博弈与核心能源动力-1" class="headerlink" title="1047D博弈与核心能源动力"></a>1047D博弈与核心能源动力</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>acm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git仓库拉取、上传失败</title>
    <link href="/2021/12/02/git%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96%E3%80%81%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5/"/>
    <url>/2021/12/02/git%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96%E3%80%81%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>记录一下Git push、pull问题合集。</p><h1 id="1-Please-make-sure-you-have-the-correct-access-rights-and-the-repository-exists"><a href="#1-Please-make-sure-you-have-the-correct-access-rights-and-the-repository-exists" class="headerlink" title="1. Please make sure you have the correct access rights and the repository exists."></a>1. Please make sure you have the correct access rights and the repository exists.</h1><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112021756178.png" alt="image-20211202175611119" style="zoom:50%;" /><h2 id="1-1-原因1：公钥出现问题。"><a href="#1-1-原因1：公钥出现问题。" class="headerlink" title="1.1 原因1：公钥出现问题。"></a>1.1 原因1：公钥出现问题。</h2><p>解决方法：删除来的<code>.ssh</code>文件夹，重新设置好用户名和邮箱后，生成公钥。</p><p>解决步骤：</p><ol><li>删除<code>.ssh</code>,路径在<code>C:\Users\k</code>，k是我的用户名</li></ol><p>​<img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112021758975.png" alt="image-20211202175840934" style="zoom:50%;" /></p><ol start="2"><li><p>重新配置<code>Git</code>用户名和邮箱地址</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global user.name &quot;k&quot; #设置用户名<br>git config --global user.email 1186996418@qq.com#设置邮箱地址<br></code></pre></div></td></tr></table></figure></li><li><p>生成<code>ssh</code>公钥，有三个需要输入的地方，直接回车默认就行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;1186996418@qq.com&quot; #注意邮箱换自己的<br></code></pre></div></td></tr></table></figure> <img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112021802342.png" alt="image-20211202180243285" style="zoom:50%;" /><p>将新生成的<code>C:\Users\k\.ssh\id_rsa.pub</code>内容添加到GitHub的SSH Key</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112021805485.png" alt="image-20211202180521308" style="zoom: 33%;" /></li></ol><p></p><p>当然，我试了，不是这个问题。</p><h2 id="1-2-原因2：DNS服务器"><a href="#1-2-原因2：DNS服务器" class="headerlink" title="1.2 原因2：DNS服务器"></a>1.2 原因2：DNS服务器</h2><p>因为我是换了个热点网络，才出现的这个问题。把自动获取DNS服务器修改为</p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112021822795.png" alt="image-20211202182248770" style="zoom:50%;" /><p>就可以了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git配置</title>
    <link href="/2021/12/02/Git%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2021/12/02/Git%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>惯例：<a href="https://git-scm.com/book/zh/v2"><strong>中文官方文档</strong></a></p><h1 id="1-Git是什么"><a href="#1-Git是什么" class="headerlink" title="1. Git是什么"></a>1. Git是什么</h1><h2 id="1-1-版本控制发展历程："><a href="#1-1-版本控制发展历程：" class="headerlink" title="1.1 版本控制发展历程："></a>1.1 版本控制发展历程：</h2><ol><li><p><strong>本地版本控制系统</strong>：大多数采用简单的数据库来记录文件的历次更新差异。</p><blockquote><p> 最流行的一种叫做<strong>RCS</strong>（工作原理：是在硬盘上保存补丁（文件修订前后的变化）集，通过应用所有的补丁，可以重新计算出各个版本的文件内容。</p></blockquote><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112021512500.png" alt="image-20211202104805398" style="zoom:50%;" /></li><li><p><strong>集中化的版本控制系统</strong>：本地版本控制中，遇到新的问题，即如何让不同系统上的开发者协同工作?集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生</p><p>代表：CVS、SubVersion、Perforce</p><p>特点：有一个单一的集中管理的服务器，保存所有文件的修订版本。客户端连接到这台服务器，取出最新的文件或提交更新。</p></li><li><p><strong>分布式版本控制系统</strong>：</p></li></ol><h1 id="2-初次运行前的配置"><a href="#2-初次运行前的配置" class="headerlink" title="2. 初次运行前的配置"></a>2. 初次运行前的配置</h1><p>git提供一个–config来管理所有配置</p><h2 id="2-1-用户信息"><a href="#2-1-用户信息" class="headerlink" title="2.1 用户信息"></a>2.1 用户信息</h2><p>必要设置</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置用户信息</span><br>git config --global user.name &quot;nexur&quot; #名字<br>git config --global user.email 1186996418@qq.com#邮箱<br></code></pre></div></td></tr></table></figure><h2 id="2-2-文本编辑器"><a href="#2-2-文本编辑器" class="headerlink" title="2.2 文本编辑器"></a>2.2 文本编辑器</h2><p>可选设置：修改<code>core.editor</code>项，可指定文本编辑器。</p><p><strong>Linux:</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Linux</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Emacs</span><br>git config --global core.editor emacs<br></code></pre></div></td></tr></table></figure><p><strong>Windows</strong>：</p><p>必须指定可执行文件的完整路径，例如<code>Sublime Text 3</code>安装路径在<code>&quot;D:\Program Files\Sublime Text 3\sublime_text.exe&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Windows</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Sublime Text 3</span><br>git config --global core.editor &quot;D:\Program Files\Sublime Text 3\sublime_text.exe&quot;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-检查配置信息"><a href="#2-3-检查配置信息" class="headerlink" title="2.3 检查配置信息"></a>2.3 检查配置信息</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --list<br></code></pre></div></td></tr></table></figure><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112020954998.png" alt="image-20211202095425820" style="zoom:50%;" /><blockquote><p>可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：<code>/etc/gitconfig</code> 与 <code>~/.gitconfig</code>）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。</p></blockquote><p>可以通过输入<code>git config &lt;key&gt;</code>： 来检查 Git 的某一项配置</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config user.name<br></code></pre></div></td></tr></table></figure><blockquote><p>由于 Git 会从多个文件中读取同一配置变量的不同值，因此你可能会在其中看到意料之外的值而不知道为什么。 此时，你可以查询 Git 中该变量的 <strong>原始</strong> 值，它会告诉你哪一个配置文件最后设置了该值：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --show-origin rerere.autoUpdate<br></code></pre></div></td></tr></table></figure></blockquote><h2 id="2-4-生成-SSH-公钥"><a href="#2-4-生成-SSH-公钥" class="headerlink" title="2.4 生成 SSH 公钥"></a>2.4 生成 SSH 公钥</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -o<br></code></pre></div></td></tr></table></figure><p>有三处需要输入，直接回车就行</p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础</title>
    <link href="/2021/11/27/MySQL%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/11/27/MySQL%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="安装（迁移）MySQL"><a href="#安装（迁移）MySQL" class="headerlink" title="安装（迁移）MySQL"></a>安装（迁移）MySQL</h1><h2 id="环境（windows"><a href="#环境（windows" class="headerlink" title="环境（windows"></a>环境（windows</h2><p>OS：windows11</p><p>MySQL:mysql-8.0.25</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载MySQL或将旧机器内mysql目录内所有文件复制到新的windows11，然后把bin添加到环境变量。</p><p>然后cmd执行安装指令</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#安装mysql<br>mysqld -install<br></code></pre></div></td></tr></table></figure><h2 id="启动或停止"><a href="#启动或停止" class="headerlink" title="启动或停止"></a>启动或停止</h2><p>启动或停止mysql服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#start<br>net start mysql<br><br>#stop<br>net stop mysql<br></code></pre></div></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>连接mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#登录mysql<br>mysql -u root -p#root 替换成你自己的用户名<br>#指定ip<br>mysql -h localhost -u root -p#适用远程登陆mysql<br></code></pre></div></td></tr></table></figure><h2 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">use mysql;<br>select host,user from user;<br>#这时候发现root用户的host作用域为localhost<br>#将host修改为%，允许所有连接<br>update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;<br>#热更新(flush privileges 命令本质上的作用是将当前user和privilige表中的用户信息/权限设置从mysql库 (MySQL数据库的内置库)中提取到内存里。 MySQL用户数据和权限有修改后，希望在&quot;不重启MySQL服务&quot;的情况下直接生效，那么就需要执行这个命令)<br>flush privileges;<br></code></pre></div></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">USE mysql;#选择数据库<br></code></pre></div></td></tr></table></figure><h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SHOW DATABASES;#显示可用的数据库列表<br>SHOW TABLES;#显示一个数据库内可用的表的列表<br>SHOW COLUMNS FROM user;#显示表列，表名（user）为必须项<br>DESCRIBE user;#是SHOW COLUMNS FROM user;的一种快捷方式<br><br>SHOW ERRORS;#显示服务器错误信息<br>SHOW WARNINGS;#显示服务器警告信息<br></code></pre></div></td></tr></table></figure><blockquote><p>更多命令，可输入’HELP SHOW’查看。</p></blockquote><h1 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h1><h2 id="1-SELECT"><a href="#1-SELECT" class="headerlink" title="1. SELECT"></a>1. SELECT</h2><p>从一个或多个表中检索信息。至少要给出两条信息：</p><ul><li>想选择什么</li><li>从哪里检索</li></ul><p>示例：检索mysql的user列</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">USE school;<br>#基本查询<br>#检索单个列<br>SELECT prod_name FROM products;<br>#检索单个列<br>SELECT prod_id, prod_name, prod_price FROM products;<br>#检索所有列<br>SELECT * FROM products;<br></code></pre></div></td></tr></table></figure><h2 id="2-限制查询结果"><a href="#2-限制查询结果" class="headerlink" title="2. 限制查询结果"></a>2. 限制查询结果</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#返回不同的行DISTINCT<br>#&#x27;DISTINCT&#x27;只返回不同的vend_id的行<br>#&#x27;DISTINCT&#x27;应用于所有而不仅是前置他的列<br>SELECT DISTINCT vend_id FROM products;<br>#限制结果 LIMIT<br>#参数5：不多于5行<br>SELECT prod_name FROM products LIMIT 5;<br>#参数5，5：从第5开始，不多于5行<br>SELECT prod_name FROM products LIMIT 5, 5;<br>#由于容易弄混参数，所以从MySQL 5 开始支持另一种替代的语法,如：从行3开始取4行<br>SELECT prod_name FROM products LIMIT 4 OFFSET 3;<br>#使用完全限定的表名<br>SELECT products.prod_name FROM products;<br></code></pre></div></td></tr></table></figure><h2 id="3-查询排序（ORDER-BY）"><a href="#3-查询排序（ORDER-BY）" class="headerlink" title="3. 查询排序（ORDER BY）"></a>3. 查询排序（ORDER BY）</h2><p> SELECT检索出的数据，可使用ORDER BY字句进行排序。ORDER BY字句取一个或多个列名作为参数。</p><blockquote><p> 允许非检索需要的列进行排序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#单个列排序<br>SELECT prod_name FROM products ORDER BY prod_name;<br><br>#多列排序，优先级从前往后<br>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price, prod_name;<br></code></pre></div></td></tr></table></figure><h2 id="4-指定排序方向（ORDER-BY"><a href="#4-指定排序方向（ORDER-BY" class="headerlink" title="4. 指定排序方向（ORDER BY"></a>4. 指定排序方向（ORDER BY</h2><p>如不指定排序方向，则默认是升序排序（也可指定升序排序， 关键字<code>ASC</code>，通常是不必要的，SELECT默认是升序排序）。</p><p><code>ORDER BY</code>字句为了进行降序排序，必须指定<code>DESC</code>关键字。</p><blockquote><p>需注意：DESC只作用于其前面的单个列</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#单个列,降序排序<br>SELECT prod_name FROM products ORDER BY prod_name DESC;<br>#多列降序排序，优先级从前往后<br>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name DESC;<br>#price降序， name升序<br>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name;<br>#最贵的prod_name<br>SELECT prod_name FROM products ORDER BY prod_price DESC LIMIT 1;<br></code></pre></div></td></tr></table></figure><blockquote><p>使用<code>ORDER BY</code>字句，必须位于<code>FROM</code>字句之后；<code>LIMIT</code>字句必须位于<code>ORDER BY</code>字句</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="rank-over"><a href="#rank-over" class="headerlink" title="rank() over"></a>rank() over</h3><p>排名相同的两名是并列，但是占两个名次，1 1 3 4 4 6这种</p><h3 id="dense-rank-over"><a href="#dense-rank-over" class="headerlink" title="dense_rank() over"></a>dense_rank() over</h3><p>排名相同的两名是并列，共占一个名词，1 1 2 3 3 4这种</p><h3 id="row-number-over"><a href="#row-number-over" class="headerlink" title="row_number() over"></a>row_number() over</h3><p>这个函数不需要考虑是否并列，哪怕根据条件查询出来的数值相同也会进行连续排名 1 2 3 4 5</p><h2 id="5-过滤数据（WHERE"><a href="#5-过滤数据（WHERE" class="headerlink" title="5. 过滤数据（WHERE"></a>5. 过滤数据（WHERE</h2><p>只检索所需数据需指定搜索条件（也称过滤条件）。<code>SELECT</code>语句中，根据<code>WHERE</code>字句中指定的搜索条件进行过滤。<code>WHERE</code>字句在<code>FROM</code>字句后。</p><p><strong><code>WHERE</code>字句操作符</strong>：</p><ul><li><code>=</code></li><li><code>&lt;&gt;</code></li><li><code>!=</code></li><li><code>&lt;</code></li><li><code>&lt;=</code></li><li><code>&gt;</code></li><li><code>&gt;=</code></li><li><code>BETWEEN</code></li><li></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#price = 2.50<br>SELECT prod_name, prod_price FROM products WHERE prod_price = 2.50;<br>#name = &#x27;fuses&#x27;, MYSQL在执行匹配时默认不区分大小写<br>SELECT prod_name, prod_price FROM products WHERE prod_name = &#x27;fuses&#x27;;<br>#price &lt;= 10，小于等于<br>SELECT prod_name, prod_price FROM products WHERE prod_price &lt;= 10;<br>#vend_id &lt;&gt; 1003，不匹配检查<br>SELECT vend_id, prod_name FROM products WHERE vend_id &lt;&gt; 1003;<br>#vend_id != 1003，不匹配检查<br>SELECT vend_id, prod_name FROM products WHERE vend_id != 1003;<br>#prod_price BETWEEN 5 AND 10<br>SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 5 AND 10;<br>#cust_email is NULL<br>SELECT cust_email, cust_id FROM customers WHERE cust_email is NULL;<br></code></pre></div></td></tr></table></figure><blockquote><ul><li>在同时使用将<code>ORDER BY</code>和<code>WHERE</code>字句时，<code>ORDER BY</code>需位于<code>WHERE</code>后。</li><li><code>MYSQL</code>在执行匹配时默认不区分大小写</li><li>值与串类型的列进行比较，值需要限定引号</li><li><code>BETWEEN</code>字句需指定两个值，一个开始，一个结束值</li></ul></blockquote><p><strong>组合<code>WHERE</code>字句</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#AND关键字：逻辑与<br>SELECT prod_id, prod_name, prod_price FROM products WHERE vend_id = 1003 AND prod_price &lt;= 10;<br><br>#OR关键字：逻辑或<br>SELECT vend_id, prod_name FROM products WHERE vend_id = 1002 OR vend_id =1003;<br><br>#IN关键字：在这些值里<br>SELECT prod_name, vend_id FROM products WHERE vend_id IN (1002, 1003);<br><br>#NOT关键字：否定紧跟在后面的条件<br>SELECT prod_name, vend_id FROM products WHERE vend_id NOT IN (1002, 1003);<br><br></code></pre></div></td></tr></table></figure><blockquote><p><code>IN</code>和<code>OR</code>操作符功能等价，但<code>IN</code>操作符具有如下优点：</p><ol><li>语法更清楚更直观</li><li>计算的次序更容易管理（使用的操作符更少）</li><li>效率一般更快</li><li><code>IN</code>最大的优点是可以包含其他<code>SELECT</code>语句</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#price &gt;= 10 且由1002或1003造的产品<br>SELECT prod_id, prod_name, prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;= 10;<br></code></pre></div></td></tr></table></figure><blockquote><ul><li><p>在处理SQL时，优先级<code>AND</code>&gt;<code>OR</code>，可使用圆括号明确的分组相应的操作符。</p></li><li><p>圆括号还有消除歧义的作用，在任何组合逻辑运算中，都应该使用。</p></li></ul></blockquote><h2 id="6-通配符过滤"><a href="#6-通配符过滤" class="headerlink" title="6. 通配符过滤"></a>6. 通配符过滤</h2><p><strong>LIKE操作符</strong></p><p>LIKE操作符指示MySQL，后跟的搜索模式利用通配符匹配而不是直接相等匹配等进行比较。SQL支持几种通配符：%、_、</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#%:百分号通配符，表示任意字符出现任意次。<br>#例：查找所有jet开头的产品<br>SELECT prod_id, prod_name FROM products WHERE prod_name LIKE &#x27;jet%&#x27;;<br>#例：匹配任何文本含anvil的值<br>SELECT prod_id, prod_name FROM products WHERE prod_name LIKE &#x27;%anvil%&#x27;;<br>#例：%在中间<br>SELECT prod_id, prod_name FROM products WHERE prod_name LIKE &#x27;s%e&#x27;;<br></code></pre></div></td></tr></table></figure><h2 id="7-正则表达式"><a href="#7-正则表达式" class="headerlink" title="7. 正则表达式"></a>7. 正则表达式</h2><h3 id="7-1-REGEXP关键字"><a href="#7-1-REGEXP关键字" class="headerlink" title="7.1 REGEXP关键字"></a>7.1 <code>REGEXP</code>关键字</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#基本字符匹配：匹配id含有ANV的所有行<br>SELECT prod_id, prod_name FROM products WHERE prod_id REGEXP &#x27;ANV&#x27;;<br>#&#x27;.000&#x27;<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;.000&#x27;;<br>#OR匹配<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;1000|2000&#x27;;<br>#匹配几个字符之一:1 Ton|2 Ton|3 Ton<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[123] Ton&#x27;;<br>#同上<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[1|2|3] Ton&#x27;;<br><br></code></pre></div></td></tr></table></figure><blockquote><ul><li><p><code>.</code>是正则表达式的一个特殊字符，表示匹配任意一个字符</p></li><li><p>自<code>3.23.4</code>后，正则匹配默认不区分大小写。可用<code>BINARY</code>关键字区分大小写</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#例：<br>#匹配行：0<br>SELECT prod_id, prod_name FROM products WHERE prod_id REGEXP BINARY &#x27;aNV&#x27;;<br>#匹配行：3<br>SELECT prod_id, prod_name FROM products WHERE prod_id REGEXP BINARY &#x27;aNV&#x27;;<br></code></pre></div></td></tr></table></figure></li><li><p><code>^</code>表否定</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#匹配除1、2、3外的所有<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[^123] Ton&#x27;;<br></code></pre></div></td></tr></table></figure></li><li></li></ul></blockquote><h3 id="7-2-匹配范围"><a href="#7-2-匹配范围" class="headerlink" title="7.2 匹配范围"></a>7.2 匹配范围</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#-可用来定义范围你:0-9<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[0-9] Ton&#x27;;<br></code></pre></div></td></tr></table></figure><h3 id="7-3-转译（匹配特殊字符）"><a href="#7-3-转译（匹配特殊字符）" class="headerlink" title="7.3 转译（匹配特殊字符）"></a>7.3 转译（匹配特殊字符）</h3><p>使用<code>\\</code>转义特殊字符</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#匹配.<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;\\.&#x27;;<br></code></pre></div></td></tr></table></figure><blockquote><p><code>\\</code>也用来引用元字符</p><ul><li><code>\\f</code>换页</li><li><code>\\n</code> 换行</li><li><code>\\r</code> 回车</li><li><code>\\t</code> 制表</li><li><code>\\v</code> 纵向制表</li></ul><p>匹配<code>\</code>使用<code>\\\</code>。</p></blockquote><h3 id="7-4-匹配字符类"><a href="#7-4-匹配字符类" class="headerlink" title="7.4 匹配字符类"></a>7.4 匹配字符类</h3><blockquote><p>-<code>[:alnum:]</code> ：任意数字和字符（同<code>[a-zA-Z0-9]</code>）</p><p>-<code>[:alpha:]</code> ：任意字符（同<code>[a-zA-Z]</code>）</p><p>-<code>[:blank:]</code> ：空格和制表（同<code>[\\t]</code>）</p><p>-<code>[:cntrl:]</code> ：<code>ASCII</code>控制字符（<code>ASCII</code>0到31和127）</p><p>-<code>[:digit:]</code> ：任意数字（同<code>[0-9]</code>）</p><p>-<code>[:graph:]</code> ：与<code>[:print:]</code>相同，但不包括空格</p><p>-<code>[:lower:]</code> ：任意小写字母（同<code>[a-z]</code>）</p><p>-<code>[:print:]</code> ：任意可打印字符</p><p>-<code>[:punct:]</code> ：既不在<code>[:alnum:]</code>也不在<code>[:cntrl:]</code>中的任意字符</p><p>-<code>[:space:]</code> ：包括空格在内的任意空白字符（同<code>[\\f\\n\\r\\t\\v]</code>）</p><p>-<code>[:upper:]</code> ：任意大写字母（同<code>[A-Z]</code>）</p><p>-<code>[:xdigit:]</code> ：任意十六进制数字（同<code>[a-fA-F0-9]</code>）</p></blockquote><h3 id="7-5-匹配多个实例（重复元字符）"><a href="#7-5-匹配多个实例（重复元字符）" class="headerlink" title="7.5 匹配多个实例（重复元字符）"></a>7.5 匹配多个实例（重复元字符）</h3><blockquote><ul><li><code>*</code> ：0个或多个匹配</li><li><code>+</code> ：1个或多个匹配（同<code>&#123;1,&#125;</code>）</li><li><code>？</code> ：0个或1个匹配（同<code>&#123;0,1&#125;</code>）</li><li><code>&#123;n&#125;</code> ：指定数目的匹配</li><li><code>&#123;n,&#125;</code> ：不少于指定数目的匹配</li><li><code>&#123;n,m&#125;</code> ：匹配数目的范围（m不超过255）</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#例1<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;\\([0-9] sticks?\\)&#x27;;<br>#例2：连在一起的4位数字<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[[:digit:]]&#123;4&#125;&#x27;;<br>#同上<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;[:digit:]&#123;4&#125;&#x27;;<br></code></pre></div></td></tr></table></figure><h3 id="7-6-定位元字符"><a href="#7-6-定位元字符" class="headerlink" title="7.6 定位元字符"></a>7.6 定位元字符</h3><blockquote><ul><li><code>^</code>：文本的开始</li><li><code>$</code>：文本的结束</li><li><code>[]</code>：</li><li><code>[]</code>：</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#匹配以数字或.开始的串<br>SELECT prod_name FROM products WHERE prod_name REGEXP &#x27;^[0-9\\.]&#x27;;<br></code></pre></div></td></tr></table></figure><blockquote><p><code>LIKE</code>与<code>REGEXP</code>：<code>LIKE</code>匹配整个串，<code>REGEXP</code>匹配子串。</p></blockquote><h3 id="7-7-简单的正则表达式测试"><a href="#7-7-简单的正则表达式测试" class="headerlink" title="7.7 简单的正则表达式测试"></a>7.7 简单的正则表达式测试</h3><blockquote><p>可以在不使用数据库表，用SELECT测试正则表达式。返回值：</p><ul><li>0：没有匹配</li><li>1：匹配</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#返回0，因为&#x27;hello&#x27;没有数字<br>SELECT &#x27;hello&#x27; REGEXP &#x27;[0-9]&#x27;;<br>#返回1，有数字匹配。<br>SELECT &#x27;11&#x27; REGEXP &#x27;[0-9]&#x27;;<br></code></pre></div></td></tr></table></figure><h2 id="8-创建计算字段"><a href="#8-创建计算字段" class="headerlink" title="8 创建计算字段"></a>8 创建计算字段</h2><h3 id="8-1-拼接字段-（Concat"><a href="#8-1-拼接字段-（Concat" class="headerlink" title="8.1 拼接字段 （Concat"></a>8.1 拼接字段 （Concat</h3><p>拼接字段使用**<code>Concat</code>**关键字。</p><p>由两列组成的标题的简单例子</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#两列组成标题<br>SELECT Concat(vend_name, &#x27;(&#x27;, vend_country, &#x27;)&#x27;) FROM vendors ORDER BY vend_name;<br></code></pre></div></td></tr></table></figure><blockquote><ul><li><p><code>Concat</code>拼接串，即把多个串连接起来形成一个较长的串。</p></li><li><p><code>RTrim</code>：去除右边的空格</p></li><li><p><code>LTrim</code>：去掉左边的空格</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#两列组成标题<br>SELECT Concat(RTrim(vend_name), &#x27;(&#x27;, RTrim(vend_country), &#x27;)&#x27;) FROM vendors ORDER BY vend_name;<br></code></pre></div></td></tr></table></figure></li></ul></blockquote><h3 id="8-2-使用别名-AS"><a href="#8-2-使用别名-AS" class="headerlink" title="8.2 使用别名 (AS)"></a>8.2 使用别名 (AS)</h3><p>列别名使用<code>AS</code>关键字</p><blockquote><ul><li><p>别名是一个字段或值的替换名</p></li><li><p>别名有时也成为导出列</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#使用别名<br>SELECT Concat(RTrim(vend_name), &#x27;(&#x27;, RTrim(vend_country), &#x27;)&#x27;) AS vend_title FROM vendors ORDER BY vend_name;<br></code></pre></div></td></tr></table></figure><h3 id="8-3-执行算数计算"><a href="#8-3-执行算数计算" class="headerlink" title="8.3 执行算数计算"></a>8.3 执行算数计算</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#计算单价*数量 = 总价格<br>SELECT prod_id, quantity, item_price, quantity * item_price AS expanded_price FROM orderitems WHERE order_num = 20005;<br></code></pre></div></td></tr></table></figure><h2 id="9-使用数据处理函数"><a href="#9-使用数据处理函数" class="headerlink" title="9. 使用数据处理函数"></a>9. 使用数据处理函数</h2><h3 id="9-1-文本处理函数"><a href="#9-1-文本处理函数" class="headerlink" title="9.1 文本处理函数"></a>9.1 文本处理函数</h3><blockquote><ul><li><p><code>Left</code> ：返回串左边的字符</p></li><li><p><code>Length</code> ：返回串的长度</p></li><li><p><code>Locate</code> ：找出串的一个子串</p></li><li><p><code>Lower</code> ：将串转换为小写</p></li><li><p><code>LTrim</code> ：去掉串左边的空格</p></li><li><p><code>Right</code> ：返回串右边的字符</p></li><li><p><code>RTrim</code> ：去掉串右边的空格</p></li><li><p><code>Soundex</code> ：返回串的SOUNDEX值</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#Soundex：将任何文本串转换为描述其语音表示的字母数字模式的算法<br>SELECT cust_name, cust_contact FROM customers WHERE Soundex(cust_contact) = Soundex(&#x27;Y Lie&#x27;);<br><br></code></pre></div></td></tr></table></figure></li><li><p><code>SubString</code> ：返回子串的字符</p></li><li><p><code>Upper</code> ：将串转换为大写</p></li></ul></blockquote><h3 id="9-2-日期和时间处理函数"><a href="#9-2-日期和时间处理函数" class="headerlink" title="9.2 日期和时间处理函数"></a>9.2 日期和时间处理函数</h3><blockquote><p>假如列的值包含日期和时间，我们想找出<code>2005-09-01</code>这个日期的所有行，这样</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#因为没有跟时间段，时间段默认为00:00:00<br>SELECT cust_id, order_num, order_date FROM orders WHERE order_date = &#x27;2005-09-01&#x27;;<br></code></pre></div></td></tr></table></figure><p><img src="C:\Users\k\AppData\Roaming\Typora\typora-user-images\image-20211201232509287.png" alt="image-20211201232509287"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#Date, 讲字段的值转换成日期（去掉时间）再比较，匹配当天所有的行<br>SELECT cust_id, order_num, order_date FROM orders WHERE Date(order_date) = &#x27;2005-09-01&#x27;;<br></code></pre></div></td></tr></table></figure><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112012325936.png" alt="image-20211201232524887"></p></blockquote><p><strong>日期处理函数的意义在于此</strong></p><blockquote><p>函数一览：</p><ul><li><code>AddDate</code>：</li><li><code>AddTime</code>：</li><li><code>CurDate</code>：</li><li><code>CurTime</code>：</li><li><code>Date</code>：</li><li><code>DateDiff</code>：</li><li><code>Date_Add</code>：</li><li><code>Date_Format</code>：</li><li><code>Day</code>：</li><li><code>DayOfWeek</code>：</li><li><code>Hour</code>：</li><li><code>Minute</code>：</li><li><code>Month</code>：</li><li><code>Now</code>：</li><li><code>Second</code>：</li><li><code>Time</code>：</li><li><code>Year</code>：</li></ul></blockquote><h3 id="9-3-查找某个月的订单"><a href="#9-3-查找某个月的订单" class="headerlink" title="9.3 查找某个月的订单"></a>9.3 查找某个月的订单</h3><p>查找某个月的订单时，可以使用Yead()和Mont()函数来处理日期的值，再分别匹配年和月。相比使用in查询时需要指定年月日（即日期的具体值）语句更简洁、容易理解。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_id, order_num FROM orders WHERE Date(order_date) in (&#x27;2005-09-01&#x27;, &#x27;2005-09-30&#x27;);<br>#上面的缺点是，当不知道某天有没有订单时，要不要写在in里, 不写肯定匹配不出来<br></code></pre></div></td></tr></table></figure><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112012332678.png" alt="image-20211201233249613"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#更好的方法：<br>SELECT cust_id, order_num FROM orders WHERE Year(order_date) = 2005 AND Month(order_date) = 9;<br></code></pre></div></td></tr></table></figure><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/202112012333058.png" alt="image-20211201233303002"></p><h3 id="9-4-数值处理函数"><a href="#9-4-数值处理函数" class="headerlink" title="9.4 数值处理函数"></a>9.4 数值处理函数</h3><p>数值处理函数主要用于代数、三角或几何运算</p><blockquote><p>值有讽刺意味的是，在主要的DBMS的函数中，数值处理函数，是最一致最统一的函数。</p></blockquote><table><thead><tr><th>函数名</th><th></th></tr></thead><tbody><tr><td><code>Abs</code></td><td></td></tr><tr><td><code>Cos</code></td><td></td></tr><tr><td><code>Exp</code></td><td></td></tr><tr><td><code>Mod</code></td><td></td></tr><tr><td><code>Pi</code></td><td></td></tr><tr><td><code>Rand</code></td><td></td></tr><tr><td><code>Sin</code></td><td></td></tr><tr><td><code>Sqrt</code></td><td></td></tr><tr><td><code>Tan</code></td><td></td></tr></tbody></table><h2 id="10-汇总数据-（聚集函数）"><a href="#10-汇总数据-（聚集函数）" class="headerlink" title="10. 汇总数据 （聚集函数）"></a>10. 汇总数据 （聚集函数）</h2><blockquote><p>常常需要汇总数据，而不是把它们实际检索出来</p></blockquote><h3 id="10-1-聚集函数"><a href="#10-1-聚集函数" class="headerlink" title="10.1 聚集函数"></a>10.1 聚集函数</h3><p><code>MySQL</code>给出了5个SQL聚集函数：</p><blockquote><ul><li><code>AVG</code>：返回某列的平均值</li><li><code>COUNT</code>：返回某列的行数</li><li><code>MAX</code>：返回某列的最大值</li><li><code>MIN</code>：返回某列的最小值</li><li><code>SUM</code>：返回某列值之和</li></ul></blockquote><blockquote><p><code>MySQL</code>还涉及一系列标准偏差聚集函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#AVG<br>SELECT AVG(prod_price) AS avg_price FROM products;<br>SELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id = 1003;<br>#COUNT<br>SELECT COUNT(*) AS num_cust FROM customers;<br>#具有电子邮件地址的客户计数<br>SELECT COUNT(cust_email) AS num_cust FROM customers;<br>#MAX<br>SELECT MAX(prod_price) AS max_price FROM products;<br>#MIN<br>SELECT MIN(prod_price) AS min_price FROM products;<br>#SUM<br>SELECT SUM(quantity) AS items_ordered FROM orderitems WHERE order_num = 20005;<br>#SUM也可以用来计算值<br>SELECT SUM(item_price * quantity) AS items_ordered FROM orderitems WHERE order_num = 20005;<br></code></pre></div></td></tr></table></figure><blockquote><ul><li><code>AVG()</code>函数将自动忽略值为NULL的行</li><li>如果指定列名，<code>COUNT()</code>将忽略值为NULL的行。若列名是<code>*</code>号，则不忽略</li><li><code>MAX()</code>将自动忽略值为NULL的行</li><li><code>MIN()</code>将自动忽略值为NULL的行</li><li><code>SUM()</code>将自动忽略值为NULL的行</li></ul></blockquote><h3 id="10-2-聚集不同值（DISTINCT"><a href="#10-2-聚集不同值（DISTINCT" class="headerlink" title="10.2 聚集不同值（DISTINCT"></a>10.2 聚集不同值（DISTINCT</h3><blockquote><p>聚集函数的<code>DISTINCT</code>被添加到MySQL 5.0.3，更低版本不可用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#AVG DISTINCT<br>SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id = 1003;<br>#上面的代码没有很好的体现应用场景，只是做一个示例。（2021/12/2）<br></code></pre></div></td></tr></table></figure><blockquote><p>使用DISTINCT后，平均值提高了，因为有多个物品具有相同的较低价格。</p></blockquote><h3 id="10-3-组合聚集函数"><a href="#10-3-组合聚集函数" class="headerlink" title="10.3 组合聚集函数"></a>10.3 组合聚集函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#包含多个聚合函数<br>SELECT COUNT(*) AS num_items, MIN(prod_price) AS min_price, MAX(prod_price) AS max_price, AVG(prod_price) AS price_avg FROM products;<br></code></pre></div></td></tr></table></figure><h3 id="10-4-小结"><a href="#10-4-小结" class="headerlink" title="10.4 小结"></a>10.4 小结</h3><h2 id="11-分组数据"><a href="#11-分组数据" class="headerlink" title="11. 分组数据"></a>11. 分组数据</h2><h3 id="11-2-创建分组-GROUP-BY"><a href="#11-2-创建分组-GROUP-BY" class="headerlink" title="11.2 创建分组**GROUP BY**"></a>11.2 创建分组**<code>GROUP BY</code>**</h3><p>分组是在<code>SELECT</code>的<code>GROUP BY</code>字句中建立的。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#统计每个vend_id的行数<br>SELECT vend_id, COUNT(*) FROM products GROUP BY vend_id;<br></code></pre></div></td></tr></table></figure><blockquote><p><code>GROUP BY</code>字句指示MySQL分组数据，然后对每个组而不是整个结果集进行聚集。</p></blockquote><h3 id="11-3-过滤分组-HAVING"><a href="#11-3-过滤分组-HAVING" class="headerlink" title="11.3 过滤分组 HAVING"></a>11.3 过滤分组 <strong><code>HAVING</code></strong></h3><blockquote><p>所有的<code>WHERE</code>字句都可以用<code>HAVING</code>字句来代替，唯一的差别就是<code>WHERE</code>过滤行，而<code>HAVING</code>过滤分组（换一种理解就是：<code>WHERE</code>在分组前过滤，而<code>HAVING</code>在分组后过滤）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#最后COUNT(*) &gt;= 2：过滤两个以上的订单。<br>SELECT cust_id, COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) &gt;= 2;<br><br>#具有两个以上价格&gt;=10的产品的供应商<br>SELECT vend_id, COUNT(*) AS num_prods FROM products WHERE prod_price &gt;= 10 GROUP BY vend_id HAVING  COUNT(*) &gt;= 2;<br><br>SELECT vend_id, COUNT(*) AS num_prods FROM products WHERE prod_price &gt;= 10 GROUP BY vend_id HAVING  COUNT(*) &gt;= 2;<br></code></pre></div></td></tr></table></figure><h3 id="11-4-分组和排序"><a href="#11-4-分组和排序" class="headerlink" title="11.4 分组和排序"></a>11.4 分组和排序</h3><p> <strong><code>ORDER BY</code></strong>:排序产生的输出</p><p><strong><code>GROUP BY</code></strong>:分组行,但输出可能不是分组的顺序(虽然经常是以分组的顺序给出,但情况并不总是这样,这不是mysql规范所要求的)</p><blockquote><p>当要求分组数据时,并不表示需要以相同的方式排序输出.所以应该提供明确的<code>ORDER BY</code>语句.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#总价按照order_num汇总<br>SELECT order_num, SUM(quantity * item_price) AS ordertotal FROM orderitems GROUP BY order_num HAVING SUM(quantity * item_price) &gt;= 50;<br>#根据总价排序<br>SELECT order_num, SUM(quantity * item_price) AS ordertotal FROM orderitems GROUP BY order_num HAVING SUM(quantity * item_price) &gt;= 50 ORDER BY ordertotal;<br></code></pre></div></td></tr></table></figure><h3 id="11-5-SELECT-子句顺序"><a href="#11-5-SELECT-子句顺序" class="headerlink" title="11.5 SELECT 子句顺序"></a>11.5 SELECT 子句顺序</h3><table><thead><tr><th align="center">子句</th><th align="center">说明</th><th align="center">是否 必须使用</th></tr></thead><tbody><tr><td align="center">SELECT</td><td align="center">要返回的列或表达式</td><td align="center">是</td></tr><tr><td align="center">FROM</td><td align="center">从中检索数据的表</td><td align="center">仅再从表选择数据时使用</td></tr><tr><td align="center">WHERE</td><td align="center">行级过滤</td><td align="center">否</td></tr><tr><td align="center">GROUP BY</td><td align="center">分组说明</td><td align="center">仅在按组计算聚集时使用</td></tr><tr><td align="center">HAVING</td><td align="center">组级过滤</td><td align="center">否</td></tr><tr><td align="center">ORDER BY</td><td align="center">输出排序的顺序</td><td align="center">否</td></tr><tr><td align="center">LIMIT</td><td align="center">要检索的行数</td><td align="center">否</td></tr><tr><td align="center">OFFSET</td><td align="center">记录偏移量</td><td align="center">否</td></tr></tbody></table><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="1-利用子查询过滤"><a href="#1-利用子查询过滤" class="headerlink" title="1. 利用子查询过滤"></a>1. 利用子查询过滤</h2><p>有订单表orders、物品表orderitems、客户表customers。订单表存物品id和客户id。</p><p><strong>分步查询</strong></p><p>现要查询订购物品TNT2的所有客户，有如下三个步骤：</p><ol><li><p>检索orderitems中TNT2对应的订单编号order_num</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT order_num FROM orderitems WHERE prod_id = &#x27;TNT2&#x27;;<br></code></pre></div></td></tr></table></figure></li><li><p>检索前一步包含订单id的所有订单所对应的客户id</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_id FROM orders WHERE order_num in (20005, 20007);<br></code></pre></div></td></tr></table></figure></li><li><p>检索前一步返回的所有用户id信息</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM customers WHERE cust_id in (10001, 10004);<br></code></pre></div></td></tr></table></figure></li></ol><p><strong>组合查询</strong></p><p>将第1个查询变为子查询，组合两个查询：</p><blockquote><p>在SELECT语句中，子查询总是从内向外处理。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id = &#x27;TNT2&#x27;);<br></code></pre></div></td></tr></table></figure><p> 将得到的组合查询变为子查询语句，放到第3步中：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM customers WHERE cust_id in (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id = &#x27;TNT2&#x27;));<br></code></pre></div></td></tr></table></figure><blockquote><p>MySQL实际上必须执行3条SELECT语句。在WHERE子句中使用子查询能够编写出功能很强并且很灵活的SQL语句。</p><p>子查询嵌套层数没有限制，不过在实际的使用时由于性能限制，不宜嵌套太多子查询。</p></blockquote><h2 id="2-作为计算字段使用子查询-（相关子查询"><a href="#2-作为计算字段使用子查询-（相关子查询" class="headerlink" title="2. 作为计算字段使用子查询 （相关子查询"></a>2. 作为计算字段使用子查询 （相关子查询</h2><p>使用子查询的另一个方法是创建计算字段。</p><p>需求：需要显示customers表中每个客户的订单总数（订单与相应的客户id存储在orders表中）：</p><ol><li><p>从customers表中检索出客户id表</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_id FROM customers;<br></code></pre></div></td></tr></table></figure></li><li><p>对于每个检索出的客户id，统计其在orders表中的订单总数</p><ul><li>返回三列，orders是一个计算字段，由圆括号中的子查询建立。</li><li>子查询总共执行了5次，因为检索出了5个客户id。</li><li>这里使用了完全限定名orders.cust_id &#x3D; customers.cust_id</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_id, cust_state, (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id) AS orders FROM customers ORDER BY cust_id;<br></code></pre></div></td></tr></table></figure></li></ol><p><strong>相关子查询</strong>：涉及外部查询的子查询。</p><h2 id="3-总结（使用子查询流程"><a href="#3-总结（使用子查询流程" class="headerlink" title="3. 总结（使用子查询流程"></a>3. 总结（使用子查询流程</h2><p>因在充分测试子查询正常时，再将其进行组合。这样虽然在构造查询语句时浪费了一些时间，但节省了以后（找出为什么查询不正常时）的大量时间，并极大提高了查询语句从一开始正常工作的可能性。</p><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><blockquote><p>什么是联结、为什么要用联结、如何编写使用联结的SELECT语句</p></blockquote><p>SQL最强大的功能之一。利用SQL的SELECT能执行的最重要的工作。</p><h2 id="1-关系表"><a href="#1-关系表" class="headerlink" title="1. 关系表"></a>1. 关系表</h2><p>假如有一个包含产品目录的数据表，每种类别物品占一行，每行中都记录一个供应商。如果一个供应商供应多个物品时，要修改这个供应商的信息，则需要修改所有包含该供应商的物品记录行。从中我们可以挖掘信息：</p><ul><li>同个供应商的信息被多次记录在不同种类物品中</li><li>要修改供应商信息时，要修改多处。</li></ul><p>同个信息在多处存储和修改，浪费时间和空间。相同数据多次出现绝对不是一件好事。此因素是关系数据库设计的基础。</p><p><strong>关系表的设计就是要保证把信息分解成多个表，一类数据一个表。</strong>在这个例子中，可建立两个表，一个表存储供应商信息，一个表存储产品信息。供应商表中每个供应商都具有唯一标识，称为该表的<strong>主键</strong>。产品信息表除了存储产品信息表外，还存储了供应商的唯一标识，该字段（供应商表的主键）称为产品信息表的外键。</p><h3 id="1-1-外键"><a href="#1-1-外键" class="headerlink" title="1.1 外键"></a>1.1 外键</h3><p>外键为某个表中的一列，它包含其他表的主键值， 定义了两个表的关系。</p><p>好处：</p><ul><li>供应商信息唯一，不浪费时间和空间</li><li>如果要修改供应商的信息，只需要修改供应商表中的单条记录，不用修改产品信息表。</li><li>由于供应商数据唯一，显然数据是一致的，这使得处理数据更简单。</li></ul><h3 id="1-2-可伸缩性"><a href="#1-2-可伸缩性" class="headerlink" title="1.2 可伸缩性"></a>1.2 可伸缩性</h3><p>可伸缩性能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序称之为可伸缩性好。</p><h2 id="2-为什么使用联结？"><a href="#2-为什么使用联结？" class="headerlink" title="2. 为什么使用联结？"></a>2. 为什么使用联结？</h2><p>分解数据为多个表能更有效的存储数据，更方便处理，且具有更大的可伸缩性。代价是怎么使用单条SELECT语句检索出数据？<br>使用联结。联结是一种机制，用来在SELECT中关联表，因此称之为联结。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。</p><h2 id="3-创建联结（等值联结"><a href="#3-创建联结（等值联结" class="headerlink" title="3. 创建联结（等值联结"></a>3. 创建联结（等值联结</h2><p>创建联结非常简单，规定要联结的所有表以及它们如何关联即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT vend_name, prod_name, prod_price FROM vendors, products WHERE vendors.vend_id = products.vend_id ORDER BY vend_name, prod_name;<br></code></pre></div></td></tr></table></figure><p>要检索的列vend_name和prod_name，prod_price分属不同的两个表，FROM子句列出了两个表vendors，products即要联结的两个表。</p><p>vendors.vend_id &#x3D; products.vend_id这里使用了完全限定名：当引用的列具有二义性时，必须使用完全限定名，否则MYSQL将返回错误。</p><h2 id="4-笛卡儿积"><a href="#4-笛卡儿积" class="headerlink" title="4. 笛卡儿积"></a>4. 笛卡儿积</h2><p>上示例子的联结中，使用了WHERE子句规定了两个表每一行的对应关系，WHERE子句作为过滤条件，它只包含那些匹配给定条件的行。没有WHERE子句时，第一个表中的每个行将与第二个表中的每个行配对，而不管他们逻辑上是否可以配在一起。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT vend_name, prod_name, prod_price FROM vendors, products ORDER BY vend_name, prod_name;<br></code></pre></div></td></tr></table></figure><p>笛卡尔体积：由没有连接条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p><p>应该保证所有联结都有WHERE子句，应该保证WHERE子句的正确性。</p><h2 id="5-内部联结"><a href="#5-内部联结" class="headerlink" title="5. 内部联结"></a>5. 内部联结</h2><p>上面示例的等值联结基于两个表之间的相等测试。这种联结也称为内部联结，另外一个稍微不同的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT vend_name, prod_name, prod_price FROM vendors INNER JOIN products ON vendors.vend_id = products.vend_id;<br></code></pre></div></td></tr></table></figure><p>虽然WHERE子句创建联结比较简单，但使用联结语法能确保不会忘记联结条件</p><h2 id="6-联结多个表"><a href="#6-联结多个表" class="headerlink" title="6. 联结多个表"></a>6. 联结多个表</h2><p>SQL对一条SELECT要联结的表没有数量限制，列出要联结的B表，使用WHERE语句规定表关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT prod_name, vend_name, prod_price, quantity FROM orderitems, products, vendors WHERE products.vend_id = vendors.vend_id AND orderitems.prod_id = products.prod_id AND order_num = &#x27;20005&#x27;;<br></code></pre></div></td></tr></table></figure><p>MYSQL在运行时关联指定的每个表以处理联结。这种处理可能是非常耗资源，因此因该仔细，不要联结不必要的表。联结的表越多 ，性能下降越厉害。</p><p>将子查询改为联结查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#子查询<br>SELECT cust_name, cust_contact  FROM customers WHERE cust_id in (SELECT cust_id FROM orders WHERE order_num in (SELECT order_num FROM orderitems WHERE prod_id = &#x27;TNT2&#x27;));<br><br>#联结查询<br>SELECt cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orders.order_num = orderitems.order_num AND orderitems.prod_id = &#x27;TNT2&#x27;;<br></code></pre></div></td></tr></table></figure><p>为执行任一给定SQL操作，一般存在不止一种方法，很少有绝对正确或绝对错误的方法。性能可能会受操作类型、表中数据量、是否存在索引或键以及其他一些条件的影响。因此有必要对不同的选择机制进行实验，以找出最适合具体情况的方法。</p><h1 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h1><h2 id="1-使用表别名"><a href="#1-使用表别名" class="headerlink" title="1. 使用表别名"></a>1. 使用表别名</h2><p>和列表名一样，表也可以使用别名。但表别名只在SELECT语句中使用，列别名可以返回到客户端，表别名只在查询执行时使用，不返回客户机。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECt cust_name, cust_contact FROM customers AS c, orders AS o, orderitems AS oi WHERE c.cust_id = o.cust_id AND o.order_num = oi.order_num AND oi. prod_id = &#x27;TNT2&#x27;;<br></code></pre></div></td></tr></table></figure><p>使用别名主要理由</p><ul><li>缩短SQL语句</li><li>允许在单挑SELECT语句中多次使用相同的表。</li></ul><h2 id="2-自联结"><a href="#2-自联结" class="headerlink" title="2. 自联结"></a>2. 自联结</h2><p>一个表中，查询某件物品DTNTR的供应商的其他物品有哪些，可以使用子查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT vend_id FROM products  WHERE prod_name = &#x27;DTNTR&#x27;;<br>SELECT prod_name FROM products WHERE vend_id = (SELECT vend_id FROM products  WHERE prod_id = &#x27;DTNTR&#x27;);<br></code></pre></div></td></tr></table></figure><p>使用联结查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT p1.prod_name FROM products AS p1, products AS p2 WHERE p1.vend_id = p2.vend_id AND p2.prod_id = &#x27;DTNTR&#x27;;<br></code></pre></div></td></tr></table></figure><p>此查询中需要的两个表实际上是相同的表，因此products表在FROM子句中出现了两次。虽然这是完全合法的，但对products的引用具有二义性，因为MySQL不知道你引用的是products表中的哪个实例。为了解决这个问题，可以使用表别名，将第一次出现的表命名为p1，第二次出现的表命名为p2。</p><p>虽然性能上自联结</p><h2 id="3-自然连接"><a href="#3-自然连接" class="headerlink" title="3. 自然连接"></a>3. 自然连接</h2><p>使用联结时，应至少有一列出现在不止一个表中。标准的连接返回所有的数据，可能相同的列出现多次。</p><p>自然联结排除多次出现，使每个列只返回一次。这个排除重复列的操作系统不操作，需要sql指定，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 检索重复的列<br>SELECT c.cust_id, o.cust_id FROM customers AS c, orders AS o WHERE c.cust_id = o.cust_id;<br><br># 通过指定检索的列，重复的列只列出一次<br>SELECT c.*, o.order_num FROM customers AS c, orders AS o WHERE c.cust_id = o.cust_id;<br></code></pre></div></td></tr></table></figure><h2 id="4-外部联结"><a href="#4-外部联结" class="headerlink" title="4. 外部联结"></a>4. 外部联结</h2><p>前面的联结都是将一个表中的行与另一个表中的列相关联。但有时候需要包含相关联的行，则可能需要使用外部联结来完成：</p><p>使用内部联结，检索所有客户及其订单：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT c.cust_id, o.order_num FROM customers AS c INNER JOIN orders AS o ON c.cust_id = o.cust_id;<br></code></pre></div></td></tr></table></figure><p>使用外部联结，为了检索所有用户，保护那些没有下订单的客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT c.cust_id, o.order_num FROM customers AS c LEFT JOIN orders AS o ON c.cust_id = o.cust_id;<br></code></pre></div></td></tr></table></figure><h2 id="5-带聚集函数的联结"><a href="#5-带聚集函数的联结" class="headerlink" title="5. 带聚集函数的联结"></a>5. 带聚集函数的联结</h2><p>之前的聚集函数只在单个表使用，现在对多个表使用聚集函数。</p><p>检索所有客户以及客户所下订单数：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT c.cust_name, c.cust_id, COUNT(o.order_num) AS num_ord FROM customers AS c INNER JOIN orders AS o ON c.cust_id = o.cust_id GROUP BY c.cust_id;<br># 此SELECT语句使用INNER JOIN将customers和orders表互相关联。GROUP BY子句按客户分组数据，因此函数调用 COUNT(orders.order_num)对每个客户的订单计数，将它作为num_ord返回。<br></code></pre></div></td></tr></table></figure><p>聚集函数也可以方便地与其他联结一起使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 使用LEFT JOIN 左外联结查询。对没有订单的客户也检索出来<br>SELECT c.cust_name, c.cust_id, COUNT(o.order_num) AS num_ord FROM customers AS c LEFT JOIN orders AS o ON c.cust_id = o.cust_id GROUP BY c.cust_id;<br></code></pre></div></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><ul><li>注意所使用的联结类型。一般我们使用内部联结，但使用外部联<br>结也是有效的。</li><li>保证使用正确的联结条件，否则将返回不正确的数据。</li><li>应该总是提供联结条件，否则会得出笛卡儿积。</li><li>在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障排除更为简单。</li></ul><h1 id="组合查询-UNION"><a href="#组合查询-UNION" class="headerlink" title="组合查询(UNION)"></a>组合查询(UNION)</h1><h2 id="1-UNION"><a href="#1-UNION" class="headerlink" title="1. UNION"></a>1. UNION</h2><p>可用UNION操作符来组合数条SQL查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 1.<br>SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;= 5;<br># 2.<br>SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id in (1002, 1001);<br><br>#3. 使用UNION组合1和2<br>SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;= 5<br>UNION<br>SELECT vend_id, prod_id, prod_price FROM products WHERE vend_id in (1002, 1001);<br><br>#4. 使用多条WHERE子句实现3<br>SELECT vend_id, prod_id, prod_price FROM products WHERE prod_price &lt;= 5 OR vend_id in (1001, 1002);<br><br></code></pre></div></td></tr></table></figure><p>使用UNION可能比使用WHERE子句更为复杂。但对于更复杂的过滤条件，或者从多个表（而不是单个表）中检索数据的情形，使用UNION可能会使处理更简单</p><h2 id="2-保留重复行（UNION-ALL"><a href="#2-保留重复行（UNION-ALL" class="headerlink" title="2. 保留重复行（UNION ALL"></a>2. 保留重复行（UNION ALL</h2><p>UNION自动会去除重复的行，要想将重复的行也显示出来，使用UNION ALL</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT vend_id, prod_name, prod_price FROM products WHERE prod_price &lt;= 5<br>UNION ALL<br>SELECT vend_id, prod_name, prod_price FROM products WHERE vend_id in (1001, 1002);<br></code></pre></div></td></tr></table></figure><h2 id="3-排序"><a href="#3-排序" class="headerlink" title="3. 排序"></a>3. 排序</h2><p>SELECT语句输出使用ORDER BY排序。在使用UNION组合查询时，只能使用一条ORDER BY语句，且是接在最后的SELECT语句中</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT vend_id, prod_name, prod_price FROM products WHERE prod_price &lt;= 5<br>UNION<br>SELECT vend_id, prod_name, prod_price FROM products WHERE vend_id in (1001, 1002)<br>ORDER BY vend_id, prod_price;<br></code></pre></div></td></tr></table></figure><p>ORDER BY对UNION的所有查询结果都有效。</p><h1 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h1><p>MyISAM支持全文本搜索，InnoDB不支持全文本搜索</p><h2 id="1-全文本搜索"><a href="#1-全文本搜索" class="headerlink" title="1. 全文本搜索"></a>1. 全文本搜索</h2><p>LIKE关键字利用通配符可以匹配查找文本，但存在几个限制</p><ol><li>性能：会对MySQL所有行进行检索</li><li>明确控制：不能明确地控制匹配什么，不匹配什么</li><li>智能化的结果：无法提供一种智能化选择，例如包含单个匹配的行和包含多个匹配的行（按照可能是更好的匹配来排列它们）。类似，一个特殊词的搜索将不会找出不包含该词但包含其他相关词的行。</li></ol><p>这些限制可以用全文搜索解决。</p><h2 id="2-使用全文搜索"><a href="#2-使用全文搜索" class="headerlink" title="2. 使用全文搜索"></a>2. 使用全文搜索</h2><p>为了使用全文搜索，必须索引被搜索的列，且随着数据的改变不断的重新索引。</p><p>在索引之后，SELECT可与Match()和Against()一起使用以实际执行搜索。</p><p><strong>启用全文本搜索支持</strong></p><p>在创建表时启用全文本搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE productnotes<br>(<br>    note_idintNOT NULL AUTO_INCREMENT,<br>    prod_id char(10) NOT NULL,<br>    note_date datetimeNOT NULL,<br>    note_texttextNULL,<br>    PRIMARY KEY(note_id),<br>    FULLTEXT(note_text)<br>)ENGINE=MyISAM;<br></code></pre></div></td></tr></table></figure><p>MySQL根据FULLTEXT(note_text)对note_text进行索引。</p><p><strong>使用全文检索</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#1. 全文检索<br>SELECT note_text FROM productnotes WHERE Match(note_text) Against(&#x27;rabbit&#x27;);<br>#Match()指定被搜索的列，Against()指定要使用的搜索表达式<br>#传递给 Match()的值必须与FULLTEXT()定义中的相同<br><br>#2. LIKE<br>SELECT note_text FROM productnotes WHERE note_text LIKE &#x27;%rabbit%&#x27;;<br></code></pre></div></td></tr></table></figure><p>两种方式返回结果的顺序不一样，全文搜索返回以文本匹配的良好程度排序的数据。全文件搜索的一个重要部分就是对结果排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT note_text, Match(note_text) Against(&#x27;rabbit&#x27;) AS &#x27;rank&#x27; FROM productnotes;<br># 检索Match(note_text) Against(&#x27;rabbit&#x27;)<br></code></pre></div></td></tr></table></figure><p>rank列返回包含全文本搜索计算出的等级值，由MySQL根据行中词的数目、唯一词的数目、整个索引中词的总数以及包含该词的行的数目计算出来</p><h2 id="3-查询扩展"><a href="#3-查询扩展" class="headerlink" title="3. 查询扩展"></a>3. 查询扩展</h2><p>使用查询扩展时，除了检索出匹配的列，还会检索相关的列。</p><p>在使用查询扩展时，MySQL对数据和 索引进行两遍扫描来完成搜索：</p><ul><li>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有<br>行；</li><li>其次，MySQL检查这些匹配行并选择所有有用的词（我们将会简<br>要地解释MySQL如何断定什么有用，什么无用）。</li><li>再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，<br>而且还使用所有有用的词。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT note_text FROM productnotes WHERE Match(note_text) Against(&#x27;anvils&#x27; WITH QUERY EXPANSION);<br></code></pre></div></td></tr></table></figure><h2 id="4-布尔文本搜索"><a href="#4-布尔文本搜索" class="headerlink" title="4. 布尔文本搜索"></a>4. 布尔文本搜索</h2><p>即使没有FULLTEXT索引也可以使用（意味着性能低，随着数据量越多越低）</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#检索包含词heavy的所有行<br>SELECT note_text FROM productnotes WHERE Match(note_text) Against(&#x27;heavy&#x27; IN BOOLEAN MODE);<br>#匹配包含heavy但不包含任意以rope开始的词的行<br>SELECT note_text FROM productnotes WHERE Match(note_text) Against(&#x27;heavy -rope*&#x27; IN BOOLEAN MODE);<br></code></pre></div></td></tr></table></figure><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/image-20220406185113835.png" alt="image-20220406185113835"></p><h2 id="5-全文搜索使用说明"><a href="#5-全文搜索使用说明" class="headerlink" title="5. 全文搜索使用说明"></a>5. 全文搜索使用说明</h2><h1 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h1><p>INSERT用来插入（或添加）行到数据库。</p><h2 id="1-插入完整的行"><a href="#1-插入完整的行" class="headerlink" title="1. 插入完整的行"></a>1. 插入完整的行</h2><p>指定表名和插入到新行中的值。例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO Customers<br>VALUES(NULL, &#x27;Pep E. LaPew&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL);<br></code></pre></div></td></tr></table></figure><blockquote><p>没有输出。INSERT语句一般没有输出</p></blockquote><p>如果某个列没有值，应该使用NULL填充（假设该列允许空值）。每个列必须以他们在表定义中出现的顺序填充。</p><p>这样的方法简单，但不安全，高度依赖表定义的列顺序。更安全的做法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#即使表结构变动，该INSERT语句也能正常工作<br>INSERT INTO Customers (cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email) VALUES( &#x27;Pep E. LaPew&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL);<br></code></pre></div></td></tr></table></figure><p>省略列必须满足条件：</p><ul><li>该列允许空值</li><li>在表定义中使用默认值。插入语句不给出值，则使用默认值。</li></ul><h2 id="2-插入多行"><a href="#2-插入多行" class="headerlink" title="2. 插入多行"></a>2. 插入多行</h2><p>可以使用多条INSERT语句完成，每条语句以；分号结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO Customers (cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email) VALUES( &#x27;Zhang&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL);<br>INSERT INTO Customers (cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email) VALUES( &#x27;Li&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL);<br>INSERT INTO Customers (cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email) VALUES( &#x27;Liu&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL);<br></code></pre></div></td></tr></table></figure><p>每条语句中的列明和次序相同时，可以组合语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#语句有多组值，每组值用一对圆括号括起来，用逗号分隔。<br>INSERT INTO Customers (cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email) <br>VALUES( &#x27;Yan&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL),<br>( &#x27;Fan&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL),<br>( &#x27;Xu&#x27;,&#x27;100 Main Street&#x27;, &#x27;Los Angeles&#x27;, &#x27;CA&#x27;, &#x27;90046&#x27;, &#x27;USA&#x27;, NULL, NULL);<br></code></pre></div></td></tr></table></figure><h2 id="3-插入检索出的数据"><a href="#3-插入检索出的数据" class="headerlink" title="3. 插入检索出的数据"></a>3. 插入检索出的数据</h2><p>INSERT还存在另一种形式，可以利用它将一条SELECT语句的结果插入表中。即一条INSERT语句和一条SELECT语句组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># INSERT SELECT<br>INSERT INTO Customers (cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email)  SELECT cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email FROM Customers WHERE cust_name = &#x27;Li&#x27;;<br></code></pre></div></td></tr></table></figure><p>这条语句将插入多少行有赖于custnew表中有多少行。如果这个表为空，则没有行被插入（也不产生错误，因为操作仍然是合法的）</p><p>SELECT语句中使用了相同的列名。但是，不一定要求列名匹配。</p><p>事实上，MySQL甚至不关心SELECT返回的列名。它使用的是列的位置，因此SELECT中的第一列（不管其列名）将用来填充表列中指定的第一个列，第二列将用来填充表列中指定的第二个列，如此等等。这对于从使用不同列名的表中导入数据是非常有用的。</p><h1 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h1><p>修改表中数据，可使用UPDATE语句。可选两种方式：</p><ul><li>更新表中特定行</li><li>更新表中所有行</li></ul><p>UPDATE语句由3部分组成：</p><ol><li>要更新的表</li><li>列名和他们的新值</li><li>确定要更新行的过滤条件</li></ol><p>假如客户10005有了邮件地址，需要更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE customers <br>SET cust_email = &#x27;elmer@fudd.com&#x27;<br>WHERE cust_id = &#x27;10005&#x27;;<br></code></pre></div></td></tr></table></figure><p>更新多个值：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE customers <br>SET <br>cust_name = &#x27;The Fudds&#x27;,<br>cust_email = &#x27;elmer@fudd.com&#x27;<br>WHERE cust_id = &#x27;10005&#x27;;<br></code></pre></div></td></tr></table></figure><p><strong>IGNORE</strong></p><p>使用IGNORE关键字，即使列更新错误，也会忽略错误，继续更新剩余列，不回回滚。</p><p>为删除某个列的值，可以设置它为NULL（假定允许为NULL）</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE customers<br>SET<br>cust_email = NULL<br>WHILE cust_id = &#x27;10005&#x27;;<br></code></pre></div></td></tr></table></figure><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><p>从一个表中删除数据，使用DELETE语句。</p><ul><li>从表中删除特定的行</li><li>从表中删除所有行</li></ul><p>从表中删除一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DELETE FROM customers WHERE cust_id = 10006;<br></code></pre></div></td></tr></table></figure><h2 id="删除所有行"><a href="#删除所有行" class="headerlink" title="删除所有行"></a>删除所有行</h2><p>使用TRUNCATE TABLE而不是DELETE，TRUNCATE TABLE删除原有表再新建一个一样的表，而不是删除所有行</p><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><p>MySQL不仅可以操作表数据，还可以执行数据库和表的所有操作，包括表本身的创建和处理。</p><ul><li><p>在使用界面管理工具创建表时，工具会生成并执行相应的MySQL语句。</p></li><li><p>使用SQL数据创建</p></li></ul><h2 id="1-创建表（CREATE-TABLE"><a href="#1-创建表（CREATE-TABLE" class="headerlink" title="1. 创建表（CREATE  TABLE"></a>1. 创建表（CREATE  TABLE</h2><p>使用CREATE TABLE创建表时，必须给出：</p><ol><li>新表的名字</li><li>表列的名字和定义，用逗号分隔</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE IF NOT EXISTS customers<br>(<br>    cust_idintNOT NULL AUTO_INCREMENT,<br>    cust_name char(50) NOT NULL,<br>    cust_address char(50) NULL,<br>    cust_citychar(50) NULL,<br>    cust_state char(50) NULL,<br>    #...<br>    PRIMARY KEY(cust_id)<br>)ENGINE=InnoDB;<br></code></pre></div></td></tr></table></figure><p>**PRIMARY KEY(cust_id)**：表的主键可以在创建时指定    </p><p>在新建表时，指定的表名必须不存在，否则会保存。要覆盖一个表，SQL要求先删除该表，再创建一个新表，而不是使用CREATE TABLE覆盖。</p><p><strong>IF NOT EXISTS</strong>：当表不存在时才创建</p><h2 id="2-使用NULL值"><a href="#2-使用NULL值" class="headerlink" title="2. 使用NULL值"></a>2. 使用NULL值</h2><p>每个列是NULL列或者NOT NULL列，这种状态在创建时由表的定义规定。</p><p>NULL列允许值为空，NOT NULL列不允许值为空。如果对NOT NULL列插入了一个NULL值，则会报错</p><p><strong>NULL与空串不一样，对NOT NULL列插入<code>‘’</code>空串是允许的</strong></p><h2 id="3-主键"><a href="#3-主键" class="headerlink" title="3. 主键"></a>3. 主键</h2><p><strong>主键值必须唯一：</strong>主键使用单个列，则它的值必须唯一。如果使用多个列，则这些列的组合必须唯一。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#单个列为主键<br>PRIMARY KEY(vend_id)<br><br>#多个列为主键， 多个列用，分隔开<br>PRIMARY KEY(vend_id, o)<br></code></pre></div></td></tr></table></figure><h2 id="4-AUTO-INCREMENT"><a href="#4-AUTO-INCREMENT" class="headerlink" title="4. AUTO_INCREMENT"></a>4. AUTO_INCREMENT</h2><p>当一列比如订单编号为主键时，这些编号除它们是唯一的以外没有别的特殊意义。在增加一个新顾客或新订单时，需要一个新的顾客ID或订单号。这些编号可以任意，只要它们是唯一的即可。显然，使用的最简单的编号是下一个编号，所谓下一个编号是大于当前最大编号的编号。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">cust_id intNOT NULL AUTO_INCREMENT<br></code></pre></div></td></tr></table></figure><p><strong>AUTO_INCREMENT告诉MySQL，本列每当增加一行时自动增量</strong></p><p>每个表只允许一个AUTO_INCREMENT列，而且它必须被索引（如，通过使它成为主键）。</p><h3 id="last-insert-id"><a href="#last-insert-id" class="headerlink" title="last_insert_id()"></a>last_insert_id()</h3><p>使用last_insert_id()获取最后一个AUTO_INCREMENT值</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT last_insert_id();<br></code></pre></div></td></tr></table></figure><h2 id="5-指定默认值"><a href="#5-指定默认值" class="headerlink" title="5. 指定默认值"></a>5. 指定默认值</h2><p>插入行时没有给出值，MySQL允许指定此时使用的默认值</p><p>默认值由CREATE TABLE语句列定义的DEFAULT指定</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE IF NOT EXISTS orderitems(<br>order_num int NOT NULL,<br>    order_item int NOT NULL,<br>    prod_idchar(10) NOT NULL,<br>    quantityintNOT NULL DEFAULT 1,#指定默认值，在未给出数量的<br>    item_price decimal(8, 2) NOT NULL,<br>    PRIMARY KEY(order_num, order_item)<br>)ENGINE=InnoDB;<br></code></pre></div></td></tr></table></figure><h2 id="6-引擎类型"><a href="#6-引擎类型" class="headerlink" title="6. 引擎类型"></a>6. 引擎类型</h2><p>MySQL具有多种引擎，隐藏在MySQL服务内，都能执行CREATE TABLE 和SELECT等命令。</p><p>不同的引擎具有不同的功能和特性，为不同的任务选择正确的引擎能获得良好的功能和灵活性。</p><ul><li>InnoDB是一个可靠的事务处理引擎，但不支持全文搜索</li><li>MEMORY在功能上等同于MyISAM，但由于数据存储在内存中，速度很快，适合临时表</li><li>MyISAM是一个性能极高的引擎，支持全文搜索但不支持事务</li></ul><p><strong>外键不能跨引擎</strong>：使用一个引擎的表不能引用具有使用不同引擎的表的外键</p><h2 id="7-更新表（ALTER-TABLE"><a href="#7-更新表（ALTER-TABLE" class="headerlink" title="7. 更新表（ALTER TABLE"></a>7. 更新表（ALTER TABLE</h2><p>理想情况下，表存储数据后就不应该被更新。</p><p>更新表可以使用ALTER TABLE语句，必须给出以下信息：</p><ul><li>在ALTER TABLE之后给出要更新的表名（表必须存在，否则会出错</li><li>所作更改的列</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#1. 给该表增加一个vend_phone列，必须明确列的类型<br>ALTER TABLE vendors ADD vend_phone char(20);<br><br>#2. 删除刚刚的列：<br>ALTER TABLE vendors DROP COLUMN vend_phone;<br></code></pre></div></td></tr></table></figure><h3 id="定义外键"><a href="#定义外键" class="headerlink" title="定义外键"></a>定义外键</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE orderitems ADD CONSTRAINI fk_orderitems_orders<br>FOREIGN KEY (order_num) REFERENCES orders(order_num);<br><br>ALTER TABLE orderitems ADD CONSTRAINI fk_orderitems_products<br>FOREIGN KEY (prod_id) REFERENCES products(prod_id);<br><br>ALTER TABLE orders ADD CONSTRAINI fk_orders_customers<br>FOREIGN KEY (cust_id) REFERENCES customers(cust_id);<br><br>ALTER TABLE products ADD CONSTRAINI fk_products_vendors<br>FOREIGN KEY (vend_id) REFERENCES customers(vend_id);<br></code></pre></div></td></tr></table></figure><h2 id="8-删除表（DROP-TABLE"><a href="#8-删除表（DROP-TABLE" class="headerlink" title="8. 删除表（DROP TABLE"></a>8. 删除表（DROP TABLE</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TABLE customers2;<br></code></pre></div></td></tr></table></figure><p>删除表没有确认，也不能撤销，执行这条命令将永久删除该表。</p><h2 id="9-重命名表（RENAME-TABLE"><a href="#9-重命名表（RENAME-TABLE" class="headerlink" title="9. 重命名表（RENAME TABLE"></a>9. 重命名表（RENAME TABLE</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#重命名单个表<br>RENAME TABLE customers2 TO customers3;<br><br>#重命名多个表<br>RENAME TABLE <br>customers2 TO customers3，<br>orders2 TO orders3，<br>products2 TO products3;<br><br></code></pre></div></td></tr></table></figure><h1 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h1><p>MySQL 5添加了对视图的支持。</p><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p><h2 id="1-何为视图"><a href="#1-何为视图" class="headerlink" title="1. 何为视图"></a>1. 何为视图</h2><p>检索订购了某个产品的客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_name, cust_contact FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num AND prod_id = &#x27;TNT2&#x27;;<br></code></pre></div></td></tr></table></figure><p>假如可以把整个查询包装成一个名为productcustomers的虚拟表，则可以轻松检索出相同的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_name, cust_contact FROM productcustomers WHERE prod_id = &#x27;TNT2&#x27;;<br></code></pre></div></td></tr></table></figure><p>这就是视图的作用。productcustomers是一个视图，它不包含表中应该有的任何列或数据，它包含的是一个SQL查询。</p><h2 id="2-视图作用"><a href="#2-视图作用" class="headerlink" title="2. 视图作用"></a>2. 视图作用</h2><ol><li>重用SQL语句</li><li>简化复杂的SQL操作。编写后可以方便的重用而不必知道它的基本查询细节。</li><li>使用表的组成部分而不是整个表</li><li>保护数据。可以给用户授予表的特定部分访问权限而不是整个表的访问权限</li><li>更改数据格式和表示。视图可放回与底层表的表示和格式不同的数据。</li></ol><h2 id="3-规则和限制"><a href="#3-规则和限制" class="headerlink" title="3. 规则和限制"></a>3. 规则和限制</h2><ol><li>必须唯一命名</li><li>可以创建的视图数目没有限制</li><li>创建视图必须要有足够的访问权限</li><li>视图可以嵌套</li><li>ORDER BY可以用在视图中。但从该视图检索数据的SELECT中的ORDER BY将覆盖视图中的ORDER BY</li><li>视图不能索引，也不能有关联的触发器或默认值</li><li>视图可以和表一起使用（例如编写一条联结表和视图的SELECT语句。</li></ol><h2 id="4-使用视图"><a href="#4-使用视图" class="headerlink" title="4. 使用视图"></a>4. 使用视图</h2><ol><li>视图用CREATE VIEW语句创建</li><li>使用SHOW CREATE VIEW  viewname来查看视图的语句。</li><li>用DROP删除视图（DROP VIEW viewname</li><li>更新视图时，可以先用DROP再CREATE，也可以直接CREATE OR REPLACE VIEW。</li></ol><h3 id="4-1-利用视图简化复杂的联结"><a href="#4-1-利用视图简化复杂的联结" class="headerlink" title="4.1 利用视图简化复杂的联结"></a>4.1 利用视图简化复杂的联结</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE VIEW productcustomers AS SELECT cust_name, cust_contact, prod_id FROM customers, orders, orderitems WHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num;<br></code></pre></div></td></tr></table></figure><p>该语句创建一个名为productcustomers的视图，联结三个表，返回已订购任意产品的客户列表。<code>SELECT * FROM productcustomers</code>将列出任意订购了产品的客户。</p><p>为检索订购了产品‘TNT2’的客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT cust_name, cust_contact FROM productcustomers WHERE prod_id = &#x27;TNT2&#x27;;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-用视图重新格式化检索数据"><a href="#4-2-用视图重新格式化检索数据" class="headerlink" title="4.2 用视图重新格式化检索数据"></a>4.2 用视图重新格式化检索数据</h3><p>在单个组合计算列种返回供应商名和位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT Concat(RTrim(vend_name), &#x27;(&#x27;, RTrim(vend_country), &#x27;)&#x27;) AS vend_title<br>FROM vendors ORDER BY vend_name;<br></code></pre></div></td></tr></table></figure><p>如果经常需要这个格式化的结果，可以创建一个视图，每次需要时使用它即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE VIEW vendorlocations AS SELECT Concat(RTrim(vend_name), &#x27;(&#x27;, RTrim(vend_country), &#x27;)&#x27;) AS vend_title FROM vendors ORDER BY vend_name;<br></code></pre></div></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM vendorlocations;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-用视图过滤不想要的数据"><a href="#4-3-用视图过滤不想要的数据" class="headerlink" title="4.3 用视图过滤不想要的数据"></a>4.3 用视图过滤不想要的数据</h3><p>过滤没有电子邮件的客户：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE VIEW customeremaillist AS SELECT cust_id, cust_name, cust_email FROM customers WHERE cust_email IS NOT NULL;<br></code></pre></div></td></tr></table></figure><p>发送电子邮件前，需要排除没有电子邮件地址的用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM customeremaillist;<br></code></pre></div></td></tr></table></figure><h3 id="4-4-使用视图与计算字段"><a href="#4-4-使用视图与计算字段" class="headerlink" title="4.4 使用视图与计算字段"></a>4.4 使用视图与计算字段</h3><p>检索某个订单种的商品，计算每种五排的总价格</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems WHERE order_num = 20005;<br></code></pre></div></td></tr></table></figure><p>转化为视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE VIEW orderitemsexpanded AS SELECT order_num, prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems;<br></code></pre></div></td></tr></table></figure><p>检索订单20005的详细内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM orderitemsexpanded WHERE order_num = &#x27;20005&#x27;;<br></code></pre></div></td></tr></table></figure><h2 id="5-更新视图"><a href="#5-更新视图" class="headerlink" title="5. 更新视图"></a>5. 更新视图</h2><p>可以使用INSERT、UPDATE和DELETE更新视图。对一个视图更新即更新其基表（对视图增加或删除行，实际上是对其基表增加或删除行）</p><p>但是并非所有视图都可更新。如果MySQL不能正确地确定被更新的基数据，则不允许更新。即如果视图定义中有如下操作，则不能进行视图的更新：</p><ul><li>分组</li><li>联结</li><li>子查询</li><li>并</li><li>聚集函数（Min()、Count()、Sum()等）</li><li>DISTINCT</li><li>导出（计算）列</li></ul><p>换句话说很多例子的视图都是不可更新的，听上去好像一个严重的限制，但实际上不是，因为视图主要用于数据检索。</p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="1-存储过程"><a href="#1-存储过程" class="headerlink" title="1. 存储过程"></a>1. 存储过程</h2><p>通常一个完整的操作设计多条语句，这时可以创建存储过程，为以后的使用而保存的一条或多条MySQL语句的集合。类似批处理</p><h2 id="2-为什么使用存储过程"><a href="#2-为什么使用存储过程" class="headerlink" title="2. 为什么使用存储过程"></a>2. 为什么使用存储过程</h2><p>简单、安全、高性能：</p><ol><li>将处理封装在单元中，简化复杂操作</li><li>保证数据完整性</li><li>简化对变动的管理</li><li>提高性能</li><li>编写功能更强更灵活的代码</li><li></li></ol><h2 id="3-执行存储过程（CALL"><a href="#3-执行存储过程（CALL" class="headerlink" title="3. 执行存储过程（CALL"></a>3. 执行存储过程（CALL</h2><p>CALL接受存储过程的名字以及任意参数</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CALL productpricting(@pricelow, @pricehigh, @priceaverage);<br></code></pre></div></td></tr></table></figure><h2 id="4-创建存储过程"><a href="#4-创建存储过程" class="headerlink" title="4. 创建存储过程"></a>4. 创建存储过程</h2><p>返回产品的平均价格的存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE PROCEDURE productpricting()<br>BEGIN<br>SELECT AVG(prod_price) AS priceaverage FROM products;<br>END;<br></code></pre></div></td></tr></table></figure><p>该存储过程名为productpricting，()内是参数列表，即使没有参数也要列出。BEGIN和EDN用来限定存储过程体。存储过程本身是一条间的SELECT语句。</p><p>如果用命令行执行的这条存储过程创建命令，会报错。因为默认一条sql语句以分号结尾。故END;算是一条指令，解决办法可以临时更改分隔符：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE productpricting()<br>BEGIN<br>SELECT AVG(prod_price) AS priceaverage FROM products;<br>END;<br>DELIMITER ; //<br><br>#记得之后把分割符修改回分号<br>DELIMITER ;<br></code></pre></div></td></tr></table></figure><p>使用该存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CALL productpricting();<br></code></pre></div></td></tr></table></figure><h2 id="5-删除存储过程"><a href="#5-删除存储过程" class="headerlink" title="5. 删除存储过程"></a>5. 删除存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP PROCEDURE productpricing;<br></code></pre></div></td></tr></table></figure><h2 id="6-使用参数"><a href="#6-使用参数" class="headerlink" title="6. 使用参数"></a>6. 使用参数</h2><p>一般，存储过程并不显示结果，而是把结果返回给指定的变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE PROCEDURE productpricing(<br>OUT p1 DECIMAL(8, 2),<br>    OUT ph DECIMAL(8, 2),<br>    OUT pa DECIMAL(8, 2)<br>)<br>BEGIN<br>SELECT Min(prod_price) INTO p1 FROM products;<br>SELECT Max(prod_price) INTO ph FROM products;<br>SELECT Avg(prod_price) INTO pa FROM products;<br>END;<br></code></pre></div></td></tr></table></figure><p>此存储过程接收三个参数：p1存储最低价格，ph存储最高价格，pa存储平均价格。每个参数必须指定类型，这里使用十进制。关键字OUT指出相应的参数用来存储传出的值。</p><p>MySQL支持IN（传递参数值给存储过程）、OUT（从存储过程存入值到参数）和INOUT（对存储过程传入和传出）。</p><p>记录集不是允许类型。为调用此存储过程，必须指定3个变量名：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#所有MySQL变量都必须以@开始<br>CALL productpricing(@pricelow, @pricehigh, @priceaverage);<br>#显示检索的平均价格<br>SELECT @priceaverage;<br></code></pre></div></td></tr></table></figure><p><strong>IN</strong>的列子：查询订单号并返回订单合计价格：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#创建<br>CREATE PROCEDURE ordertotal(<br>IN onumber INT,<br>    OUT total DECIMAL(8, 2)<br>)<br>BEGIN<br>SELECT SUM(item_price * quantity) FROM orderitems WHERE order_num = onumber INTO total;<br>END;<br><br>#使用<br>CALL ordertotal(20009, @total);<br>SELECT @total;<br></code></pre></div></td></tr></table></figure><h2 id="7-建立智能的存储过程"><a href="#7-建立智能的存储过程" class="headerlink" title="7. 建立智能的存储过程"></a>7. 建立智能的存储过程</h2><p>前面的存储过程都是简单的语句，在包含业务规则和只能处理时，它的威力才真正显现出来。</p><p>获取订单合计，对合计增加营业税（只针对某些顾客）：</p><ol><li>获得合计</li><li>把营业税有条件地添加到合计</li><li>返回合计（带或不带税）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE PROCEDURE ordertotal(<br>IN onumber INT,<br>    IN taxable BOOLEAN,<br>    OUT ototal DECIMAL(8, 2)<br>)COMMENT &#x27;Obtain order total, optionally adding tax&#x27; #COMMET非必须<br>BEGIN<br>#声明变量total<br>DECLARE total DECIMAL(8, 2);<br>#tax,默认6<br>DECLARE taxrate INT DEFAULT 6;<br>#检索和<br>SELECT SUM(item_price * quantity) FROM orderitems WHERE order_num = onumber INTO total;<br>#是否加税<br>IF taxable THEN <br>SELECT total + (total/100 * taxrate) INTO total;<br>END IF;<br><br>#保存到参数ototal里<br>SELECT total INTO ototal;<br><br>END;<br></code></pre></div></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CALL ordertotal(20005, 0, @total);<br>SELECT @total;<br><br><br>CALL ordertotal(20005, 1, @total);<br>SELECT @total;<br></code></pre></div></td></tr></table></figure><h2 id="8-检查存储过程"><a href="#8-检查存储过程" class="headerlink" title="8. 检查存储过程"></a>8. 检查存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SHOW CREATE PROCEDURE ordertotal;<br></code></pre></div></td></tr></table></figure><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>游标只能用于存储过程。游标可以在检索出来的行中前进或后退一行或多行。是一个存储在MySQL服务器上的数据库查询，不是一条SELECT语句，而是被该语句检索出来的结果集。</p><h2 id="1-创建游标（DECLARE"><a href="#1-创建游标（DECLARE" class="headerlink" title="1. 创建游标（DECLARE"></a>1. 创建游标（DECLARE</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE PROCEDURE processorders()<br>BEGIN<br>DECLARE ordernumbers CURSOR<br>FOR<br>SELECT order_num FROM orders;<br><br>#打开游标<br>OPEN ordernumbers;<br>#关闭游标<br>CLOSE ordernumbers;<br>END;<br></code></pre></div></td></tr></table></figure><p>但对检索出的数据什么也没做。DECLARE语句用来定义和命名游标，存储过程处理完后，游标就消失（局限于存储过程）。</p><h2 id="2-打开和关闭游标（OPEN-CURSOR、CLOSE-CURSOR"><a href="#2-打开和关闭游标（OPEN-CURSOR、CLOSE-CURSOR" class="headerlink" title="2. 打开和关闭游标（OPEN CURSOR、CLOSE CURSOR"></a>2. 打开和关闭游标（OPEN CURSOR、CLOSE CURSOR</h2><p>定义游标后可以打开游标</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">OPEN ordernumbers;<br></code></pre></div></td></tr></table></figure><p>游标处理完成后，关闭游标：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CLOSE ordernumbers;<br></code></pre></div></td></tr></table></figure><p>如果不明确关闭游标，MySQL将在到达END语句时自动关闭它。</p><h2 id="3-使用游标数据"><a href="#3-使用游标数据" class="headerlink" title="3. 使用游标数据"></a>3. 使用游标数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE PROCEDURE processorders()<br>BEGIN<br>#定义变量o<br>DECLARE o INT;<br><br>#定义游标<br>DECLARE ordernumbers CURSOR<br>FOR<br>SELECT order_num FROM orders;<br><br>#打开游标<br>OPEN ordernumbers;<br>#获取order number<br>FETCH ordernumbers INTO o;<br>#关闭游标<br>CLOSE ordernumbers;<br>END;<br></code></pre></div></td></tr></table></figure><p>FETCH检索当前行的order_num列（自动从第一行开始）到一个名为o的局部声明变量中，对检索的数据不做任何处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE PROCEDURE processorders()<br>BEGIN<br>#定义变量<br>DECLARE done BOOLEAN DEFAULT 0;<br>DECLARE o INT;<br><br>#定义游标<br>DECLARE ordernumbers CURSOR<br>FOR<br>SELECT order_num FROM orders;<br>#定义continue handle<br>DECLARE CONTINUE HANDLER FOR SQLSTATE &#x27;02000&#x27; SET done = 1;<br>#打开游标<br>OPEN ordernumbers;<br>#获取order number<br>#循环处理所有行<br>REPEAT<br>FETCH ordernumbers INTO o;<br>#结束循环<br>UNTIL done END REPEAT;<br>#关闭游标<br>CLOSE ordernumbers;<br>END;<br></code></pre></div></td></tr></table></figure><p>但与前一个例子不一样的是，这个例子中的FETCH是在REPEAT内，因此它反复执行直到done为真（由UNTILdone END REPEAT;规定）</p><p>CONTINUE HANDLER在条件出现时执行代码。当SQLSTATE ‘02000’出现时，SET done&#x3D;1。SQLSTATE ‘02000’是一个未找到条件，当REPEAT由于没有更多的行供循环而不能继续时，出现这个条件。</p><p><strong>对取出的数据进行某种实际的处理</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE PROCEDURE processorders()<br>BEGIN<br>#定义变量<br>DECLARE done BOOLEAN DEFAULT 0;<br>DECLARE o INT;<br>DECLARE t DECIMAL(8, 2);<br><br>#定义游标<br>DECLARE ordernumbers CURSOR<br>FOR<br>SELECT order_num FROM orders;<br>#定义continue handle<br>DECLARE CONTINUE HANDLER FOR SQLSTATE &#x27;02000&#x27; SET done = 1;<br>#创建一个表如果不存在的话<br>CREATE TABLE IF NOT EXISTS ordertotals(order_num INT, total DECIMAL(8,2));<br>#打开游标<br>OPEN ordernumbers;<br>#获取order number<br>#循环处理所有行<br>REPEAT<br>#获取订单的order_num<br>FETCH ordernumbers INTO o;<br>#调用另一存储过程获取该order_num的合计<br>CALL ordertotal(o, 1, t);<br>#将数据插入表中<br>INSERT INTO ordertotals(order_num, total) VALUES(o, t);<br>#结束循环<br>UNTIL done END REPEAT;<br>#关闭游标<br>CLOSE ordernumbers;<br>COMMIT;<br>END;<br></code></pre></div></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CALL processorders;<br>SELECT * FROM ordertotals;<br></code></pre></div></td></tr></table></figure><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>当某条语句在事件发生时自动执行，例如：</p><ul><li>每当增加一个顾客到数据库时，检查号码格式、州的缩写</li><li>每订购一个产品时，都从库存数量中减去订购的数量</li><li>无论何时删除一行，都在某个存档中保留一个副本。</li></ul><p>以上都需要在某个表发生更改时自动处理，这就是触发器。触发器时MySQL响应以下任意语句自动执行的MySQL语句：</p><ul><li>DELETE</li><li>INSERT</li><li>UPDATE</li></ul><p>其他语句不支持触发器。</p><h2 id="1-创建触发器（CREATE-TRIGGER"><a href="#1-创建触发器（CREATE-TRIGGER" class="headerlink" title="1. 创建触发器（CREATE TRIGGER"></a>1. 创建触发器（CREATE TRIGGER</h2><p>需要给出4条信息：</p><ol><li>唯一的触发器名（触发器必须在每个表中唯一，但不是在每个数据库中唯一。但其他数据中是数据库唯一。</li><li>触发器关联的表；</li><li>触发器应响应的活动（DELTE、INSERT、UPDATE</li><li>触发器何时执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TRIGGER newproduct AFTER INSERT ON products<br>FOR EACH ROW SELECT &#x27;Product added&#x27; INTO @tips;<br></code></pre></div></td></tr></table></figure><p>AFTER ISNERT指出在INSERT语句成功执行后执行。</p><p>FRO EACH ROW：对每个插入行执行</p><p>文本’Product added‘对每个插入的行显示一次</p><p><strong>数量限制</strong>：</p><p>每个表最多支持6个触发器（每条INSERT、UPDATE、DELETE的之前和之后）。单一触发器不能与多个事件或表相连。</p><p>如果BEFFOR触发器失败，则不执行请求的操作。</p><p>如果BEFFORE触发器或SQL语句本身失败，将不执行AFTER触发器。</p><h2 id="2-删除触发器"><a href="#2-删除触发器" class="headerlink" title="2. 删除触发器"></a>2. 删除触发器</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TRIGGER newproduct;<br></code></pre></div></td></tr></table></figure><h2 id="3-使用触发器"><a href="#3-使用触发器" class="headerlink" title="3. 使用触发器"></a>3. 使用触发器</h2><h3 id="3-1-INSERT触发器"><a href="#3-1-INSERT触发器" class="headerlink" title="3.1 INSERT触发器"></a>3.1 INSERT触发器</h3><ul><li>在INSERT触发器内，可引用一个名为NEW的虚拟表，访问被插入的行</li><li>在BEFORE INSERT触发器中，NEW中的值也可以被更新</li><li>对于AUTO_INCREMENT，NEW在INSERT执行之前包含0，在INSERT执行之后包含新的自动生成的值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TRIGGER neworder AFTER INSERT ON orders<br>FOR EACH ROW SELECT NEW.order_num;<br>#MySQL5后不允许触发器返回任何结果,修改为：<br>CREATE TRIGGER neworder AFTER INSERT ON orders<br>FOR EACH ROW SELECT NEW.order_num INTO @ordernum;<br></code></pre></div></td></tr></table></figure><p>为测试这个触发器，试着插入一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO orders (order_date, cust_id) VALUES(Now(), 10001);<br></code></pre></div></td></tr></table></figure><h3 id="3-2-DELETE触发器"><a href="#3-2-DELETE触发器" class="headerlink" title="3.2 DELETE触发器"></a>3.2 DELETE触发器</h3><ul><li>在DELETE触发器代码内，可引用一个名为OLD的虚拟表，访问被删除的行</li><li>OLD中的值全部只读，不能更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TRIGGER deleteorder BEFORE INSERT ON orders FOR EACH ROW <br>BEGIN<br>INSERT INTO archive_orders(order_num, order_date, cust_id)<br>VALUES(OLD.order_num, OLD.order_date, OLD.cust_id);<br>END;<br></code></pre></div></td></tr></table></figure><p>使用BEFORE DELETE优点：如果由于某种原因，订单不能存档，DELETE本身将被放弃。</p><h3 id="3-3-UPDATE触发器"><a href="#3-3-UPDATE触发器" class="headerlink" title="3.3 UPDATE触发器"></a>3.3 UPDATE触发器</h3><ul><li>可以引用OLD虚拟表访问以前的值，NEW虚拟表访问新值</li><li>BEFORE UPDATE触发器中，NEW值也可能被更新</li><li>OLD中的值全部都是只读的，不能更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TRIGGER updatevendor BEFORE UPDATE ON vendos<br>FOR EACH ROW SET NEW.vend_state = Upper(NEW.vend_state);<br></code></pre></div></td></tr></table></figure><h1 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h1><h2 id="1-事务处理"><a href="#1-事务处理" class="headerlink" title="1. 事务处理"></a>1. 事务处理</h2><p>事务处理可以用来维护数据库的完整性，保证成批的MySQL操作要么完全执行，要么完全不执行。</p><ul><li>事务：指一组SQL语句。</li><li>回退：指撤销指定的SQL语句的过程。</li><li>提交：指将为存储的SQL语句结果写入数据库表。</li><li>保留点：事务处理中设置的临时占位符。</li></ul><h2 id="2-控制事务处理"><a href="#2-控制事务处理" class="headerlink" title="2. 控制事务处理"></a>2. 控制事务处理</h2><p>使用下面的语句来表示事务的开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">START TRANSACTION;<br></code></pre></div></td></tr></table></figure><h3 id="2-1-回退（ROLLBACK"><a href="#2-1-回退（ROLLBACK" class="headerlink" title="2.1 回退（ROLLBACK"></a>2.1 回退（ROLLBACK</h3><p>MySQL使用ROLLBACK命令来回退MySQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM ordertotals;<br>START TRANSACTION;<br>DELETE FROM ordertotals;<br>SELECT * FROM ordertotals;<br>ROLLBACK;<br>SELECT * FROM ordertotals;<br></code></pre></div></td></tr></table></figure><p>不能对SELECT语句回退（没有意义）。不能回退REATE和DROP操作，它们不会被撤销</p><h3 id="2-2-提交（COMMIT"><a href="#2-2-提交（COMMIT" class="headerlink" title="2.2 提交（COMMIT"></a>2.2 提交（COMMIT</h3><p>一般MySQL语句都是直接对数据库表执行和编写（隐含提交）。在事务处理中，提交不会隐含进行，要明确使用COMMIT语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">START TRANSACTION;<br>DELETE FROM orderitems WHERE order_num = 20010;<br>DELETE FROM orders WHERE order_num = 20010;<br>COMMIT;<br></code></pre></div></td></tr></table></figure><p>涉及两个表，使用事务处理来保证订单不被部分删除。</p><h3 id="2-3-使用保留点"><a href="#2-3-使用保留点" class="headerlink" title="2.3 使用保留点"></a>2.3 使用保留点</h3><p>为了支持回退部分事务处理，必须能在事务处理块中某个合适的位置放置占位符，如果需要回退，可以回退到某个占位符。创建占位符可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SAVEPOINT delete1; #delete1 唯一标识<br></code></pre></div></td></tr></table></figure><p>回退到保留点：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ROLLBACK TO delete1;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-更改默认的提交行为"><a href="#2-4-更改默认的提交行为" class="headerlink" title="2.4 更改默认的提交行为"></a>2.4 更改默认的提交行为</h3><p>默认的MySQL行为是自动提交所有更改。为指示MySQL不自动提交，需要：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SET autocommit = 0;<br></code></pre></div></td></tr></table></figure><p>设置autocommit为0（假）。autocommit标志是针对每个连接而不是服务器的。</p><h1 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a>全球化和本地化</h1><h2 id="1-字符集和校对顺序"><a href="#1-字符集和校对顺序" class="headerlink" title="1. 字符集和校对顺序"></a>1. 字符集和校对顺序</h2><ul><li>字符集：字母和符号的集合</li><li>编码：某个字符集成员的内部表示</li><li>校对：规定字符如何比较的指令</li></ul><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><h2 id="1-访问控制"><a href="#1-访问控制" class="headerlink" title="1. 访问控制"></a>1. 访问控制</h2><p>需要给用户提供他们所需的访问权，且仅提供他们所需的访问权，这就是访问控制。管理访问控制需要创建和管理用户账号。</p><h2 id="2-管理用户"><a href="#2-管理用户" class="headerlink" title="2. 管理用户"></a>2. 管理用户</h2><p>MySQL用户账号和信息存储在名为mysql和MySQL的数据库中。直接访问它之一是获取所有用户账号列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">USE mysql;<br>SELECT &#x27;user&#x27; FROM user;<br></code></pre></div></td></tr></table></figure><h3 id="2-1-创建用户账号"><a href="#2-1-创建用户账号" class="headerlink" title="2.1 创建用户账号"></a>2.1 创建用户账号</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE USER ben IDENTIFIED BY &#x27;p@$$w0rd&#x27;;<br></code></pre></div></td></tr></table></figure><p>创建用户账号时不一定需要口令。这个列子用IDENTIFIED BY ’p@$$W0rd’给出了一个口令。</p><h3 id="2-2-删除用户账号"><a href="#2-2-删除用户账号" class="headerlink" title="2.2 删除用户账号"></a>2.2 删除用户账号</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP USER ben;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-设置访问权限"><a href="#2-3-设置访问权限" class="headerlink" title="2.3 设置访问权限"></a>2.3 设置访问权限</h3><p>为看到赋予用户账号的权限使用SHOW GRANTS FRO</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SHOW GRANTS FOR root;<br></code></pre></div></td></tr></table></figure><p>输出结果显示用户bforta有一个权限USAGE ON。USAGE表示根本没有权限（我知道，这不很直观），所以，此结果表示在任意数据库和任意表上对任何东西没有权限。</p><p>为<strong>设置权限</strong>，使用GRANT语句。至少给出以下信息：</p><ul><li>要授予的权限</li><li>被授予访问权限的数据库或表</li><li>用户名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">GRANT SELECT ON  crashcourse.* TO ben;<br></code></pre></div></td></tr></table></figure><p>授予用户在crashcourse的所有表上使用SELECT。</p><p><strong>撤销指定权限</strong>，要撤销的权限必须存在，否则会出错</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">REVOKE SELECT ON crashcourse.* FROM ben;<br></code></pre></div></td></tr></table></figure><p><strong>权限层次：</strong></p><ul><li>整个服务器GRANT ALL和REVOKE ALL</li><li>真个数据可， 使用ON DATABASE.*；</li><li>特定的表，使用ON databases.table；</li><li>特定的列</li><li>特定的存储过程</li></ul><h2 id="3-更改口令（密码"><a href="#3-更改口令（密码" class="headerlink" title="3. 更改口令（密码"></a>3. 更改口令（密码</h2><p>更改用户口令，使用SET PASSWORD</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SET PASSWORD FRO ben = Password(&#x27;n3w p@$$0rd&#x27;);<br></code></pre></div></td></tr></table></figure><p>新口令必须传递到Password()函数进行加密。</p><p>设置自己的口令：在不指定用户时，SET PASSWORD更新当前登录用户的口令</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SET PASSWORD = Password(&#x27;root&#x27;);<br></code></pre></div></td></tr></table></figure><h1 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h1><h1 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h1>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker之qinglong</title>
    <link href="/2021/10/31/Docker%E5%AE%89%E8%A3%85%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/"/>
    <url>/2021/10/31/Docker%E5%AE%89%E8%A3%85%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前提条件"><a href="#1-前提条件" class="headerlink" title="1. 前提条件"></a>1. 前提条件</h2><p>安装了docker</p><h2 id="2-青龙面板安装"><a href="#2-青龙面板安装" class="headerlink" title="2.青龙面板安装"></a>2.青龙面板安装</h2><h3 id="拉取青龙的镜像文件（官方）"><a href="#拉取青龙的镜像文件（官方）" class="headerlink" title="拉取青龙的镜像文件（官方）"></a>拉取青龙的镜像文件（官方）</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker pull whyour/qinglong:latest<br></code></pre></div></td></tr></table></figure><h3 id="创建容器qinglong-ninjia"><a href="#创建容器qinglong-ninjia" class="headerlink" title="创建容器qinglong + ninjia"></a>创建容器qinglong + ninjia</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -dit \<br>  -v $PWD/ql/config:/ql/config \<br>  -v $PWD/ql/log:/ql/log \<br>  -v $PWD/ql/db:/ql/db \<br>  -v $PWD/ql/repo:/ql/repo \<br>  -v $PWD/ql/raw:/ql/raw \<br>  -v $PWD/ql/scripts:/ql/scripts \<br>  -v $PWD/ql/jbot:/ql/jbot \<br>  -v $PWD/ql/ninja:/ql/ninja \<br>  -p 5700:5700 \<br>  -p 5701:5701 \<br>  --name qinglong \<br>  --hostname qinglong \<br>  --restart unless-stopped \<br>  whyour/qinglong:latest<br></code></pre></div></td></tr></table></figure><p>进入qinglong bash</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker exec -it qinglong bash<br></code></pre></div></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://ghproxy.com//https://github.com/showmexlq/Waikiki_ninja /ql/ninja<br>cd /ql/ninja/backend<br>pnpm install<br>cp .env.example .env # 如有需要, 修改.env<br>pm2 start<br>cp sendNotify.js /ql/data/scripts/sendNotify.js<br></code></pre></div></td></tr></table></figure><p>将以下内容粘贴到 <code>extra.sh</code>（重启后自动更新并启动 Ninja）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /ql/ninja/backend<br>git checkout .<br>git pull<br>pnpm install<br>pm2 start<br>cp sendNotify.js /ql/data/scripts/sendNotify.js<br></code></pre></div></td></tr></table></figure><h3 id="定时任务："><a href="#定时任务：" class="headerlink" title="定时任务："></a>定时任务：</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">GithubProxyUrl=&quot;https://git.metauniverse-cn.com/&quot;<br>ql repo https://github.com/KingRan/KR.git &quot;jd_|jx_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;<br></code></pre></div></td></tr></table></figure><p>账号列表：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cat /ql/config/auth.json<br></code></pre></div></td></tr></table></figure><h2 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新并重启青龙</span><br>ql update                                                    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行自定义脚本extra.sh</span><br>ql extra                                                     <br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加单个脚本文件</span><br>ql raw &lt;file_url&gt;                                             <br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加单个仓库的指定脚本</span><br>ql repo &lt;repo_url&gt; &lt;whitelist&gt; &lt;blacklist&gt; &lt;dependence&gt; &lt;branch&gt;   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除旧日志</span><br>ql rmlog &lt;days&gt;                                              <br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动tg-bot</span><br>ql bot                                                       <br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测青龙环境并修复</span><br>ql check                                                     <br><span class="hljs-meta prompt_"># </span><span class="language-bash">重置登录错误次数</span><br>ql resetlet                                                  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁用两步登录</span><br>ql resettfa                                                  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">依次执行，如果设置了随机延迟，将随机延迟一定秒数</span><br>task &lt;file_path&gt;                                             <br><span class="hljs-meta prompt_"># </span><span class="language-bash">依次执行，无论是否设置了随机延迟，均立即运行，前台会输出日，同时记录在日志文件中</span><br>task &lt;file_path&gt; now                                         <br><span class="hljs-meta prompt_"># </span><span class="language-bash">并发执行，无论是否设置了随机延迟，均立即运行，前台不产生日，直接记录在日志文件中，且可指定账号执行</span><br>task &lt;file_path&gt; conc &lt;env_name&gt; &lt;account_number&gt;(可选的) <br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定账号执行，无论是否设置了随机延迟，均立即运行</span> <br>task &lt;file_path&gt; desi &lt;env_name&gt; &lt;account_number&gt;         <br></code></pre></div></td></tr></table></figure><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> git@github.com:whyour/qinglong.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> qinglong</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> .env.example .<span class="hljs-built_in">env</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yarn install</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yarn start</span><br></code></pre></div></td></tr></table></figure><h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p><a href="https://gitee.com/link?target=https://t.me/jiao_long">telegram频道</a></p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo docker images # 查看镜像列表<br>sudo docker ps -a #查看容器列表<br><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -d \<br> --name jellyfin \<br> --user uid:gid \<br> --net=host \<br> --volume ~/lenovo120g/jellyfin/config:/config \<br> --volume ~/lenovo120g/jellyfin/cache:/cache \<br> --mount type=bind,source=~/lenovo120g/jellyfin/media,target=/media \<br> --restart=unless-stopped \<br> jellyfin/jellyfin<br> <br> sudo docker run -d \<br> --name jellyfin \<br> --user 0:0\<br> --net=host \<br> --volume /jellyfin/config:/config \<br> --volume /jellyfin/cache:/cache \<br> --restart=unless-stopped \<br> jellyfin/jellyfin<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7更换国内源</title>
    <link href="/2021/10/31/CentOS7%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    <url>/2021/10/31/CentOS7%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="1-替换CentOS的yum-源-为-国内的yum源–阿里yum源"><a href="#1-替换CentOS的yum-源-为-国内的yum源–阿里yum源" class="headerlink" title="1. 替换CentOS的yum 源 为 国内的yum源–阿里yum源"></a>1. 替换CentOS的yum 源 为 国内的yum源–阿里yum源</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1.备份"></a>1.备份</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>CentOS-Base.repo.bak<br></code></pre></div></td></tr></table></figure><h3 id="2-下载新的-CentOS-Base-repo-到-x2F-etc-x2F-yum-repos-d-x2F"><a href="#2-下载新的-CentOS-Base-repo-到-x2F-etc-x2F-yum-repos-d-x2F" class="headerlink" title="2.下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F;"></a>2.下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F;</h3><p><strong>CentOS6</strong></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget -O <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo http:/</span><span class="hljs-regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="hljs-number">6</span>.repo<br></code></pre></div></td></tr></table></figure><p><strong>CentOS7</strong></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget -O <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo http:/</span><span class="hljs-regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="hljs-number">7</span>.repo<br></code></pre></div></td></tr></table></figure><p>wget 命令 -O 参数含义：</p><blockquote><p>-O  –output-document&#x3D;文件，将数据写入此文件中。</p><p>wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p>的含义即为<br>将 <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a> 文件中的数据写入到&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo文件中，CentOS-Base.repo文件不需要事先创建。</p><p>参考链接：wget命令详解 <a href="https://www.jianshu.com/p/2e2ba8ecc22a">https://www.jianshu.com/p/2e2ba8ecc22a</a></p></blockquote><h3 id="3-运行yum-makecache生成缓存"><a href="#3-运行yum-makecache生成缓存" class="headerlink" title="3.运行yum makecache生成缓存"></a>3.运行yum makecache生成缓存</h3><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum makecache</span><br></code></pre></div></td></tr></table></figure><p>这一步还是比较耗时的，而且速度不快几k到几十k每秒之间，可以不执行。</p><p>-———————————————-</p><h2 id="2-替换CentOS的yum-源-为-国内的yum源–清华yum源"><a href="#2-替换CentOS的yum-源-为-国内的yum源–清华yum源" class="headerlink" title="2. 替换CentOS的yum 源 为 国内的yum源–清华yum源"></a>2. 替换CentOS的yum 源 为 国内的yum源–清华yum源</h2><h3 id="1-备份-1"><a href="#1-备份-1" class="headerlink" title="1.备份"></a>1.备份</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>CentOS-Base.repo.bak<br></code></pre></div></td></tr></table></figure><h3 id="2-创建-x2F-etc-x2F-yum-repos-d-x2F"><a href="#2-创建-x2F-etc-x2F-yum-repos-d-x2F" class="headerlink" title="2.创建 &#x2F;etc&#x2F;yum.repos.d&#x2F;"></a><strong>2.创建 &#x2F;etc&#x2F;yum.repos.d&#x2F;</strong></h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">touch <span class="hljs-regexp">/etc/yum</span>.repos.d/CentOS-Base.repo<br></code></pre></div></td></tr></table></figure><h3 id="3-向-x2F-etc-x2F-yum-repos-d-x2F-CentOS-Base-repo-写入-清华大学yum源配置"><a href="#3-向-x2F-etc-x2F-yum-repos-d-x2F-CentOS-Base-repo-写入-清华大学yum源配置" class="headerlink" title="3.向 &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo 写入 清华大学yum源配置"></a>3.向 &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo 写入 清华大学yum源配置</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">name=CentOS-<span class="hljs-variable">$releasever</span> - Basebaseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/os/</span><span class="hljs-variable">$basearch</span><span class="hljs-regexp">/gpgkey=file:/</span><span class="hljs-regexp">//</span>etc<span class="hljs-regexp">/pki/</span>rpm-gpg<span class="hljs-regexp">/RPM-GPG-KEY-CentOS-7name=CentOS-$releasever - Updatesbaseurl=https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/</span>centos<span class="hljs-regexp">/$releasever/u</span>pdates<span class="hljs-regexp">/$basearch/g</span>pgkey=file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/rpm-gpg/</span>RPM-GPG-KEY-CentOS-<span class="hljs-number">7</span>name=CentOS-<span class="hljs-variable">$releasever</span> - Extrasbaseurl=https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/centos/</span><span class="hljs-variable">$releasever</span><span class="hljs-regexp">/extras/</span><span class="hljs-variable">$basearch</span><span class="hljs-regexp">/gpgkey=file:/</span><span class="hljs-regexp">//</span>etc<span class="hljs-regexp">/pki/</span>rpm-gpg<span class="hljs-regexp">/RPM-GPG-KEY-CentOS-7name=CentOS-$releasever - Plusbaseurl=https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/</span>centos<span class="hljs-regexp">/$releasever/</span>centosplus<span class="hljs-regexp">/$basearch/g</span>pgkey=file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/rpm-gpg/</span>RPM-GPG-KEY-CentOS-<span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改CentOS7hosts文件解决GitHub超时问题</title>
    <link href="/2021/10/30/%E4%BF%AE%E6%94%B9CentOS7hosts%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3GitHub%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/30/%E4%BF%AE%E6%94%B9CentOS7hosts%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3GitHub%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="1-获取Github相关网站的ip"><a href="#1-获取Github相关网站的ip" class="headerlink" title="1.获取Github相关网站的ip"></a>1.获取Github相关网站的ip</h3><p>访问<a href="https://www.ipaddress.com,找到页面中下方的“ip/">https://www.ipaddress.com，找到页面中下方的“IP</a> Address Tools - Quick Links”，分别输入github.global.ssl.fastly.net</p><p>github.com</p><p>查询ip地址。</p><h3 id="2-修改CentOS-7-hosts文件"><a href="#2-修改CentOS-7-hosts文件" class="headerlink" title="2. 修改CentOS 7 hosts文件"></a>2. 修改CentOS 7 hosts文件</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo vi /etc/hosts<br></code></pre></div></td></tr></table></figure><p>添加如下两行</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">199.232.69.194</span> github.global.ssl.fastly.net<br><span class="hljs-number">140.82.112.4</span> github.com<br></code></pre></div></td></tr></table></figure><h3 id="3-刷新网络设置"><a href="#3-刷新网络设置" class="headerlink" title="3. 刷新网络设置"></a>3. 刷新网络设置</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/etc/init.d/network restart<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7+OpenVPN安装教程</title>
    <link href="/2021/10/30/OpenVPN%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2021/10/30/OpenVPN%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p><strong><a href="https://github.com/angristan/openvpn-install">openvpn 安装</a></strong></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="0-su"><a href="#0-su" class="headerlink" title="0. su"></a>0. su</h3><blockquote><p>您需要以 root 身份运行脚本并启用 TUN 模块。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su<br>root#这步要输入密码，我的是root<br>cd ~<br></code></pre></div></td></tr></table></figure><h3 id="1-拉取"><a href="#1-拉取" class="headerlink" title="1. 拉取"></a>1. 拉取</h3><p>#<a href="https://ghproxy.com/">https://ghproxy.com/</a> 是代理。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">curl -O https://ghproxy.com/https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh<br></code></pre></div></td></tr></table></figure><h3 id="2-上执行权限"><a href="#2-上执行权限" class="headerlink" title="2. 上执行权限"></a>2. 上执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod +x openvpn-install.sh<br></code></pre></div></td></tr></table></figure><h3 id="3-运行安装脚本"><a href="#3-运行安装脚本" class="headerlink" title="3. 运行安装脚本"></a>3. 运行安装脚本</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./openvpn-install.sh<br></code></pre></div></td></tr></table></figure><h3 id="4-安装过程"><a href="#4-安装过程" class="headerlink" title="4. 安装过程"></a>4. 安装过程</h3><blockquote><p>第一次运行它时，您必须跟随助手并回答几个问题来设置您的 VPN 服务器。</p></blockquote><p>默认的情况下一路默认就行</p>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AcWing第18场周赛</title>
    <link href="/2021/09/28/AcWing%E7%AC%AC18%E5%9C%BA%E5%91%A8%E8%B5%9B/"/>
    <url>/2021/09/28/AcWing%E7%AC%AC18%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="第18场周赛"><a href="#第18场周赛" class="headerlink" title="第18场周赛"></a>第18场周赛</h1><p>地址：<a href="https://www.acwing.com/activity/content/introduction/73/">https://www.acwing.com/activity/content/introduction/73/</a></p><h2 id="战绩"><a href="#战绩" class="headerlink" title="战绩"></a>战绩</h2><table><thead><tr><th>A</th><th>B</th><th>C</th><th>得分</th><th>时间</th><th>排名</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td><td>2</td><td>0:30:33</td><td>186&#x2F;1061</td></tr></tbody></table><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="A-AcWing-3988-不同的数"><a href="#A-AcWing-3988-不同的数" class="headerlink" title="A: AcWing 3988. 不同的数"></a>A: AcWing 3988. 不同的数</h3><p>知识点：哈希</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, k;<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        mp[x] = i;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">size</span>() &lt; k) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, idx] : mp) &#123;<br>            <span class="hljs-keyword">if</span> (++cnt &gt; k) <span class="hljs-keyword">break</span>;<br>            cout &lt;&lt; idx &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="B-AcWing-3989-看图做题"><a href="#B-AcWing-3989-看图做题" class="headerlink" title="B: AcWing 3989. 看图做题"></a>B: AcWing 3989. 看图做题</h3><p>知识点：找规律</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    cout &lt;&lt; <span class="hljs-number">6</span> * n * (n - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="C-3990-砍树"><a href="#C-3990-砍树" class="headerlink" title="C:3990. 砍树"></a>C:3990. 砍树</h3><p>知识点：贪心、思维题</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br>vector&lt;<span class="hljs-type">int</span>&gt; q[N];<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c : q[u]) &#123;<br>        <span class="hljs-keyword">if</span> (c == father) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> s = <span class="hljs-built_in">dfs</span>(c, u);<br>        <span class="hljs-keyword">if</span> (s % <span class="hljs-number">2</span>== <span class="hljs-number">0</span>) ans ++;<br>        sz += s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sz;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i ++) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        q[a].<span class="hljs-built_in">push_back</span>(b);<br>        q[b].<span class="hljs-built_in">push_back</span>(a);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>    <br>    cout &lt;&lt; ans;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>AcWing周赛</tag>
      
      <tag>AcWing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Acwing模板</title>
    <link href="/2021/09/25/acwing%E6%A8%A1%E6%9D%BF/"/>
    <url>/2021/09/25/acwing%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="0-语法与STL"><a href="#0-语法与STL" class="headerlink" title="0 语法与STL"></a>0 语法与STL</h1><h2 id="0-1-重定向输入输出"><a href="#0-1-重定向输入输出" class="headerlink" title="0.1 重定向输入输出"></a>0.1 重定向输入输出</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout); <br></code></pre></div></td></tr></table></figure><h2 id="0-2-程序运行时间"><a href="#0-2-程序运行时间" class="headerlink" title="0.2 程序运行时间"></a>0.2 程序运行时间</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">double</span> start,finish; <span class="hljs-comment">/* 开始时间,结束时间 */</span> <br>start=(<span class="hljs-type">double</span>)<span class="hljs-built_in">clock</span>(); <span class="hljs-comment">/* 我的time.h内没有CLOCKS_PER_SEC */</span> <br><span class="hljs-comment">//中间放要测试的代码</span><br>finish=(<span class="hljs-type">double</span>)<span class="hljs-built_in">clock</span>(); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4fms&quot;</span>,(finish-start)); <br></code></pre></div></td></tr></table></figure><h2 id="0-3"><a href="#0-3" class="headerlink" title="0.3"></a>0.3</h2><p>c++常用函数</p><table><thead><tr><th>函数名</th><th>解释</th><th>返回值类型</th></tr></thead><tbody><tr><td><code>isalpha()</code></td><td>判断是否是字母</td><td>bool</td></tr><tr><td><code>tolower()</code></td><td>将字符转为小写</td><td>char</td></tr><tr><td><code>ceil()</code></td><td>向上取整</td><td></td></tr><tr><td><code>floor()</code></td><td>向下取整</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>函数名称返回值【输入是字符char】<br>isalnum()如果是字母或数字，返回true<br>isalpha()如果是字母，返回true<br>isdigit()如果是数字，返回true<br>islower()如果是小写字母，返回true<br>ispunct()<br>如果是标点符号，返回true</p><p>isspace()如果是空白字符，包括空格、进纸、换行符、回车、制表符等，返回true<br>isupper()如果是大写字符，返回true<br>tolower()如果是大写字符，返回其小写<br>toupper()如果是小写字符，返回其大写<br>isxdigit()如果是16进制数，返回true，如0-9、a-f、A-F<br>iscntrl()如果是控制字符，返回true<br>isgraph()如果是除空格以外的打印字符，返回true<br>isprint()如果是打印字符，返回true</p><h3 id="0-1-1-结构体定义（带初始化）"><a href="#0-1-1-结构体定义（带初始化）" class="headerlink" title="0.1.1 结构体定义（带初始化）"></a>0.1.1 结构体定义（带初始化）</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> _x, <span class="hljs-type">int</span> _y) &#123;<br>        x = _x;<br>        y = _y;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="0-4-对拍"><a href="#0-4-对拍" class="headerlink" title="0.4 对拍"></a>0.4 对拍</h2><h1 id="1-基础算法"><a href="#1-基础算法" class="headerlink" title="1 基础算法"></a>1 基础算法</h1><h2 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h2><h3 id="1-1-1-快速排序"><a href="#1-1-1-快速排序" class="headerlink" title="1.1.1 快速排序"></a>1.1.1 快速排序</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> x = q[(l + r) / <span class="hljs-number">2</span>], i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span> (q[++ i] &lt; x);<br>        <span class="hljs-keyword">while</span> (q[-- j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j);<br>    <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-1-2-快速选择"><a href="#1-1-2-快速选择" class="headerlink" title="1.1.2 快速选择"></a>1.1.2 快速选择</h3><p>选择数组里第k小数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> a[l];<br>    <span class="hljs-type">int</span> x = a[(l + r) &gt;&gt; <span class="hljs-number">1</span>], i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span> (a[ ++ i] &lt; x);<br>        <span class="hljs-keyword">while</span> (a[ -- j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i], a[j]);<br>    &#125; <br>    <span class="hljs-type">int</span> sl = j - l + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (sl &gt;= k) <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(l, j, k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r, k - sl);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-1-2-归并排序"><a href="#1-1-2-归并排序" class="headerlink" title="1.1.2 归并排序"></a>1.1.2 归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid),<span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br>    <br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        tmp[k ++] = q[i] &lt;= q[j] ? q[i ++] : q[j ++];<br>        <br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++] = q[i ++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++] = q[j ++];<br>    <br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++) q[i] = tmp[j];<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-2-查找"><a href="#1-2-查找" class="headerlink" title="1.2 查找"></a>1.2 查找</h2><h3 id="1-2-1-二分查找"><a href="#1-2-1-二分查找" class="headerlink" title="1.2.1 二分查找"></a>1.2.1 二分查找</h3><p>x的左边界</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (q[mid] &gt;= x) r = mid;<br>    <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>x的右边界</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>    <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (q[mid] &lt;= x) l = mid;<br>    <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br>cout &lt;&lt; l &lt;&lt; endl;<br></code></pre></div></td></tr></table></figure><h2 id="1-3-高精度"><a href="#1-3-高精度" class="headerlink" title="1.3 高精度"></a>1.3 高精度</h2><h3 id="1-3-1-高精度加法"><a href="#1-3-1-高精度加法" class="headerlink" title="1.3.1 高精度加法"></a>1.3.1 高精度加法</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//C = A + B</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || i &lt; B.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(t);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-3-2-高精度减法"><a href="#1-3-2-高精度减法" class="headerlink" title="1.3.2 高精度减法"></a>1.3.2 高精度减法</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//(bool) A &gt;= B</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() != B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>() &gt; B.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) <br>        <span class="hljs-keyword">if</span> (A[i] != B[i])<br>            <span class="hljs-keyword">return</span> A[i] &gt; B[i];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//C = A - B</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span> </span><br><span class="hljs-function">    <span class="hljs-title">if</span> <span class="hljs-params">(!cmp(A, B))</span> <span class="hljs-keyword">return</span> <span class="hljs-title">sub</span><span class="hljs-params">(B, A)</span></span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ ) &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//去掉前导零</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="1-3-3-高精度乘法（vector-int"><a href="#1-3-3-高精度乘法（vector-int" class="headerlink" title="1.3.3 高精度乘法（vector * int)"></a>1.3.3 高精度乘法（vector * int)</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || t; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-3-4-高精度除法"><a href="#1-3-4-高精度除法" class="headerlink" title="1.3.4 高精度除法"></a>1.3.4 高精度除法</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//C = 商， r = 余</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;r)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-4-前缀和差分"><a href="#1-4-前缀和差分" class="headerlink" title="1.4 前缀和差分"></a>1.4 前缀和差分</h2><h3 id="1-4-1-一维前缀和"><a href="#1-4-1-一维前缀和" class="headerlink" title="1.4.1 一维前缀和"></a>1.4.1 一维前缀和</h3><blockquote><p>含义:s[i] &#x3D; a[1] + a[2] + … + a[i]</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) s[i] = s[i - <span class="hljs-number">1</span>] + a[i];<br></code></pre></div></td></tr></table></figure><h3 id="1-4-2-二维前缀和"><a href="#1-4-2-二维前缀和" class="headerlink" title="1.4.2 二维前缀和"></a>1.4.2 二维前缀和</h3><blockquote><p>含义: s[i][j] &#x3D; a[0][0] 与a[i][j] 组成的矩阵的和</p><p>二维矩阵和： s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>            <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) <br>            s[i][j] = s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + a[i][j];<br></code></pre></div></td></tr></table></figure><h3 id="1-4-3-一维差分"><a href="#1-4-3-一维差分" class="headerlink" title="1.4.3 一维差分"></a>1.4.3 一维差分</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    b[l] += x;<br>    b[r + <span class="hljs-number">1</span>] -= x;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-4-4-二维差分"><a href="#1-4-4-二维差分" class="headerlink" title="1.4.4 二维差分"></a>1.4.4 二维差分</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a[N][N], b[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    b[x1][y1] += x;<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= x; <br>    b[x1][y2 + <span class="hljs-number">1</span>] -= x;<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += x;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-5-双指针算法"><a href="#1-5-双指针算法" class="headerlink" title="1.5 双指针算法"></a>1.5 双指针算法</h2><p><strong>核心：将<code>O(n^2)</code>的算法， 利用双指针能降为<code>O(n)</code></strong></p><p><strong>思路：先写一个暴力做法， 看一下i和j有没有单调规律</strong></p><h3 id="1-5-1-模板1"><a href="#1-5-1-模板1" class="headerlink" title="1.5.1 模板1"></a>1.5.1 模板1</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>    <span class="hljs-comment">//加入i</span><br>    s[a[i]] ++;<span class="hljs-comment">//s[]，计数器</span><br>    <span class="hljs-comment">//假如不满足， 右移j直到满足</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">check</span>()) j ++;<br>    <span class="hljs-comment">//记录答案</span><br>    ans = <span class="hljs-built_in">max</span>(ans, j - i + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-6-位运算"><a href="#1-6-位运算" class="headerlink" title="1.6 位运算"></a>1.6 位运算</h2><h3 id="1-6-1-求n的二进制表示中第k位"><a href="#1-6-1-求n的二进制表示中第k位" class="headerlink" title="1.6.1 求n的二进制表示中第k位"></a>1.6.1 求<code>n</code>的二进制表示中第k位</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">(n &gt;&gt;) k &amp; <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h3 id="1-6-2-x的最后一位1"><a href="#1-6-2-x的最后一位1" class="headerlink" title="1.6.2 x的最后一位1"></a>1.6.2 x的最后一位1</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x; <span class="hljs-comment">// x &amp; (~x + 1) </span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-7-离散化"><a href="#1-7-离散化" class="headerlink" title="1.7 离散化"></a>1.7 离散化</h2><p>大范围内少数量的数， 映射到从0开始的一段连续的值（下标）；</p><ol><li>可能存在重复元素 （去重）</li><li>如何算出x离散化后的值 （二分）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">300010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[N], s[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; alls;<br>vector&lt;PII&gt; add, query;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span> ;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-8-区间合并"><a href="#1-8-区间合并" class="headerlink" title="1.8 区间合并"></a>1.8 区间合并</h2><p>将存在交集的区间合并为一个区间。</p><p>思路：</p><ol><li>按左边界为主序、右边界为次序排序</li><li>初始化一个初始区间（初始手里的区间）（起始边界都为负无穷）</li><li>从左往右遍历排序好的区间， 做如下合并操作：<ol><li>如果遍历到的区间左边界大于当前手里区间的右边界， 说明从该区间往后的区间都不可能与当前区间合并（即不重合、没有交集）（因为区间是排序好的），则手里区间是一个已合并后的确定区间，将该区间加入合并后的数组。手里区间替换为当前区间</li><li>如果遍历到的区间左边界小于当前手里区间的右边界， 说明两个区间存在交集、可以合并。则合并后的区间右边界为两者区间的最右边界，左边界不变（因为是按左边界排序，手里区间的左边界必&lt;&#x3D;当前区间的左边界， 所以不用考虑左边界）</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt; &amp;segs)</span> </span>&#123;<br>    vector&lt;PII&gt; res;<br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(), segs.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs) <br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first) &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125; <span class="hljs-keyword">else</span> <br>            ed = <span class="hljs-built_in">max</span>(ed, seg.second);<br>            <br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br>    <br>    segs = res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2 数据结构"></a>2 数据结构</h1><h2 id="2-1-单链表"><a href="#2-1-单链表" class="headerlink" title="2.1 单链表"></a>2.1 单链表</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> head, e[N], ne[N], idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    head = <span class="hljs-number">-1</span>, idx = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//头插</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_to_head</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    e[idx] = x, ne[idx] = head, head = idx ++;<br>&#125;<br><br><span class="hljs-comment">//k后插x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    e[idx] = x, ne[idx] = ne[k], ne[k] = idx ++;<br>&#125;<br><br><span class="hljs-comment">//移除k后一个</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>    ne[k] = ne[ne[k]];<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-2-双链表"><a href="#2-2-双链表" class="headerlink" title="2.2 双链表"></a>2.2 双链表</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> l[N], r[N], e[N], idx;<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">//在k的右边插入x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    e[idx] = x;<br>    l[idx] = k;<br>    r[idx] = r[k];<br>    l[r[k]] = idx;<br>    r[k] = idx ++;<br>&#125;<br><br><span class="hljs-comment">//删除第k点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>    r[l[k]] = r[k];<br>    l[r[k]] = l[k];<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-栈"><a href="#2-3-栈" class="headerlink" title="2.3 栈"></a>2.3 栈</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> q[N], tt = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//push</span><br>q[tt ++] = x;<br><br><span class="hljs-comment">//pop</span><br>tt --;<br><br><span class="hljs-comment">//empty?</span><br>tt &gt;= <span class="hljs-number">0</span>?<br><br></code></pre></div></td></tr></table></figure><h2 id="2-4-队列"><a href="#2-4-队列" class="headerlink" title="2.4 队列"></a>2.4 队列</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> q[N], hh, tt;<br> <span class="hljs-comment">//push x – 向队尾插入一个数 x；</span><br>q[++ tt] = x;<br><span class="hljs-comment">// pop – 从队头弹出一个数；</span><br>++ hh;<br><span class="hljs-comment">// empty – 判断队列是否为空；</span><br>cout &lt;&lt; (hh &lt;= tt ? <span class="hljs-string">&quot;NO&quot;</span> : <span class="hljs-string">&quot;YES&quot;</span>) &lt;&lt; endl;<br><span class="hljs-comment">// query – 查询队头元素。</span><br>cout &lt;&lt; q[hh] &lt;&lt; endl;<br></code></pre></div></td></tr></table></figure><h2 id="2-4-单调栈"><a href="#2-4-单调栈" class="headerlink" title="2.4 单调栈"></a>2.4 单调栈</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> stk[N], a[N], tt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    tt = <span class="hljs-number">-1</span>;<br>    stk[ ++ tt] = <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//单调递增</span><br><span class="hljs-keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= a[i]) tt --;<br>stk[++ tt] = x;<br></code></pre></div></td></tr></table></figure><h2 id="2-5-滑动窗口-（单调队列）"><a href="#2-5-滑动窗口-（单调队列）" class="headerlink" title="2.5 滑动窗口 （单调队列）"></a>2.5 滑动窗口 （单调队列）</h2><ol><li>先考虑暴力解法</li><li>考虑能不能去掉其中一些元素</li><li>考虑去掉元素后是否构成单调队列</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> a[N], q[N];<br><br><span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>    <span class="hljs-keyword">if</span> (hh &lt;= tt &amp;&amp; q[hh] &lt; i - k + <span class="hljs-number">1</span>) hh ++;<br>    <span class="hljs-comment">//单调递增</span><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;<br>    q[++ tt] = i;<br>    <span class="hljs-keyword">if</span> (i &gt;= k - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[q[hh]]);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-6-KMP"><a href="#2-6-KMP" class="headerlink" title="2.6 KMP"></a>2.6 KMP</h2><p>利用要匹配的字符串p的前字串的最大前后缀匹配长度，来对当前s[i] !&#x3D; p[j]时的，利用next[j + 1]的最大匹配度，直接跳转到s[i]匹配p[j]的阶段，从而减少重复计算，优化时间复杂度的算法。</p><p>重点：</p><ul><li>理解前后缀</li><li>理解为什么当前不匹配时可以跳到上一个最大匹配下标</li><li>理解next数组</li><li>理解next数组生成。</li></ul><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, M = <span class="hljs-number">1000010</span>;<span class="hljs-comment">//字符数组的最大长度</span><br><span class="hljs-type">char</span> p[N], s[M];<span class="hljs-comment">//s中匹配字符串p，从下标1开始</span><br><span class="hljs-type">int</span> ne[N];<span class="hljs-comment">//p的next数组，从下标1开始</span><br></code></pre></div></td></tr></table></figure><h3 id="读入字符串"><a href="#读入字符串" class="headerlink" title="读入字符串"></a>读入字符串</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">cin &gt;&gt; n &gt;&gt; p + <span class="hljs-number">1</span> &gt;&gt; m &gt;&gt; s + <span class="hljs-number">1</span>;<span class="hljs-comment">//n为字符串p的长度，m为字符串s的长度。两个字符数组都从1开始，方便代码</span><br></code></pre></div></td></tr></table></figure><h3 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h3><p>next[i] ：前i个字符形成的字符串的，前缀和后缀最大匹配</p><p>因为真前缀和真后缀不能取同样的起点和终点。同样的起点和终点不构成真前缀和真后缀。所以字符串长度最少为2，才有意义。</p><p>即长度小于2时，最大匹配为0。所以next[i]的i从2开始计算</p><ul><li><code>ne[i]</code>：前i个字符的前后缀最大匹配长度</li><li><code>j</code>：前i-1个字符的前后缀最大匹配长度</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++) &#123;<span class="hljs-comment">//i:前i个字符，j：前i-1个字符最大匹配长度</span><br>    <span class="hljs-keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<span class="hljs-comment">//寻找最大匹配j，可能为0</span><br>    <span class="hljs-comment">//当j为0时说明前面的字串都没有任何匹配，就利用不到之前的匹配</span><br>    <span class="hljs-comment">//p[i]!=p[j + 1]，假如前一个字串的最大匹配长度是j，那么说明[1.j] 和[i-j,i-1]两个字串相同，那么就需要判断p[i]和p[j+1]</span><br>    <span class="hljs-comment">//1. p[i]==p[j+1]：即_abca时j=1, i=4;计算_abcab时，i=5, p[i]==p[j+1]，退出循环，即当前j对ne[i]是有效的</span><br>    <span class="hljs-comment">//2. p[i]!=p[j+1]: 即_abca时j=1, i=4;计算_abcaa时，i=5, p[i]!=p[j+1]意味着最大匹配不能以p[i-1]作为开始，要以多少作为开始，就从j=ne[j]开始（这里也利用到KMP思想），在这里j=ne[j]=ne[1]=0，这时j=0退出循环，即从头开始计算最大匹配</span><br>    <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j ++;<span class="hljs-comment">//while循环处理好最大匹配</span><br>    <span class="hljs-comment">//可能为0，当为0时意味着从新匹配，就需要判断p[i]是否和p[j+1]（记住这里j+1即第一个字符，字符串数组从下标1开始），相等则匹配度为1；</span><br>    <span class="hljs-comment">//当j不为0即意味着不需要从头开始匹配，那么也意味着p[i]必定等于p[j+1]，这时候j++;</span><br>    ne[i] = j;<span class="hljs-comment">//记录值</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="KMP求S中的P的字符串匹配"><a href="#KMP求S中的P的字符串匹配" class="headerlink" title="KMP求S中的P的字符串匹配"></a>KMP求S中的P的字符串匹配</h3><p>利用next数组求字符串匹配（查找S中是否存在子串P）。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++) &#123;<span class="hljs-comment">//i=1从头开始，一开始的最大匹配是j=0</span><br>    <span class="hljs-keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<span class="hljs-comment">//对于当前s[i]，求可利用的j的最大值</span><br>    <span class="hljs-comment">//如果j为0，意味从头开始匹配，j没法再退</span><br>    <span class="hljs-comment">//否则s[i]!=p[j+1]时，j=ne[j]表示左移P串，即拿s[i]与p[ne[j]]比较</span><br>    <span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j ++;<span class="hljs-comment">//如果两个字符相等，匹配长度+1</span><br>    <span class="hljs-keyword">if</span> (j == n)  &#123; <span class="hljs-comment">//如果匹配长度=p的长度，则匹配成功</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i - n);<br>        j = ne[j]; <span class="hljs-comment">//求下一个匹配时，需要将j回退，也就是考虑当前s[i]!=p[j],</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-7-Trie树"><a href="#2-7-Trie树" class="headerlink" title="2.7 Trie树"></a>2.7 Trie树</h2><h4 id="2-7-1-字符串Trie"><a href="#2-7-1-字符串Trie" class="headerlink" title="2.7.1 字符串Trie"></a>2.7.1 字符串Trie</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> s[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><br><span class="hljs-comment">//插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string str)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i++) &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!s[p][u]) s[p][u] = ++idx;<br>        p = s[p][u];<br>    &#125;<br>    cnt[p] ++;<br>&#125;<br><br><span class="hljs-comment">//查询</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(string str)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++) &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!s[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p = s[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-7-2-数字Trie"><a href="#2-7-2-数字Trie" class="headerlink" title="2.7.2 数字Trie"></a>2.7.2 数字Trie</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3100010</span>;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">2</span>], idx;<br><br><span class="hljs-comment">//0-1 Trie 插入x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i --) &#123;<br>        <span class="hljs-type">int</span> u = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;<br>        p = son[p][u];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//查询最大异或值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i --) &#123;<br>        <span class="hljs-type">int</span> u = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        ret &lt;&lt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (son[p][!u]) ret += <span class="hljs-number">1</span>, p = son[p][!u];<br>        <span class="hljs-keyword">else</span> p = son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-8-并查集"><a href="#2-8-并查集" class="headerlink" title="2.8 并查集"></a>2.8 并查集</h2><blockquote><p>1.合并两个集合</p><p>2.查询两个元素是否在同一个集合</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> p[N], len[N];<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++) p[i] = i, len[i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//查</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> p[x] == x? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>&#125;<br><br><span class="hljs-comment">//并</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-type">int</span> fx = <span class="hljs-built_in">find</span>(x);<br>    <span class="hljs-type">int</span> fy = <span class="hljs-built_in">find</span>(y);<br>    <span class="hljs-keyword">if</span> (fx == fy) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (len[fx] &lt; len[fy]) <span class="hljs-built_in">swap</span>(fx, fy);<br>    len[fx] += len[fy];<br>    p[fy] = fx;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-9-堆"><a href="#2-9-堆" class="headerlink" title="2.9 堆"></a>2.9 堆</h2><ol><li>插入x</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], len;<br><br><span class="hljs-comment">//down</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * u &lt;= len &amp;&amp; h[<span class="hljs-number">2</span> * u] &lt; h[t]) t = <span class="hljs-number">2</span> * u;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span> &lt;= len &amp;&amp; h[<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>] &lt; h[t]) t = <span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)  &#123;<br>        <span class="hljs-built_in">swap</span>(h[u], h[t]);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//up</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u / <span class="hljs-number">2</span>] &gt; h[u]) &#123;<br>        <span class="hljs-built_in">swap</span>(h[u / <span class="hljs-number">2</span>], h[u]);<br>        u /= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-9-2-堆（双指向版"><a href="#2-9-2-堆（双指向版" class="headerlink" title="2.9.2 堆（双指向版)"></a>2.9.2 堆（双指向版)</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> h[N], hp[N], ph[N], len;<span class="hljs-comment">//ph：第i个插入的数在堆的哪个位置</span><br><span class="hljs-comment">//hp: 堆的第i个位置是第几个插入的数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-built_in">swap</span>(ph[hp[a]], ph[hp[b]]);<br>    <span class="hljs-built_in">swap</span>(hp[a], hp[b]);<br>    <span class="hljs-built_in">swap</span>(h[a], h[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * u &lt;= len &amp;&amp; h[<span class="hljs-number">2</span> * u] &lt; h[t]) t = <span class="hljs-number">2</span> * u;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span> &lt;= len &amp;&amp; h[<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>] &lt; h[t]) t = <span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t) &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u, t);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (u &gt; <span class="hljs-number">1</span> &amp;&amp; h[u / <span class="hljs-number">2</span>] &gt; h[u]) &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u / <span class="hljs-number">2</span>, u);<br>        u /= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-哈希表"><a href="#3-哈希表" class="headerlink" title="3 哈希表"></a>3 哈希表</h2><h3 id="3-1-模拟散列表"><a href="#3-1-模拟散列表" class="headerlink" title="3.1 模拟散列表"></a>3.1 模拟散列表</h3><h4 id="3-1-1-拉链法"><a href="#3-1-1-拉链法" class="headerlink" title="3.1.1 拉链法"></a>3.1.1 拉链法</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100003</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    e[idx] = x;<br>    ne[idx] = h[k];<br>    h[k] = idx ++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[k]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        <span class="hljs-keyword">if</span> (e[i] == x) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-1-2-开放式寻址法"><a href="#3-1-2-开放式寻址法" class="headerlink" title="3.1.2 开放式寻址法"></a>3.1.2 开放式寻址法</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200003</span>, null = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> h[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = (x % N + N) % N;<br>    <span class="hljs-keyword">while</span> (h[k] != null &amp;&amp; h[k] != x) &#123;<br>        k ++;<br>        <span class="hljs-keyword">if</span> (k == N) &#123;<br>            k = <span class="hljs-number">0</span>; <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-字符串哈希-（字符串前缀哈希法）"><a href="#3-2-字符串哈希-（字符串前缀哈希法）" class="headerlink" title="3.2 字符串哈希 （字符串前缀哈希法）"></a>3.2 字符串哈希 （字符串前缀哈希法）</h3><p><strong>原理</strong>：将一个字符串看成一个P进制的数，将P进制数转换成十进制数，得到该字符串的哈希值。</p><p>例字：<code>ABCD</code>: A * P^3 + B * P^2 +  C * P^1 + D * P^0所得的十进制数就是该字符串的哈希值。</p><p>由于字符串可能很大，得到的数值会非常大，故对该数进行取模。由ULL溢出后自动取模做到这一步。取模后的数可能会由冲突，该算法的前提假设人品足够好，不考虑冲突的情况。</p><blockquote><ol><li><p>不能映射成0（如果<code>A</code>映射成0，那么<code>A</code>与<code>AA</code>、<code>AAA</code>将冲突</p></li><li><p>假设人品(Rp)足够好，假定不存在冲突</p></li></ol><p>经验值：p取131&#x2F;13331， Q取2^64</p></blockquote><p><strong>好处</strong>：利用前缀哈希，计算出任何字串的哈希值。</p><blockquote><p>求区间[l,r]的字串的哈希值：<br>由于左边是高位，右边是低位，需要最低位对其。将h[l - 1]右移与h[r]右对齐（最低位）对齐后，相减的差即为该区间字串的哈希值。（右移r - l + 1位需要乘上P^(r - l + 1)）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, P = <span class="hljs-number">131</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> s[N]; <span class="hljs-comment">//字符串数组，下标从1开始，方便处理</span><br>ULL h[N], p[N];<span class="hljs-comment">//h[N]字符串前缀哈希值，p[N] p的n次方数组（对ull取模后的值）</span><br><span class="hljs-comment">//求区间[l,r]的字串的哈希值：</span><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//求取字符串前缀哈希值、P的次方值（p数组存）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>    p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>    h[i] = h[i - <span class="hljs-number">1</span>] * P + s[i];<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="3-搜索与图论"><a href="#3-搜索与图论" class="headerlink" title="3. 搜索与图论"></a>3. 搜索与图论</h1><h2 id="3-1-DFS"><a href="#3-1-DFS" class="headerlink" title="3.1 DFS"></a>3.1 DFS</h2><h3 id="3-1-1-交换法"><a href="#3-1-1-交换法" class="headerlink" title="3.1.1 交换法"></a>3.1.1 交换法</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = u; i &lt; n; i ++) &#123;<br>        <span class="hljs-built_in">swap</span>(a[i], a[u]);<br>        <span class="hljs-built_in">dfs</span>(u + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">swap</span>(a[i], a[u]);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-1-2-回溯法"><a href="#3-1-2-回溯法" class="headerlink" title="3.1.2 回溯法"></a>3.1.2 回溯法</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (vis[i]) <span class="hljs-keyword">continue</span>;<br>        vis[i] = <span class="hljs-literal">true</span>;<br>        a[u] = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs</span>(u + <span class="hljs-number">1</span>);<br>        vis[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-1-3-n皇后问题-朴素解法"><a href="#3-1-3-n皇后问题-朴素解法" class="headerlink" title="3.1.3 n皇后问题 (朴素解法)"></a>3.1.3 n皇后问题 (朴素解法)</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">int</span> col[N], dg[N], udg[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <span class="hljs-built_in">puts</span>(g[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>        <span class="hljs-keyword">if</span> (!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i]) &#123;<br>            g[u][i] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            col[i] = dg[u + i] = udg[n - u + i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">dfs</span>(u + <span class="hljs-number">1</span>);<br>            col[i] = dg[u + i] = udg[n - u + i] = <span class="hljs-literal">false</span>;<br>            g[u][i] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++)<br>            g[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-1-4-n皇后问题-位运算解法"><a href="#3-1-4-n皇后问题-位运算解法" class="headerlink" title="3.1.4 n皇后问题 (位运算解法)"></a>3.1.4 n皇后问题 (位运算解法)</h3><h2 id="3-2-BFS"><a href="#3-2-BFS" class="headerlink" title="3.2 BFS"></a>3.2 BFS</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh =<span class="hljs-number">0</span>,  tt = <span class="hljs-number">0</span>;<br>    q[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (hh &lt;= tt) &#123;<br>        <span class="hljs-keyword">auto</span> t = q[hh ++];<br>        <span class="hljs-comment">//将t的周围加入队列q</span><br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-3-树与图的DFS"><a href="#3-3-树与图的DFS" class="headerlink" title="3.3 树与图的DFS"></a>3.3 树与图的DFS</h2><h3 id="3-3-1-领接表"><a href="#3-3-1-领接表" class="headerlink" title="3.3.1 领接表"></a>3.3.1 领接表</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, M = N * <span class="hljs-number">2</span>;<br><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><br><span class="hljs-comment">//领接表加边a-&gt;b</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;<br><span class="hljs-comment">//add,a-&gt;b ，权重c</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-2-深度优先遍历"><a href="#3-3-2-深度优先遍历" class="headerlink" title="3.3.2 深度优先遍历"></a>3.3.2 深度优先遍历</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> vis[N];<br><br><span class="hljs-comment">//树的dfs</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span><br><span class="hljs-function"></span>&#123;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i]) <br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[e[i] ]) &#123;<br>            <span class="hljs-built_in">dfs</span>(e[i])<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-4-树与图的BFS"><a href="#3-4-树与图的BFS" class="headerlink" title="3.4 树与图的BFS"></a>3.4 树与图的BFS</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> d[N], q[N];<br><br><span class="hljs-comment">//add</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><span class="hljs-comment">//bfs</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    q[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (hh &lt;= tt) <br>    &#123;<br>        <span class="hljs-type">int</span> t = q[hh ++];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span>) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                q[++ tt] = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-5-拓扑排序"><a href="#3-5-拓扑排序" class="headerlink" title="3.5 拓扑排序"></a>3.5 拓扑排序</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> d[N], q[N];<br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">if</span> (!d[i])<br>            q[++ tt] = i;<br>            <br>    <span class="hljs-keyword">while</span> (hh &lt;= tt) &#123;<br>        <span class="hljs-type">int</span> t = q[hh ++];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (-- d[j] == <span class="hljs-number">0</span>) <br>                q[++ tt] = j;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> tt == n - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-6-最短路"><a href="#3-6-最短路" class="headerlink" title="3.6 最短路"></a>3.6 最短路</h2><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/%E6%9C%80%E7%9F%AD%E8%B7%AF.png"></p><ol><li>单源最短路</li><li>多源汇最短路 ： 多个询问， 起点和终点的最短距离</li></ol><h3 id="3-6-1-Dijkstra（无负权边）"><a href="#3-6-1-Dijkstra（无负权边）" class="headerlink" title="3.6.1  Dijkstra（无负权边）"></a>3.6.1  Dijkstra（无负权边）</h3><p>n ：点数， m ： 边数</p><p>求两点之间的最短路，</p><blockquote><p><strong>前提条件</strong>：所有边都是正全权边（不存在负权边）</p></blockquote><h4 id="3-6-1-1-朴素Dijkstra"><a href="#3-6-1-1-朴素Dijkstra" class="headerlink" title="3.6.1.1 朴素Dijkstra"></a>3.6.1.1 朴素Dijkstra</h4><ol><li>初始化所有点的路径为无穷大，起点的路径修改为0</li><li>从未确定的点中，选取距离起点最近的点，将该点加入以确定的点的集合</li><li>用该点更新其他所有未确定的点距离</li><li>重复2-3，直到所有的点全部确定。</li></ol><blockquote><p>时间O(n ^ 2)， 适合稠密图</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> g[N][N];<span class="hljs-comment">//领接矩阵</span><br><span class="hljs-type">int</span> dist[N];<span class="hljs-comment">//最短距离</span><br><span class="hljs-type">bool</span> st[N];<span class="hljs-comment">//已确定的点集合</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//循环n次， 确定n个点的最短距离</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br>                <br>        st[t] = <span class="hljs-literal">true</span>; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + g[t][j]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-6-1-2-堆优化Dijkstra"><a href="#3-6-1-2-堆优化Dijkstra" class="headerlink" title="3.6.1.2 堆优化Dijkstra"></a>3.6.1.2 堆优化Dijkstra</h4><blockquote><p>时间O(m * lgn)， 适合稀疏图</p></blockquote><p>思路：利用优先队列， 将查找未确定的、距离最短的点这一步时间复杂度优化到logn</p><ol><li>初始点的距离为0， 加入优先队列</li><li>取出队列里头结点（该点的距离为未确定的点中的最短距离）</li><li>如果该点已经确定， 回到2</li><li>更新该点到邻点的距离（假如更新后的点距离更短），并将邻点的距离加入优先队列</li><li>重复2-4， 直至队列为空</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">150010</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[N], w[N], ne[N], idx;<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">int</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    <br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);<br>    <br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>() )<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = heap.<span class="hljs-built_in">top</span>(); heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> ver = t.second, distence = t.first;<br>        <span class="hljs-comment">//这个点已确定</span><br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;<br>        st[ver] = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[ver]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[ver] + w[i]) &#123;<br>                dist[j] = dist[ver] + w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);<br>                <span class="hljs-comment">// cout &lt;&lt; dist[j] &lt;&lt; &#x27; &#x27;;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-6-2-带负权的最短路"><a href="#3-6-2-带负权的最短路" class="headerlink" title="3.6.2 带负权的最短路"></a>3.6.2 带负权的最短路</h3><h4 id="3-6-2-1-Bellman-Ford"><a href="#3-6-2-1-Bellman-Ford" class="headerlink" title="3.6.2.1 Bellman-Ford"></a>3.6.2.1 Bellman-Ford</h4><blockquote><p>O(n * m)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">10010</span>;<br><br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> dist[N], backup[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>&#125;edges[M];<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i ++) <br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(backup, dist, <span class="hljs-keyword">sizeof</span> dist);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++) <br>        &#123;<br>            <span class="hljs-keyword">auto</span> [a, b, c] = edges[j];<br>            dist[b] = <span class="hljs-built_in">min</span>(dist[b], backup[a] + c);<br>        &#125;<br>    &#125;<br>        <br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-6-2-2-SPFA求最短路"><a href="#3-6-2-2-SPFA求最短路" class="headerlink" title="3.6.2.2 SPFA求最短路"></a>3.6.2.2 SPFA求最短路</h4><blockquote><p>O(m)， 最坏O(nm)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[N], w[N], ne[N], idx;<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">int</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>() ) <br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>        st[t] = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-6-2-3-SPFA判负环"><a href="#3-6-2-3-SPFA判负环" class="headerlink" title="3.6.2.3 SPFA判负环"></a>3.6.2.3 SPFA判负环</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[N], w[N], ne[N], idx;<br><span class="hljs-type">int</span> dist[N], cnt[N];<br><span class="hljs-type">int</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>() )<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>        st[t] = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i]) <br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i]) <br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <br>                <span class="hljs-keyword">if</span> (!st[j]) &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-7-多源汇最短路"><a href="#3-7-多源汇最短路" class="headerlink" title="3.7 多源汇最短路"></a>3.7 多源汇最短路</h2><h3 id="3-7-1-Floyd"><a href="#3-7-1-Floyd" class="headerlink" title="3.7.1 Floyd"></a>3.7.1 Floyd</h3><blockquote><p>O(n ^ 3)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>, INF = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> d[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-8-最小生成树"><a href="#3-8-最小生成树" class="headerlink" title="3.8 最小生成树"></a>3.8 最小生成树</h2><h3 id="3-8-1-普利姆算法（Prim）"><a href="#3-8-1-普利姆算法（Prim）" class="headerlink" title="3.8.1 普利姆算法（Prim）"></a>3.8.1 普利姆算法（Prim）</h3><h4 id="3-8-1-1-稠密图（朴素版Prim）"><a href="#3-8-1-1-稠密图（朴素版Prim）" class="headerlink" title="3.8.1.1 稠密图（朴素版Prim）"></a>3.8.1.1 稠密图（朴素版Prim）</h4><blockquote><p>O(n^2)</p></blockquote><p>思路：</p><ol><li>初始化所有点的距离为正无穷</li><li>每次找到离集合最近的点， 用该点更新其余所有点到集合的距离</li><li>将该点加入集合</li><li>重复第2-3步n次</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> n, m; <br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br>        <span class="hljs-comment">//不是第一个点且距离是正无穷， 说明与集合没有边相连        </span><br>        <span class="hljs-keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br>        <span class="hljs-comment">// 第一个点时， 不用加权重</span><br>        <span class="hljs-keyword">if</span> (i) res += dist[t];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; dist[j] &gt; g[t][j])<br>                dist[j] = g[t][j];<br>        <br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-8-1-2-稀疏图-（堆优化版Prim）"><a href="#3-8-1-2-稀疏图-（堆优化版Prim）" class="headerlink" title="3.8.1.2 稀疏图 （堆优化版Prim）"></a>3.8.1.2 稀疏图 （堆优化版Prim）</h4><blockquote><p>O(m logn)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br></code></pre></div></td></tr></table></figure><h3 id="3-8-2-克鲁斯卡尔算法（Kruskal）"><a href="#3-8-2-克鲁斯卡尔算法（Kruskal）" class="headerlink" title="3.8.2  克鲁斯卡尔算法（Kruskal）"></a>3.8.2  克鲁斯卡尔算法（Kruskal）</h3><blockquote><p>O(mlogm)</p></blockquote><ol><li>从小到大排序所有边（O(mlogm)</li><li>枚举每条边， 假如a，b不连通， 将这条边加入集合里（选了这条边用以连通a,b)     (O(m))</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; TIII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>,  M = <span class="hljs-number">200010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> n, m;<br>TIII g[M];<br><span class="hljs-type">int</span> p[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(g, g + m);<br>    <span class="hljs-comment">//初始化并查集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) p[i] = i;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-comment">//最小生成树</span><br>    <span class="hljs-type">int</span> num = n;    <span class="hljs-comment">//集合数量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> [c, a, b] = g[i];<br>        a = <span class="hljs-built_in">find</span>(a), b = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-comment">//如果a,b不连通， 连通a,b</span><br>        <span class="hljs-keyword">if</span> (a != b)<br>        &#123;<br>            p[a] = b;<br>            res += c;<br>            num --;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-keyword">return</span> INF;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-9-二分图"><a href="#3-9-二分图" class="headerlink" title="3.9 二分图"></a>3.9 二分图</h2><h3 id="3-9-1-判断二分图（染色法）"><a href="#3-9-1-判断二分图（染色法）" class="headerlink" title="3.9.1 判断二分图（染色法）"></a>3.9.1 判断二分图（染色法）</h3><ol><li>遍历所有点</li><li>如果该点未染色， dfs染色该点及后面的点</li><li>dfs过程中， 遇到未染色的点， dfs染色该点</li><li>dfs过程中， 遇到已染色的点。 该点的颜色和要染的颜色一样，不处理。 不一样则返回false，说明不是二分图</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, M = <span class="hljs-number">200010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> color[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    color[u] = c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!color[j])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(j, <span class="hljs-number">3</span> - c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isb</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    <span class="hljs-keyword">if</span> (!color[i])<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-9-2-二分图最大匹配-（匈牙利算法）"><a href="#3-9-2-二分图最大匹配-（匈牙利算法）" class="headerlink" title="3.9.2 二分图最大匹配 （匈牙利算法）"></a>3.9.2 二分图最大匹配 （匈牙利算法）</h3><blockquote><p>O(n*m)</p></blockquote><p>思路：</p><ol><li>遍历所有点</li><li>find当前点的所有边，如果对点没有对象， 则找到一个匹配</li><li>如果有对象， 则find这个对象， 如果这个匹配的对象能找到另外的匹配。则当前点能与这个对点成匹配</li><li>两者都不符合， 则当前点无对象</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n1, n2, m;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> match[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">xyl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i)) res ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="4-数学知识"><a href="#4-数学知识" class="headerlink" title="4. 数学知识"></a>4. 数学知识</h1><h2 id="4-1-质数"><a href="#4-1-质数" class="headerlink" title="4.1 质数"></a>4.1 质数</h2><h3 id="4-1-1-试除法-判定质数"><a href="#4-1-1-试除法-判定质数" class="headerlink" title="4.1.1 试除法-判定质数"></a>4.1.1 试除法-判定质数</h3><blockquote><p>O(sqrt(n))</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++)<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-1-2-试除法-分解质因数"><a href="#4-1-2-试除法-分解质因数" class="headerlink" title="4.1.2 试除法-分解质因数"></a>4.1.2 试除法-分解质因数</h3><blockquote><p>O(sqrt(n))</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divised</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n / i; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>           <br>            <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                n /= i;<br>                s ++;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, s);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, n, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-1-3-质数筛"><a href="#4-1-3-质数筛" class="headerlink" title="4.1.3 质数筛"></a>4.1.3 质数筛</h3><blockquote><p>埃氏筛法 O(nloglogn)</p><p>欧拉筛 O(n)</p></blockquote><h4 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h4><blockquote><p>对于每个质数， 都把以它为质因子的数筛去</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> prime[N], cnt;<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            prime[cnt ++] = i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + i; j &lt;= n; j += i)<br>                st[j] = <span class="hljs-literal">true</span>;<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h4><blockquote><p>ps : pj 是 i 的最小质因子时， pj 也是 pj * i 的最小质因子！</p><p>根据这个条件就能保证每个合数只被最小质因子筛一次</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> prime[N], cnt;<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) prime[cnt ++] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; prime[j] &lt;= n / i; j ++)<br>        &#123;<br>            st[prime[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">// 重</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-2-约数"><a href="#4-2-约数" class="headerlink" title="4.2 约数"></a>4.2 约数</h2><h3 id="4-2-1-试除法-求一个数的约数"><a href="#4-2-1-试除法-求一个数的约数" class="headerlink" title="4.2.1 试除法-求一个数的约数"></a>4.2.1 试除法-求一个数的约数</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / i; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (i != n / i) res.<span class="hljs-built_in">push_back</span>(n / i);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-2-约数个数"><a href="#4-2-2-约数个数" class="headerlink" title="4.2.2 约数个数"></a>4.2.2 约数个数</h3><blockquote><p>分解质因数后， 约数个数为所有质因数的指数+1的乘积</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-keyword">while</span> (n --)<br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++)<br>        <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            x /= i;<br>            mp[i] ++;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) mp[x] ++;<br>&#125;<br><br>LL res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [_x, v] : mp) res = res *(v + <span class="hljs-number">1</span>) % mod;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-3-约数之和"><a href="#4-2-3-约数之和" class="headerlink" title="4.2.3 约数之和"></a>4.2.3 约数之和</h3><blockquote><p>所有约数可用质因数求出， 约数之和 &#x3D; (p1^0 * p1^1*…*p1^a) * (p2^0*…*p2^a) * (px^0*…*px^a)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">while</span> (n --)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++)<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                x /= i;<br>                mp[i] ++;<br>            &#125;<br>            <br>        <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) mp[x] ++;<br>    &#125;<br>    <br>    LL res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [p, a] : mp)<br>    &#123;<br>        LL t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (a --) t = (t * p + <span class="hljs-number">1</span>) % mod;<br>        res = res * t % mod;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-4-欧几里得算法"><a href="#4-2-4-欧几里得算法" class="headerlink" title="4.2.4 欧几里得算法"></a>4.2.4 欧几里得算法</h3><blockquote><p>gcd(a, b) &#x3D; gcd(b, a % b)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-3-欧拉函数"><a href="#4-3-欧拉函数" class="headerlink" title="4.3 欧拉函数"></a>4.3 欧拉函数</h2><h3 id="4-3-1-欧拉函数"><a href="#4-3-1-欧拉函数" class="headerlink" title="4.3.1 欧拉函数"></a>4.3.1 欧拉函数</h3><blockquote><p>n的欧拉函数：1-n中与n互质的数的个数</p><p>&#x3D; n (1 - 1 &#x2F; p1) ( 1 - 1 &#x2F; p2) (1 - 1 &#x2F; p3)…(1 - 1 &#x2F; pk)</p></blockquote><p>分解质因数， 假设质因数为p1 p2 p3 … pk:</p><ol><li>从1-n中去掉p1、p2、…pk的所有倍数</li><li>加上所有pi * pj 的倍数</li><li>减去所有pi * pj * pk的倍数</li><li>加上所有pi * pj * pk * pl的倍数</li><li>…</li><li>（根据容斥原理得到 &#x3D; n (1 - 1 &#x2F; p1) ( 1 - 1 &#x2F; p2) (1 - 1 &#x2F; p3)…(1 - 1 &#x2F; pk) ）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">euler_phi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n / i; i ++)<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>) n /= i; <br>            res = res - (res / i);<br>        &#125;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) res = res - (res / n);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-2-筛法求欧拉函数"><a href="#4-3-2-筛法求欧拉函数" class="headerlink" title="4.3.2  筛法求欧拉函数"></a>4.3.2  筛法求欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">LL <span class="hljs-title">euler_shai</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            phi[i] = i - <span class="hljs-number">1</span>;<br>            primes[cnt ++] = i;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> pj = primes[j];<br>            st[pj * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % pj == <span class="hljs-number">0</span>) &#123;<br>                phi[i * pj] = (LL)phi[i] * pj;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            phi[i * pj] = (LL)phi[i] * phi[pj];<br>        &#125;<br>    &#125;<br>    <br>    LL res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) res += phi[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-4-快速幂"><a href="#4-4-快速幂" class="headerlink" title="4.4 快速幂"></a>4.4 快速幂</h2><h3 id="4-4-1-快速幂"><a href="#4-4-1-快速幂" class="headerlink" title="4.4.1 快速幂"></a>4.4.1 快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k) &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = (LL)a * a % p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-4-2-快速幂求逆元"><a href="#4-4-2-快速幂求逆元" class="headerlink" title="4.4.2 快速幂求逆元"></a>4.4.2 快速幂求逆元</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k) &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL) res * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = (LL) a * a % p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">niyuan</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a % p) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">qmi</span>(a, p - <span class="hljs-number">2</span>, p));<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-5-扩展欧几里得算法"><a href="#4-5-扩展欧几里得算法" class="headerlink" title="4.5 扩展欧几里得算法"></a>4.5 扩展欧几里得算法</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>        x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-type">int</span> d =  <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>    y -= a / b * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-5-2-线性同余方程"><a href="#4-5-2-线性同余方程" class="headerlink" title="4.5.2 线性同余方程"></a>4.5.2 线性同余方程</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b) &#123;<br>        x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);<br>    y -= a / b * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    <span class="hljs-keyword">while</span> (n --)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b, m;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;m);<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(a, m, x, y);<br>        <br>        <span class="hljs-keyword">if</span> (b % d) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (LL)x * (b / d) % m);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="5-动态规划"><a href="#5-动态规划" class="headerlink" title="5.动态规划"></a>5.动态规划</h1><h2 id="5-1-01背包"><a href="#5-1-01背包" class="headerlink" title="5.1 01背包"></a>5.1 01背包</h2><p>题目：有n个体积和价值分别为vi和wi的物品，求体积不超过m的最大价值</p><h3 id="01背包-朴素解法"><a href="#01背包-朴素解法" class="headerlink" title="01背包-朴素解法"></a>01背包-朴素解法</h3><ul><li><p>集合表示</p><ul><li><code>f[i][j]</code>:从前<code>i</code>个物品中挑选（每个只能选一次），  总体积不超过<code>j</code>的最大价值的所有集合。</li><li>Max 所有集合中最大的价值</li></ul></li><li><p>状态转移：</p><ul><li>不选第i个物品：<code>f[i][j] = f[i - 1][j]</code></li><li>选第i个物品：<code>f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i])</code><code>j &gt;= v[i]</code></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> v[N], w[N], f[N][N];    <br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>        f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>        <span class="hljs-keyword">if</span> (j &gt;= v[i]) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - v[i]] + w[i]);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="01背包-滚动数组"><a href="#01背包-滚动数组" class="headerlink" title="01背包-滚动数组"></a>01背包-滚动数组</h3><p>朴素解法中使用二维数组，仔细思考当前i的状态只由i-1转移得来，跟i-2、i-3等状态无关，即当前层只与上一层的状态有关，这种情况就可以用滚动数组来优化空间复杂度。滚动数组即开一个<code>f[2][m]</code>的数组，将一维重复利用，达到记录当前状态和上一状态目的。</p><p>使用滚动数组优化原数组，只需在滚动维度下边&amp;1即可。当i为奇数时，&amp;1&#x3D;1；当i为偶数时，&amp;1&#x3D;0，使用位运算可以方便编码。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[<span class="hljs-number">2</span>][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>                f[i &amp; <span class="hljs-number">1</span>][j] = f[i - <span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span>][j];<br>                <span class="hljs-keyword">if</span> (j &gt;= v)<br>                    f[i &amp; <span class="hljs-number">1</span>][j] = <span class="hljs-built_in">max</span>(f[i &amp; <span class="hljs-number">1</span>][j], f[i - <span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span>][j - v] + w);<br>            &#125;<br>    &#125;<br>    cout &lt;&lt; f[n &amp; <span class="hljs-number">1</span>][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="01背包-一维优化"><a href="#01背包-一维优化" class="headerlink" title="01背包-一维优化"></a>01背包-一维优化</h3><p>从朴素解法到滚动数组解法，优化了空间复杂度。思考二维的更新，当前v只会更新到v + j，即对数组前面的数值是没有影响的。若只使用一维记录时， 当j从大到小遍历，数组右边已遍历的视为当前i的记录，未遍历的视为i-1的记录（左边），即可无干扰的对数组进行更新。</p><p>注意一维优化的核心是，必须从大到小遍历容积j更新f[j]（若从小到大遍历j， 则可能当前物品被使用多次，即f[j]被更新多次）。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w;  cin &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= v; j --)<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>    &#125;<br>    cout &lt;&lt; f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-2-完全背包"><a href="#5-2-完全背包" class="headerlink" title="5.2 完全背包"></a>5.2 完全背包</h2><p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。求不超过背包体积的最大价值</p><h3 id="完全背包朴素解法"><a href="#完全背包朴素解法" class="headerlink" title="完全背包朴素解法"></a>完全背包朴素解法</h3><p>集合表示：</p><ul><li><code>f[i][j]</code>: 前<code>i</code>个物品（每个可以无限选），  总体积不超过<code>j</code>的最大价值。</li><li>max：<code>f[i][j]</code>的所有集合中的最大价值</li></ul><p>状态转移：</p><ul><li><p><code>f[i][j] = f[i - 1][j]</code>：不选当前物品i</p></li><li><p><code>f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k)</code><code>j &gt;= v[i] * k</code>：选当前物品i，且总体积不超过j的的最大价值</p></li></ul><blockquote><p><code>n^3</code>，超时</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w; cin &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k * v &lt;= j; k ++)<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - v * k] + w * k);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="完全背包-时间优化（去重复计算"><a href="#完全背包-时间优化（去重复计算" class="headerlink" title="完全背包-时间优化（去重复计算"></a>完全背包-时间优化（去重复计算</h3><p>当某个物品体积小，可以选取多件时，更大的体积也支持选取多件，这两者中间就产生了重复的计算。计算大体积时，次大体积的为最优解，故不用比较此次大体积以下的计算。</p><p>当计算<code>f[i][j</code>]时，由 <code>f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k)</code>展开，可得如下：</p><p><code>f[i][j] = max(f[i-1][j], f[i-1][j-v] + w, f[i-1][j-2v]+2w, f[i-1][j-3v]+3w, ……, f[i-1][j-kv]+kw)</code></p><p><code>f[i][j-v] = max(f[i-1][j-v], f[i-1][j-2v] + w, f[i-1][j-3v] + 2w, ……, f[i-1][j-kv] + (k-1)w)</code></p><blockquote><p>状态转移：</p><p><code>f[i][j] = max(f[i-1][j],f[i][j-v[i]]+w[i] </code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (j &gt;= v)<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i][j - v] + w);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="完全背包-一维空间优化"><a href="#完全背包-一维空间优化" class="headerlink" title="完全背包-一维空间优化"></a>完全背包-一维空间优化</h3><p>当某些题目情况下内存限制，需要优化空间内存，完全背包可以使用一维数组来求解。</p><p><strong>理解思路1：</strong>完全背包的空间优化中，可以直接去掉一维的数组，来完成记录即可。</p><ul><li><code>f[i][j] = f[i - 1][j]</code>转换成<code>f[j]=f[j]</code>（省略不写）</li><li><code>f[i][j] = max(f[i][j], f[i][j - v] + w)</code>转换成<code>f[j]=f[j - v] + w</code>（省略不写）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= v)<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>理解思路2：</strong>01背包中的一维空间优化受限于每个物品只能选取一次，需要从大往小遍历体积，如若从小往大遍历，会造成物品重复选取。重复选取则正是完全背包符合的，重复的次数从0到无限次，符合完全背包的题目需求。所以只需要将01背包的思路反向遍历一次即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w;<br>        cin &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = v; j &lt;= m; j ++)<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>    &#125; <br>    <br>    cout &lt;&lt; f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-3-多重背包"><a href="#5-3-多重背包" class="headerlink" title="5.3 多重背包"></a>5.3 多重背包</h2><p>有 N种物品和一个容量是 V 的背包。第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。求使物品体积总和不超过背包容量的最大价值。</p><h3 id="01背包思路"><a href="#01背包思路" class="headerlink" title="01背包思路"></a>01背包思路</h3><p>第i种物品最多有si件，可以看成01背包中的si件相同的物品，这样即可套用01背包的思路和代码来解</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">while</span> (n --) &#123;<br>        <span class="hljs-type">int</span> v, w, s;<br>        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= s; i ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= v; j --)<br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>    &#125;<br>    <br>    cout &lt;&lt; f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="完全背包思路"><a href="#完全背包思路" class="headerlink" title="完全背包思路"></a>完全背包思路</h3><p>可以将多重背包当成完全背包来推，只是每个i物品的数量k有限制。</p><p>集合表示：</p><ul><li><code>f[i][j]</code>: 前<code>i</code>个物品（每个可以无限选），  总体积不超过<code>j</code>的最大价值。</li><li>max：<code>f[i][j]</code>的所有集合中的最大价值</li></ul><p>状态转移：</p><ul><li><code>f[i][j] = f[i - 1][j]</code>：不选当前物品i</li><li><code>f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]*k] + w[i] * k)</code><code>j &gt;= v[i] * k &amp;&amp; k &lt;= s</code> ：选当前物品i，且总体积不超过j，数量不超过s的最大价值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w, s;<br>        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k * v &lt;= j &amp;&amp; k &lt;= s; k ++) <br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - v * k] + w * k);<br>        &#125;<br>    &#125;<br>    <br>    cout &lt;&lt; f[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h3><p>物品i有数量si个时，可选的数量区间为[0,s]，物品i对最优解的贡献数量一定位于该闭区间内。是否存在一种数学优化，使得枚举该区间的所有数量值的复杂度优于O(n)？答案是使用二进制枚举。</p><p>将s个物品拆分成1，2，4，8，2^k，·······，c个，且1+2+4+8+<code>2^k</code>的和为s，可证明[0,s]区间内的所有数都可由这些数相加组成，将原有的n个数转化为logn个数的，再运用01背包思路求解这些数，可求出所有体积下应选该物品的数量和最大价值，时间复杂度将每个物品的O(n)优化到O(logn)。运用该二进制优化到所有的物品中，即可将多重背包转化成优化的01背包问题。套用01背包求解，即可得出答案。</p><p>难点：理解二进制优化的思想，为什么可以使用二进制优化？</p><p>代码一：将每个物品分割都记录下来，和思路一样。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">15000</span>, M = <span class="hljs-number">2010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> v[N], w[N];<br><span class="hljs-type">int</span> f[M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n --) &#123;<br>        <span class="hljs-type">int</span> a, b, s;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k &lt;= s) &#123;<br>            cnt ++;<br>            v[cnt] = a * k;<br>            w[cnt] = b * k;<br>            s -= k;<br>            k &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>) &#123;<br>            cnt ++;<br>            v[cnt] = a * s;<br>            w[cnt] = b * s;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= v[i]; j --)<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v[i]] + w[i]);<br>    <br>    cout &lt;&lt; f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码二：将物品的每个分割不做记录直接计算，省一点空间，但比较绕一丢丢，需要深刻理解01背包。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w, s; cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k &lt;= s) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= v * k; j --)<br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v * k] + w * k);<br>            s -= k;<br>            k &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s) <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m;  j &gt;= v * s; j --)<br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v * s] + w * s);<br>    &#125;<br>    cout &lt;&lt; f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h3><p>当计算<code>f[i][j</code>]时，由 <code>f[i][j] = max(f[i][j], f[i - 1][j - v * s] + w * s)</code>展开，可得如下：</p><p><code>f[i][j] = max(f[i-1][j], f[i-1][j-v] + w, f[i-1][j-2v]+2w, f[i-1][j-3v]+3w, ……, f[i-1][j-sv]+sw)</code></p><p><code>f[i][j-v] = max(f[i-1][j-v], f[i-1][j-2v] + w, f[i-1][j-3v] + 2w, ……, f[i-1][j-(s + 1)v] + sw)</code></p><p>再求取<code>f[i][j-v]</code>时，可以使用单调队列维护<code>f[i][j-v]</code>使得查找该过程的复杂度为O(1)，</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N], g[N], q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>        <span class="hljs-type">int</span> v, w, s; cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<br>        <span class="hljs-built_in">memcpy</span>(g, f, <span class="hljs-keyword">sizeof</span> f);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; v; j ++) &#123;<br>            <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j; k &lt;= m; k += v) &#123;<br>                <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; q[hh] &lt; k - s * v) hh ++;<br>                <span class="hljs-keyword">if</span> (hh &lt;= tt) f[k] = <span class="hljs-built_in">max</span>(f[k], g[q[hh]] + (k - q[hh]) / v * w);<br>                <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; g[q[tt]] - (q[tt] - j) / v * w &lt;= g[k] - (k - j) / v * w) tt --;<br>                q[++ tt] = k;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-4-分组背包"><a href="#5-4-分组背包" class="headerlink" title="5.4 分组背包"></a>5.4 分组背包</h2><p>分组背包解决的是有n组，每组最多选一个物品，装进总容量为V的背包中，求最大价值。</p><p>状态表示：</p><ul><li>集合：<code>f[i][j]</code>：前i组背包中选，总体积不超过j的最大价值</li><li>属性：Max</li></ul><p>状态计算：</p><ul><li><code>f[i][j]</code> &#x3D; <code>max(f[i][j], f[i - 1][j])</code>：当前i组不选</li><li><code>f[i][j]</code>&#x3D; <code>max(f[i - 1][j], max(f[i - 1][j - vk] + wk))</code>：当前i组选第i个</li></ul><blockquote><p>注意分组背包的题目中，要把物品输入用数组记录下来，不能一边输入一边计算，因为容量的遍历要在分组背包前。否则就是01背包不是分组背包了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> v[N][N], w[N][N], s[N];<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        cin &gt;&gt; s[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= s[i]; j ++) &#123;<br>            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">0</span>; j --) <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= s[i]; k ++)<br>                <span class="hljs-keyword">if</span> (j &gt;= v[i][k])<br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);<br>    <br>    cout &lt;&lt; f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-5-最长上升子序列"><a href="#5-5-最长上升子序列" class="headerlink" title="5.5 最长上升子序列"></a>5.5 最长上升子序列</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N], f[N];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">f[i] = max(f[i], f[j] + 1) (a[i] &gt; a[j])</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++)<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        res = <span class="hljs-built_in">max</span>(res, f[i]);<br>        <br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>n log n</strong>：</p><p>单调优化：即f[i]为0~i中最长上升子序列的最小增长序列</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <br>    <br>    q[<span class="hljs-number">0</span>] = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = len;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> mid = l + (r - l + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (q[mid] &lt; a[i]) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        len = <span class="hljs-built_in">max</span>(len, r + <span class="hljs-number">1</span>);<br>        q[r + <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    <br>    cout &lt;&lt; len &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-6-最长公共子序列"><a href="#5-6-最长公共子序列" class="headerlink" title="5.6 最长公共子序列"></a>5.6 最长公共子序列</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> a[N], b[N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">f[i][j] = max(f[i - 1][j], f[i][j - 1], f[i - 1][j - 1] + 1)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, a + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (a[i] == b[j]) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>        &#125;<br>        <br>    cout &lt;&lt; f[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-7-区间DP-石子合并"><a href="#5-7-区间DP-石子合并" class="headerlink" title="5.7 区间DP-石子合并"></a>5.7 区间DP-石子合并</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">310</span>;<br><span class="hljs-type">int</span> s[N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">f[i][j] = min(f[i][k] + f[k + 1][j] + s[j] - s[i - 1]);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s[i]);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) s[i] += s[i - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len ++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + len - <span class="hljs-number">1</span> &lt;= n; i ++) &#123;<br>            <span class="hljs-type">int</span> l = i, r = i + len - <span class="hljs-number">1</span>;<br>            f[l][r] = <span class="hljs-number">1e9</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l;  k &lt; r; k ++)<br>                f[l][r] = <span class="hljs-built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="hljs-number">1</span>][r] + s[r] - s[l - <span class="hljs-number">1</span>]);<br>        &#125;<br>        <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[<span class="hljs-number">1</span>][n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-8-计数DP"><a href="#5-8-计数DP" class="headerlink" title="5.8 计数DP"></a>5.8 计数DP</h2><p><a href="https://www.acwing.com/problem/content/340/">计数问题</a></p><p>求某个区间内的所有数字上0-9出现的次数。</p><p>考虑 abcdefg 中第四位上1出现的次数</p><ol><li>如果前三位 &#x3D; 0~abc-1, 那1的次数是： abc * 1000 （加入x &#x3D; 0 时要从001开始，所以是 (abc -1) * 1000)</li><li>如果前三位 &#x3D; abc：<ol><li>d &lt; 1, 那么无论后面efg取什么，都是不符合：0</li><li>d &#x3D; 1, 后三位可取0~efg：efg+1</li><li>d &gt; 1, 后三位可取0~999：1000</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;v, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &gt;= l; i --)<br>        res = res * <span class="hljs-number">10</span> + v[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">power10</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i --) res *= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (; n; n /= <span class="hljs-number">10</span>)<br>        v.<span class="hljs-built_in">push_back</span>(n % <span class="hljs-number">10</span>);<br>    <br>    n = v.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span> - !x; i &gt;= <span class="hljs-number">0</span>; i --)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">1</span>) &#123;<br>            res += <span class="hljs-built_in">get</span>(v, i + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>) * <span class="hljs-built_in">power10</span>(i);<br>            <span class="hljs-keyword">if</span> (!x) res -= <span class="hljs-built_in">power10</span>(i);<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt;&quot;--&quot; &lt;&lt; res &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span> (v[i] == x) res += <span class="hljs-built_in">get</span>(v, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v[i] &gt; x) res += <span class="hljs-built_in">power10</span>(i);<br>        <span class="hljs-comment">// cout &lt;&lt; &quot;--&quot; &lt;&lt; res &lt;&lt; endl;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b, a || b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a &gt; b) <span class="hljs-built_in">swap</span>(a, b);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++)<br>            cout &lt;&lt; <span class="hljs-built_in">count</span>(b, i) - <span class="hljs-built_in">count</span>(a - <span class="hljs-number">1</span>, i) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="5-9-状态压缩"><a href="#5-9-状态压缩" class="headerlink" title="5.9 状态压缩"></a>5.9 状态压缩</h2><p>状态压缩，将某一状态用二进制01表示，用十进制存储，从而可以快速利用与或非等位运算，优化时空复杂度。</p><p>状态压缩通常会在题目上给出范围，当数据范围小时，就可以考虑是否能运用状态压缩</p><p>例题：</p><p><a href="https://www.acwing.com/problem/content/293/"><strong>蒙德里安的梦想</strong></a></p><p>核心：<strong>先放横着的，再放竖着的</strong>。总的方案数等于合法的放置横着的方案数。</p><p>怎么判断横着的方案是否合法？所有列的竖着的连续空格是偶数个，才是合法</p><p>可以预处理一些状态，优化时间复杂度</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">f[i][j]表示i-1列的横着放着的长方形伸到i列的状态为j的合法方案数</span><br><span class="hljs-comment">f[i][j] = sum(f[i-1][k]) (k &amp; j == 0 &amp;&amp; state[k|j])</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>  LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">12</span>, M = <span class="hljs-number">1</span> &lt;&lt; N;<br><span class="hljs-type">int</span> n, m;<br>LL f[N][M];<br>vector&lt;<span class="hljs-type">int</span>&gt; state[M];<br><span class="hljs-type">bool</span> st[M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m, n || m) &#123;<br>        <span class="hljs-comment">//预处理st：能否合法放置的列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; n; i ++)<br>        &#123;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>, is_vaild = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((i &gt;&gt; j) &amp; <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (cnt &amp; <span class="hljs-number">1</span>) &#123; is_vaild = <span class="hljs-literal">false</span>; <span class="hljs-keyword">break</span>; &#125;<br>                    cnt = <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">else</span> cnt ++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &amp; <span class="hljs-number">1</span>) is_vaild = <span class="hljs-literal">false</span>;<br>            st[i] = is_vaild;<br>            <span class="hljs-comment">// cout &lt;&lt; st[i] &lt;&lt; &quot; &quot;;</span><br>        &#125;<br>        <br>        <span class="hljs-comment">//预处理两列伸出不重叠冲突</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; n; i ++)<br>        &#123;<br>            state[i].<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1</span> &lt;&lt; n; j ++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((i &amp; j) == <span class="hljs-number">0</span> &amp;&amp; st[i | j])<br>                state[i].<span class="hljs-built_in">push_back</span>(j);<br>            &#125;<br>            <span class="hljs-comment">// cout &lt;&lt; state[i].size() &lt;&lt; endl;</span><br>        &#125;<br>        <br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> f);<br>        <span class="hljs-comment">//dp</span><br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1</span> &lt;&lt; n; j ++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : state[j])<br>                    f[i][j] += f[i - <span class="hljs-number">1</span>][k];<br>                    <br>        cout &lt;&lt; f[m][<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/93/"><strong>最短Hamilton路径</strong></a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">状态表示：f[i][j]:从0走到j点的路径经过的点集合为i的所有路径最短的长度</span><br><span class="hljs-comment">状态转移：f[i][j] = min(f[i-(j)][k]) + w[k][j], 枚举倒数第二个点k，表示从0走到k的点最小路径长度，再从k走到j点</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">21</span>, M = <span class="hljs-number">1</span> &lt;&lt; N;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w[N][N];<br><span class="hljs-type">int</span> f[M][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++)<br>            cin &gt;&gt; w[i][j];<br>    <br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++)<br>            <span class="hljs-keyword">if</span> (i &gt;&gt; j &amp; <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k ++)<br>                    <span class="hljs-keyword">if</span> (i - (<span class="hljs-number">1</span> &lt;&lt; j) &gt;&gt; k &amp; <span class="hljs-number">1</span>)<br>                        f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i - (<span class="hljs-number">1</span> &lt;&lt; j)][k] + w[k][j]);<br>                        <br>    cout &lt;&lt; f[(<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-10-树形DP"><a href="#5-10-树形DP" class="headerlink" title="5.10 树形DP"></a>5.10 树形DP</h2><p> 解决的是树形结构的问题：通过子树的状态，转移到当前树的状态</p><p><a href="https://www.acwing.com/problem/content/287/"><strong>没有上司的舞会</strong></a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">f[u][0]:表示以u为根节点的子树，不选u的最大值</span><br><span class="hljs-comment">f[u][1]:表示以u为根节点的子树，选u的最大值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">f[u][0] = sum(max(f[j][0], f[j][1])): j为u的子节点</span><br><span class="hljs-comment">f[u][1] = happy[u] + sum(f[j][0]):j为u的子节点</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">6010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> happy[N];<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> f[N][<span class="hljs-number">2</span>];<br><span class="hljs-type">bool</span> has_fat[N];<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    f[u][<span class="hljs-number">1</span>] = happy[u];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-built_in">dfs</span>(j);<br>        f[u][<span class="hljs-number">1</span>] += f[j][<span class="hljs-number">0</span>];<br>        f[u][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(f[j][<span class="hljs-number">0</span>], f[j][<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;happy[i]);<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        has_fat[a] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> root = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (has_fat[root]) root ++;<br>    <br>    <span class="hljs-built_in">dfs</span>(root);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">max</span>(f[root][<span class="hljs-number">1</span>], f[root][<span class="hljs-number">0</span>]));<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-11-记忆搜索"><a href="#5-11-记忆搜索" class="headerlink" title="5.11 记忆搜索"></a>5.11 记忆搜索</h2><p>优势：代码简单</p><p><a href="https://www.acwing.com/problem/content/903/">滑雪</a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">310</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N][N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> &amp;v = f[x][y];<br>    <span class="hljs-keyword">if</span> (v != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> v;<br>    <br>    v = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = x + dx[i], b = y + dy[i];<br>        <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">1</span> &amp;&amp; a &lt;= n &amp;&amp; b &gt;= <span class="hljs-number">1</span> &amp;&amp; b &lt;= m &amp;&amp; h[a][b] &lt; h[x][y])<br>            v = <span class="hljs-built_in">max</span>(v, <span class="hljs-built_in">dp</span>(a, b) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;h[i][j]);<br>    <br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> f);<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">dp</span>(i, j));<br>            <br>    cout &lt;&lt; res &lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-12-数字三角形模型"><a href="#5-12-数字三角形模型" class="headerlink" title="5.12 数字三角形模型"></a>5.12 数字三角形模型</h2><h1 id="6-贪心"><a href="#6-贪心" class="headerlink" title="6. 贪心"></a>6. 贪心</h1><h2 id="6-1-区间问题"><a href="#6-1-区间问题" class="headerlink" title="6.1 区间问题"></a>6.1 区间问题</h2><p>区间问题的贪心，一般要以区间左端点或者区间右端点排序，再去尝试。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AcWing</tag>
      
      <tag>算法基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win7-USB网卡开热点</title>
    <link href="/2021/09/20/win7-USB%E7%BD%91%E5%8D%A1%E5%BC%80%E7%83%AD%E7%82%B9/"/>
    <url>/2021/09/20/win7-USB%E7%BD%91%E5%8D%A1%E5%BC%80%E7%83%AD%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="1-创建无线网络"><a href="#1-创建无线网络" class="headerlink" title="1. 创建无线网络"></a>1. 创建无线网络</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netsh wlan set hostednetwork mode=allow ssid=giegie key=12345678<br>//WIFI : giegie  密码 ： 12345678<br></code></pre></div></td></tr></table></figure><h3 id="2-无线网络共享"><a href="#2-无线网络共享" class="headerlink" title="2. 无线网络共享"></a>2. 无线网络共享</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/1.1.png" alt="1.1"></p><h3 id="3-启用无线网络"><a href="#3-启用无线网络" class="headerlink" title="3. 启用无线网络"></a>3. 启用无线网络</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netsh wlan start hostednetwork<br></code></pre></div></td></tr></table></figure><h3 id="4-连接热点"><a href="#4-连接热点" class="headerlink" title="4. 连接热点"></a>4. 连接热点</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验六：LCD显示</title>
    <link href="/2021/09/15/%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9ALCD%E6%98%BE%E7%A4%BA/"/>
    <url>/2021/09/15/%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9ALCD%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="实验一："><a href="#实验一：" class="headerlink" title="实验一："></a>实验一：</h1><h2 id="1-实验原理"><a href="#1-实验原理" class="headerlink" title="1. 实验原理"></a>1. 实验原理</h2><p>LCD显示原理：通过TFT上的信号与电压改变来控制液晶分子的转动方向，从而达到控制每个像素点偏振光射出的目的。</p><p>LCD1602指令集说明：<a href="https://www.cnblogs.com/aslmer/p/5801363.html">https://www.cnblogs.com/aslmer/p/5801363.html</a></p><h2 id="2-材料清单"><a href="#2-材料清单" class="headerlink" title="2. 材料清单"></a>2. 材料清单</h2><table><thead><tr><th>元器件名称</th><th>信号参数规格</th><th>数量</th><th>参考实物图</th></tr></thead><tbody><tr><td>Arduino开发板</td><td>Uno R3</td><td>1</td><td></td></tr><tr><td>面包包</td><td>840孔无焊板</td><td>1</td><td></td></tr><tr><td>LCD显示屏</td><td>LCD1602</td><td>1</td><td></td></tr><tr><td>面板包专用插线</td><td>-</td><td>1</td><td></td></tr></tbody></table><h2 id="3-硬件连接"><a href="#3-硬件连接" class="headerlink" title="3. 硬件连接"></a>3. 硬件连接</h2><h2 id="4-程序设计"><a href="#4-程序设计" class="headerlink" title="4. 程序设计"></a>4. 程序设计</h2><h3 id="4-1-流程图"><a href="#4-1-流程图" class="headerlink" title="4.1 流程图"></a>4.1 流程图</h3><h3 id="4-2-程序源码"><a href="#4-2-程序源码" class="headerlink" title="4.2 程序源码"></a>4.2 程序源码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">LCD 实验</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//定义引脚</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> DI = <span class="hljs-number">12</span>;  <span class="hljs-comment">//RS</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> RW = <span class="hljs-number">11</span>;  <span class="hljs-comment">//RW</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> DB[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;    <span class="hljs-comment">//DB:07~02</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> Enable = <span class="hljs-number">2</span>;  <span class="hljs-comment">//使能信号</span><br><br><span class="hljs-type">int</span> i;<br><span class="hljs-comment">// 写命令</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">LcdCommadWrite</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-comment">//写指令</span><br>    <span class="hljs-keyword">for</span> (i = DB[<span class="hljs-number">0</span>]; i &lt; DI; i ++) &#123;<br>        digitalWrite(i, value &amp; <span class="hljs-number">01</span>);<br>        value &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    下面这几个干嘛的？</span><br><span class="hljs-comment">    */</span><br>    digitalWrite(Enable, LOW);  <span class="hljs-comment">//</span><br>    delayMicroseconds(<span class="hljs-number">1</span>);<br>    digitalWrite(Enable, HIGH);<br>    delayMicroseconds(<span class="hljs-number">1</span>);<br>    digitalWrite(Enable, LOW);<br>    delayMicroseconds(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 写数据</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">LcdDataWrite</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    digitalWrite(DI, HIGH);<br>    digitalWrite(RW, LOW);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> di : DB) &#123;<br>        digitalWrite(di, value &amp; <span class="hljs-number">01</span>);<br>        value &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    下面这几个干嘛的？</span><br><span class="hljs-comment">    */</span><br>    digitalWrite(Enable, LOW);  <span class="hljs-comment">//</span><br>    delayMicroseconds(<span class="hljs-number">1</span>);<br>    digitalWrite(Enable, HIGH);<br>    delayMicroseconds(<span class="hljs-number">1</span>);<br>    digitalWrite(Enable, LOW);<br>    delayMicroseconds(<span class="hljs-number">1</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (i = Enable; i &lt;= DI; i ++) &#123;<br>        pinMode(i, OUTPUT);<br>    &#125;<br><br>    <span class="hljs-comment">//短暂延迟后初始化LCD</span><br>    delay(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        为什么写指令之间要加延迟?</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//设置为8位接口， 2行显示， 5x7文字大小</span><br>    <span class="hljs-comment">//0x38 = 0011 1000</span><br>    <span class="hljs-comment">//0x38:功能设置命令 DL：高电平时为4位总线，低电平时为8位总线 N：低电平时为单行显示，高电平时双行显示 F： 低电平时显示5x7的点阵字符，高电平时显示5x10的点阵字符。</span><br>    <span class="hljs-comment">//为什么 重复三次？</span><br>    LcdCommadWrite(<span class="hljs-number">0x38</span>);<br>    delay(<span class="hljs-number">64</span>);<br>    LcdCommadWrite(<span class="hljs-number">0x38</span>);<br>    delay(<span class="hljs-number">50</span>);<br>    LcdCommadWrite(<span class="hljs-number">0x38</span>);<br>    delay(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">//0x06 = 0000 0110 : 光标和显示模式设置 I/D：光标移动方向，高电平右移，低电平左移 S：屏幕上所有文字是否左移或者右移。高电平表示有效，低电平则无效。</span><br>    LcdCommadWrite(<span class="hljs-number">0x06</span>);   <span class="hljs-comment">//输入方式指定</span><br>    delay(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//显示设置</span><br>    <span class="hljs-comment">//0x0E = 0000 1110 : 显示开关控制。 D：控制整体显示的开与关，高电平表示开显示，低电平表示关显示 C：控制光标的开与关，高电平表示有光标，低电平表示无光标 B：控制光标是否闪烁，高电平闪烁，低电平不闪烁。</span><br>    LcdCommadWrite(<span class="hljs-number">0x0E</span>);<br>    delay(<span class="hljs-number">20</span>);<br><br><br>    <span class="hljs-comment">//开启显示屏， 光标显示、无闪烁</span><br>    delay(<span class="hljs-number">20</span>);<br>    LcdCommadWrite(<span class="hljs-number">0x01</span>);   <span class="hljs-comment">//清屏</span><br>    delay(<span class="hljs-number">100</span>);<br>    LcdCommadWrite(<span class="hljs-number">0x80</span>);   <span class="hljs-comment">//  显示设置</span><br>    delay(<span class="hljs-number">20</span>);<br>&#125;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//0x01 清除液晶显示器，即将DDRAM中的内容全部填入20H（空白字符）</span><br>        <span class="hljs-comment">//   光标撤回显示屏左上方</span><br>        <span class="hljs-comment">//   将地址计数器（AC）设为0，</span><br>        <span class="hljs-comment">//   光标移动方向为从左向右，并且DDRAM的自增量为1(I/D=1).</span><br>    LcdCommadWrite(<span class="hljs-number">0x01</span>);   <span class="hljs-comment">//清屏</span><br>    delay(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">//0x80 = 1000 0100 : 设置DDRAM地址</span><br>    LcdCommadWrite(<span class="hljs-number">0x80</span> + <span class="hljs-number">4</span>);   <span class="hljs-comment">//第一行 第5个开始</span><br>    <span class="hljs-type">char</span> wc[] = <span class="hljs-string">&quot;Wellcome！&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : wc) &#123;<br>        LcdDataWrite(ch);<br>    &#125;<br><br>    delay(<span class="hljs-number">10</span>);<br>    <span class="hljs-type">char</span> ila[] = <span class="hljs-string">&quot;I Love Arduino!&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : ila) &#123;<br>        LcdDataWrite(ch);<br>    &#125;<br>    delay(<span class="hljs-number">10000</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-调试及实验现象"><a href="#5-调试及实验现象" class="headerlink" title="5. 调试及实验现象"></a>5. 调试及实验现象</h2><h2 id="6-代码回顾"><a href="#6-代码回顾" class="headerlink" title="6. 代码回顾"></a>6. 代码回顾</h2><h2 id="7-扩展实验"><a href="#7-扩展实验" class="headerlink" title="7. 扩展实验"></a>7. 扩展实验</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第三章练习</title>
    <link href="/2021/09/10/CSAPP%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/09/10/CSAPP%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.0.1.png" alt="3.0.1"></p><h3 id="搬运指令"><a href="#搬运指令" class="headerlink" title="搬运指令"></a>搬运指令</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com//img/3.0.2.png" alt="3.0.2"></p><h3 id="练习题-3-1"><a href="#练习题-3-1" class="headerlink" title="练习题 3.1"></a>练习题 3.1</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.1.png" alt="3.1"></p><p><strong>假设下面的值存放在指明的内存地址和寄存器中</strong></p><table><thead><tr><th>地址</th><th>值</th></tr></thead><tbody><tr><td>0x100</td><td>0xFF</td></tr><tr><td>0x104</td><td>0xAB</td></tr><tr><td>0x108</td><td>0x13</td></tr><tr><td>0x10C</td><td>0x11</td></tr></tbody></table><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>%rax</td><td>0x100</td></tr><tr><td>%rcx</td><td>0x1</td></tr><tr><td>%rdx</td><td>0x3</td></tr></tbody></table><p><strong>填写下表，给出所示操作数的值：</strong></p><table><thead><tr><th>操作数</th><th>值</th><th>注释</th></tr></thead><tbody><tr><td>%rax</td><td>0x100</td><td>寄存器</td></tr><tr><td>0x104</td><td>0xAB</td><td>绝对地址</td></tr><tr><td>$0x108</td><td>0x108</td><td>立即数</td></tr><tr><td>(%rax)</td><td>0xFF</td><td>地址0x100</td></tr><tr><td>4(%rax)</td><td>0xAB</td><td>地址0x104</td></tr><tr><td>9(%rax, %rdx)</td><td>0x11</td><td>地址0x10C</td></tr><tr><td>260(%rcx, %rdx)</td><td>0x13</td><td>地址0x108</td></tr><tr><td>0xFC(, %rcx, 4)</td><td>0xFF</td><td>地址0x100</td></tr><tr><td>(%rax, %rdx, 4)</td><td>0x11</td><td>地址0x10C</td></tr></tbody></table><h3 id="练习题-3-2"><a href="#练习题-3-2" class="headerlink" title="练习题 3.2"></a>练习题 3.2</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.2.png" alt="3.2"></p><table><thead><tr><th>指令</th><th>源操作数</th><th>目标操作数</th></tr></thead><tbody><tr><td>mov<u> l</u></td><td>%eax</td><td>(%rsp)</td></tr><tr><td>mov<u> w</u></td><td>(%rax)</td><td>%dx</td></tr><tr><td>mov<u> b</u></td><td>$0xFF</td><td>%bl</td></tr><tr><td>mov<u> b</u></td><td>(%rsp, %rdx, 4)</td><td>%dl</td></tr><tr><td>mov<u> q</u></td><td>(%rdx)</td><td>%rax</td></tr><tr><td>mov<u> w</u></td><td>%dx</td><td>(%rax)</td></tr></tbody></table><p>​</p><h3 id="练习题-3-3"><a href="#练习题-3-3" class="headerlink" title="练习题 3.3"></a>练习题 3.3</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.3.png" alt="3.3"></p><p><strong>答：</strong></p><ol><li><del>立即数要先写入寄存器， 再写入内存（？</del> 使用%ebx作为64位系统地址寄存器， 在栈上是危险的</li><li><del>movl指令大小错误， 应该用movq, rax是绝对四字寄存器</del> 指令后缀和寄存器ID之间不匹配</li><li>mov指令源操作数和目的操作数同为内存。</li><li>不存在名为sl的寄存器</li><li>立即数不能作为目的操作数</li><li>源操作数和目的操作数字不匹配</li><li>~~不懂 ~~ 指令后缀和寄存器ID之间不匹配</li></ol><h3 id="练习题-3-4-我不李姐"><a href="#练习题-3-4-我不李姐" class="headerlink" title="练习题 3.4 (我不李姐)"></a>练习题 3.4 (我不李姐)</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.4.1.png" alt="3.4.1"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.4.2.png" alt="3.4.2"></p><p><strong>答：</strong></p><blockquote><p>src_t in %rdidest_t in rsi</p></blockquote><table><thead><tr><th>src_t</th><th>dest_t</th><th>指令</th><th>注释</th></tr></thead><tbody><tr><td>long</td><td>long</td><td>movq(%rdi), %rax <br />movq %rax, (%rsi)</td><td>读8个字节<br />存8个字节</td></tr><tr><td>char</td><td>int</td><td>movsbl (%rdi), %eax<br />movq %eax, (%rsi)</td><td>讲char转成int<br />存4个字节</td></tr><tr><td>char</td><td>unsigned</td><td>movsbl (%rdi), %eax<br />movq %eax, (%rsi)</td><td>将char转成int<br />存4个字节</td></tr><tr><td>unsigned char</td><td>long</td><td>movzbl (%rdi),  %eax<br />movq %rax, (%rsi)</td><td>读一个字节并零扩展<br />存8个字节</td></tr><tr><td>int</td><td>char</td><td>movl (%rdi), %eax<br />movb %al, (%rsi)</td><td>读4个字节<br />存低位字节</td></tr><tr><td>unsigned</td><td>unsigned char</td><td>movl (%rdi), %eax<br />movb %al, (%rsi)</td><td>读4个字节<br />存低位字节</td></tr><tr><td>char</td><td>short</td><td>movsbw (%rdi), %ax<br />movw %aw, (%rsi)</td><td>读一个字节并符号扩展<br />存2个字节</td></tr></tbody></table><h3 id="练习题-3-5"><a href="#练习题-3-5" class="headerlink" title="练习题  3.5"></a>练习题  3.5</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.5.png" alt="3.5"></p><p>答：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">decode1</span> <span class="hljs-params">(<span class="hljs-type">long</span> *xp, <span class="hljs-type">long</span> *yp, <span class="hljs-type">long</span> *zp)</span> &#123;<br>    <span class="hljs-type">long</span> x = *xp;<br>    <span class="hljs-type">long</span> y = *yp;<br>    <span class="hljs-type">long</span> z = *xp;<br>    *yp = x;<br>    *zp = y;<br>    *xp = z;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="算术和逻辑指令"><a href="#算术和逻辑指令" class="headerlink" title="算术和逻辑指令"></a>算术和逻辑指令</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.5.1.png" alt="3.5.1"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.5.2.png" alt="3.5.2"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.5.3.png" alt="3.5.3"></p><hr><h3 id="练习题-3-6"><a href="#练习题-3-6" class="headerlink" title="练习题 3.6"></a>练习题 3.6</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.6.png" alt="3.6"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.6.1.png" alt="3.6.1"></p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.6.2.png" alt="3.6.2"></p><p>答：</p><table><thead><tr><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td>leaq 6(%ax), %rdx</td><td>6 + (x &amp; 0xFFFF)</td></tr><tr><td>leaq (%rax, %rcx), %rdx</td><td>x + y</td></tr><tr><td>leaq (%rax, %rcx, 4), %rdx</td><td>x + y * 4</td></tr><tr><td><del>leaq 7(%rax, %rax, 8), %rdx</del></td><td><del>8 + x * 5</del> 7 + 9x</td></tr><tr><td>leaq 0xA (, %rcx, 4), %rdx</td><td><del>0xA + (y * 4)</del> 10 + 4y</td></tr><tr><td>leaq 9(%rax, %rcx, 2), %rdx</td><td>9 + (x + y * 2)</td></tr></tbody></table><h3 id="练习题-3-7"><a href="#练习题-3-7" class="headerlink" title="练习题 3.7"></a>练习题 3.7</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.7.png" alt="3.7"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-title function_">scale2</span><span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">long</span> y, <span class="hljs-type">long</span> z)</span> &#123;<br>    <span class="hljs-type">long</span> t = <span class="hljs-number">5</span> * x + y * <span class="hljs-number">2</span> + <span class="hljs-number">8</span> * z;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-8"><a href="#练习题-3-8" class="headerlink" title="练习题 3.8"></a>练习题 3.8</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.8.png" alt="3.8"></p><p>答：</p><table><thead><tr><th>指令</th><th>目的</th><th>值</th></tr></thead><tbody><tr><td>addq %rcx, (%rax)</td><td>0x100</td><td>0x100</td></tr><tr><td>subq %rdx, 8(rax)</td><td>0x108</td><td>0xA8</td></tr><tr><td>imulq $16, (%rax, %rdx, 8)</td><td>0x118</td><td><del>0x176</del> 0x110</td></tr><tr><td>incq 16（%rax)</td><td>0x100</td><td><del>0x100</del> 0x14</td></tr><tr><td>decq %rcx</td><td>%rcx</td><td>0x0</td></tr><tr><td>subq %rdx, %rax</td><td>%rax</td><td>0xFD</td></tr></tbody></table><h3 id="练习题3-9"><a href="#练习题3-9" class="headerlink" title="练习题3.9"></a>练习题3.9</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.9.png" alt="3.9"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">sal<span class="hljs-number">4</span> %rax <br>sarl %ecx %rax<br></code></pre></div></td></tr></table></figure><p>参考答案：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">salq $4, %rax<br>sarq %cl, %rax<br></code></pre></div></td></tr></table></figure><h3 id="练习题3-10"><a href="#练习题3-10" class="headerlink" title="练习题3.10"></a>练习题3.10</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.10.png" alt="3.10"></p><p>答：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-title function_">arith2</span><span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">long</span> y, <span class="hljs-type">long</span> z)</span> &#123;<br>    <span class="hljs-type">long</span> t1 = x | y;<br>    <span class="hljs-type">long</span> t2 = t1 &gt;&gt; <span class="hljs-number">3</span>;<br>    <span class="hljs-type">long</span> t3 = ~t2;<br>    <span class="hljs-type">long</span> t4 = z - t3;<br>    <span class="hljs-keyword">return</span> t4;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-11"><a href="#练习题-3-11" class="headerlink" title="练习题 3.11"></a>练习题 3.11</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.11.png" alt="3.11"></p><p>答：</p><p>A: 寄存器%rdx值置零</p><p>B:subq %rdx %rdx 或者 movq $0 %rdx</p><p>C: </p><h3 id="特殊的运算操作"><a href="#特殊的运算操作" class="headerlink" title="特殊的运算操作"></a>特殊的运算操作</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.5.3.png" alt="3.5.3"></p><h3 id="练习题-3-12"><a href="#练习题-3-12" class="headerlink" title="练习题 3.12"></a>练习题 3.12</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.12.png" alt="3.12"></p><p>答：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">remdiv:<br>movq %rdx, %r8<br>    movq %rdi, %rax<br>    movq $<span class="hljs-number">0</span>, %rdx<br>    idivq %rsi<br>    movq %rax, (%r8)<br>    movq %rdx, (%rcx)<br>    ret<br></code></pre></div></td></tr></table></figure><h3 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.6.1.png" alt="3.6.1"></p><h3 id="比较和测试指令"><a href="#比较和测试指令" class="headerlink" title="比较和测试指令"></a>比较和测试指令</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.5.2.png" alt="3.5.2"></p><h3 id="set-指令"><a href="#set-指令" class="headerlink" title="set 指令"></a>set 指令</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.6.2.png" alt="3.6.2"></p><h3 id="练习题-3-13"><a href="#练习题-3-13" class="headerlink" title="练习题 3.13"></a>练习题 3.13</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.13.png" alt="3.13"></p><p>答：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">A:  <br><span class="hljs-type">int</span> &lt; <span class="hljs-type">int</span><br><br>B:<br><span class="hljs-type">short</span> &gt;= <span class="hljs-type">short</span><br><br>C:<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> &lt;= <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span><br><br>D:<br><span class="hljs-type">long</span> != <span class="hljs-type">long</span>\<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-14"><a href="#练习题-3-14" class="headerlink" title="练习题 3.14"></a>练习题 3.14</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.14.png" alt="3.14"></p><p>答：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">A:  <br><span class="hljs-type">long</span> &gt;=<br><br>B:<br><span class="hljs-type">short</span>\<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>  ==<br><br>C:<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> &gt;<br><br>D:<br><span class="hljs-type">int</span>\<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> !=<br></code></pre></div></td></tr></table></figure><h3 id="jump-指令"><a href="#jump-指令" class="headerlink" title="jump 指令"></a>jump 指令</h3><h3 id="练习题-3-15"><a href="#练习题-3-15" class="headerlink" title="练习题 3.15"></a>练习题 3.15</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.15.png" alt="3.15"></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>:<span class="hljs-number">4003</span>fc + <span class="hljs-number">0</span>x2 = <span class="hljs-number">4003</span>fe<br><span class="hljs-attribute">B</span>:<span class="hljs-number">400431</span> + <span class="hljs-number">0</span>xf4(-<span class="hljs-number">12</span>) = <span class="hljs-number">400425</span><br><span class="hljs-attribute">C</span>:<span class="hljs-number">400543</span> \ <span class="hljs-number">400545</span><br><span class="hljs-attribute">D</span>:<span class="hljs-number">4005</span>ed + <span class="hljs-number">0</span>xffffff73(-<span class="hljs-number">141</span>) = <span class="hljs-number">400560</span><br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-16"><a href="#练习题-3-16" class="headerlink" title="练习题 3.16"></a>练习题 3.16</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.16.png" alt="3.16"></p><p>答：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">A:<br><span class="hljs-type">void</span> <span class="hljs-title function_">cond</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> *p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> done;<br>    <span class="hljs-keyword">if</span> (*p &gt;= a) &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br>    *p = a;<br>    done;<br>&#125;<br>B:汇编一次只能执行一条指令， 两条比较指令包含两个分支<br><br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-17"><a href="#练习题-3-17" class="headerlink" title="练习题 3.17"></a>练习题 3.17</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.17.png" alt="3.17"></p><p>答：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-title function_">gotodiff_se</span><span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">long</span> y)</span> &#123;<br>    <span class="hljs-type">long</span> result;<br>    <span class="hljs-keyword">if</span> (x &lt; y) &#123;<br>        <span class="hljs-keyword">goto</span> x_lt_y<br>    &#125;<br>    ge_cnt++;<br>    result = x - y;<br>    <span class="hljs-keyword">return</span> result;<br>x_lt_y:<br>lt_cnt++;<br>    result = y - x;<br>    <span class="hljs-keyword">return</span> resultl;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.17.B.png" alt="3.17.B"></p><h3 id="练习题-3-18"><a href="#练习题-3-18" class="headerlink" title="练习题 3.18"></a>练习题 3.18</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.18.png" alt="3.18"></p><blockquote><p>com s1, s2 &#x2F;&#x2F; s2 - s1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-title function_">test</span> <span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">long</span> y, <span class="hljs-type">long</span> z)</span> &#123;<br>    <span class="hljs-type">long</span> val = x + y + z;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">-3</span>) &#123;<br>        <span class="hljs-keyword">if</span> (y &lt; z)<br>            val = x * y;<br>        <span class="hljs-keyword">else</span><br>            val = y * z;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">2</span>)<br>        val = x * z;<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-19"><a href="#练习题-3-19" class="headerlink" title="练习题 3.19"></a>练习题 3.19</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.19.png" alt="3.19"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-comment">//不懂</span><br><span class="hljs-symbol">A:</span> T = <span class="hljs-number">2</span> * (<span class="hljs-number">31</span> - <span class="hljs-number">16</span>) = <span class="hljs-number">30</span><br><span class="hljs-symbol">B:</span> <span class="hljs-number">16</span> + <span class="hljs-number">30</span> = <span class="hljs-number">47</span><br></code></pre></div></td></tr></table></figure><h3 id="条件传送指令"><a href="#条件传送指令" class="headerlink" title="条件传送指令"></a>条件传送指令</h3><h3 id="练习题-3-20"><a href="#练习题-3-20" class="headerlink" title="练习题 3.20"></a>练习题 3.20</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.20.png" alt="3.20"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">A: x / <span class="hljs-number">8</span>, 如果x是负数， 必须先加上偏置数<span class="hljs-number">7</span><br>B:<br><span class="hljs-comment">//long arith(long x):</span><br><span class="hljs-comment">//x in %rdi</span><br>arith:<br>leaq <span class="hljs-number">7</span>(%rdi), %rax<span class="hljs-comment">// temp = 7 + x</span><br>    testq %rdi, %rdi<span class="hljs-comment">// x &amp; x</span><br>    cmovns %rdi, %rax<span class="hljs-comment">// 如果 %rdi &gt; 0, %rax = %rdi</span><br>    sarq $<span class="hljs-number">3</span>, %rax<span class="hljs-comment">// %rax &gt;&gt; 3;</span><br>    ret<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-21"><a href="#练习题-3-21" class="headerlink" title="练习题 3.21"></a>练习题 3.21</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.21.png" alt="3.21"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">long</span> y, <span class="hljs-type">long</span> z)</span> &#123;<br>    <span class="hljs-type">long</span> val = <span class="hljs-number">8</span> * x;<br>    <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (x &lt; y) <br>            val = y - x;<br>        <span class="hljs-keyword">else</span> <br>            val = x + y;<br>        <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y &lt;= <span class="hljs-number">-2</span>)&#123;<br>        val = x + y;<br>    &#125;<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-22"><a href="#练习题-3-22" class="headerlink" title="练习题 3.22"></a>练习题 3.22</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.22.png" alt="3.22"></p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">A:</span><br><span class="hljs-symbol">B:</span><br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-23"><a href="#练习题-3-23" class="headerlink" title="练习题 3.23"></a>练习题 3.23</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.23.png" alt="3.23"></p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">A.<br>x : %rax<br>y : %rcx<br>n : %rdx<br>B.<br>答；编译器认为指针p总是指向x，因此表达式(*p) ++就能实现x+<span class="hljs-number">1</span>。通过第<span class="hljs-number">7</span>行的leap指令， 把这个加一和加y组合起来。<br>C.<br><span class="hljs-comment">// long dw_loop(long x)</span><br><span class="hljs-comment">// x initially in %rdi</span><br>dw_loop:<br>movq %rdi, %rax<span class="hljs-comment">//%rax = x</span><br>movq %rdi, %rcx<span class="hljs-comment">//%rcx = x</span><br>imulq %rdi, %rcx<span class="hljs-comment">//y = x * x</span><br>leaq (%rdi, %rdi)<span class="hljs-comment">//n = x + x</span><br>.L2:<span class="hljs-comment">//loop</span><br>leaq <span class="hljs-number">1</span>(%rcx, %rax), %rax<span class="hljs-comment">//x += y + 1;</span><br>subq $1, %rdx<span class="hljs-comment">//n-=1</span><br>testq %rdx, %rdx<span class="hljs-comment">//Test n</span><br>jg .L2<span class="hljs-comment">//if n &gt; 0, goto loop;</span><br>rep;ret<span class="hljs-comment">//return %rax;</span><br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-25"><a href="#练习题-3-25" class="headerlink" title="练习题 3.25"></a>练习题 3.25</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.25.png" alt="3.25"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-title function_">loop_while2</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> b)</span> &#123;<br>    <span class="hljs-type">long</span> result = b;<br>    <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>        result = result * a;<br>        b = b - a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.26.png" alt="3.26"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">A; 方法：跳转到中间 (jump to middle)<br>B;<br><span class="hljs-type">long</span> <span class="hljs-title function_">fun_a</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x)</span> &#123;<br>    <span class="hljs-type">long</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x) &#123;<br>        val ^= x;<br>        x &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> val &amp; <span class="hljs-number">0x1</span>;<br>&#125;<br>C;<br>不懂<br>参考答案：<br>    这个代码计算参数x的奇偶性。 也就是， 如果x中有奇数个<span class="hljs-number">1</span>，就返回<span class="hljs-number">1</span>， 否则返回<span class="hljs-number">0</span>；<br><br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-27"><a href="#练习题-3-27" class="headerlink" title="练习题 3.27"></a>练习题 3.27</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.27.png" alt="3.27"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">long</span> <span class="hljs-title function_">fact_for</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-type">long</span> i;<br>    <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= n; i ++)<br>        result *= i;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br>A;<br>改<span class="hljs-keyword">while</span>;<br><span class="hljs-type">long</span> <span class="hljs-title function_">fact_for</span> <span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= n)<br>        result *= i++;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br>guarded_do 变换;<br><span class="hljs-type">long</span> <span class="hljs-title function_">fact_for_gd_goto</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>)<br>       <span class="hljs-keyword">goto</span> done;<br>    loop:<br>    result *= i;<br>    i ++;<br>    <span class="hljs-keyword">if</span> (i &lt;= n) <br>            <span class="hljs-keyword">goto</span> loop;<br>    done:<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-28"><a href="#练习题-3-28" class="headerlink" title="练习题 3.28"></a>练习题 3.28</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.28.png" alt="3.28"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">A;<br><span class="hljs-type">long</span> <span class="hljs-title function_">fun_b</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> x)</span> &#123;<br>    <span class="hljs-type">long</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">64</span>; i != <span class="hljs-number">0</span>; i --) &#123;<br>        val = (val &lt;&lt; <span class="hljs-number">1</span>) | (<span class="hljs-number">0x1</span> &amp; x);<br>        x &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br>B; 这段代码是从guarded_do变换生成的。编译器发现i初始化成<span class="hljs-number">64</span>，所以一定满足不等于<span class="hljs-number">0</span>，因此初始测试是没必要的。<br>C;<br>翻转x的二进制位<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-29"><a href="#练习题-3-29" class="headerlink" title="练习题 3.29"></a>练习题 3.29</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.29.png" alt="3.29"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">A: <span class="hljs-keyword">for</span>翻译到<span class="hljs-keyword">while</span>循环;<br><span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>) &#123;<br>    <span class="hljs-keyword">if</span>(i &amp; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">continue</span>;<br>    sum += i;<br>    i ++;<br>&#125;<br>当<span class="hljs-keyword">continue</span>时， 会跳过iupdate部分代码， 导致死循环;<br><span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ( i &lt; <span class="hljs-number">10</span> ) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">goto</span> update;<br>    sum += <span class="hljs-number">1</span>;<br>update:<br>    i ++;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-30"><a href="#练习题-3-30" class="headerlink" title="练习题  3.30"></a>练习题  3.30</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.30.png" alt="3.30"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">A; <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>;<br>B; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-31-我不李姐"><a href="#练习题-3-31-我不李姐" class="headerlink" title="练习题 3.31(我不李姐)"></a>练习题 3.31(我不李姐)</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.31.png" alt="3.31"></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">switcher</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> b, <span class="hljs-type">long</span> c, <span class="hljs-type">long</span> *dest)</span> &#123;<br>    <span class="hljs-type">long</span> val;<br>    swtich(a) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      c = b ^ <span class="hljs-number">15</span>;  <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        val = c + <span class="hljs-number">112</span>;<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        val = (b + c) &lt;&lt; <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        val = a;<br>        <span class="hljs-keyword">default</span>:<br>        val = b;<br>    &#125;<br>    *dest = val;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="练习题-3-32"><a href="#练习题-3-32" class="headerlink" title="练习题 3.32"></a>练习题 3.32</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/3.32.png" alt="3.32"></p><table><thead><tr><th align="center">标号</th><th align="center">PC</th><th align="center">指令</th><th align="center">%rdi</th><th align="center">%rsi</th><th align="center">%rax</th><th align="center">%rsp</th><th align="center">* %rsp</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">M1</td><td align="center">0x400560</td><td align="center">callq</td><td align="center">10</td><td align="center">-</td><td align="center">-</td><td align="center">0x7fffffffe820</td><td align="center">-</td><td align="center">调用first(10)</td></tr><tr><td align="center">F1</td><td align="center">0x400548</td><td align="center">lea</td><td align="center">10</td><td align="center">11</td><td align="center">-</td><td align="center"></td><td align="center"></td><td align="center">y&#x3D;x+1</td></tr><tr><td align="center">F2</td><td align="center">0x40054c</td><td align="center">sub</td><td align="center">9</td><td align="center">11</td><td align="center">-</td><td align="center"></td><td align="center"></td><td align="center">x -&#x3D; 1</td></tr><tr><td align="center">F3</td><td align="center">0x400550</td><td align="center">callq</td><td align="center">9</td><td align="center">11</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">调用last</td></tr><tr><td align="center">L1</td><td align="center">0x400540</td><td align="center">mov</td><td align="center">9</td><td align="center">11</td><td align="center">9</td><td align="center"></td><td align="center"></td><td align="center">%rax &#x3D; u</td></tr><tr><td align="center">L2</td><td align="center">0x400543</td><td align="center">imul</td><td align="center">9</td><td align="center">11</td><td align="center">99</td><td align="center"></td><td align="center"></td><td align="center">%rax *&#x3D; v</td></tr><tr><td align="center">L3</td><td align="center">0x400547</td><td align="center">retq</td><td align="center">9</td><td align="center">11</td><td align="center">99</td><td align="center"></td><td align="center"></td><td align="center">从last返回 99</td></tr><tr><td align="center">F4</td><td align="center">0x400555</td><td align="center">repz retq</td><td align="center">9</td><td align="center">11</td><td align="center">99</td><td align="center"></td><td align="center"></td><td align="center">从first返回99</td></tr><tr><td align="center">M2</td><td align="center">0x400565</td><td align="center">mov</td><td align="center">9</td><td align="center">11</td><td align="center">99</td><td align="center"></td><td align="center"></td><td align="center">继续执行想··</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.63</title>
    <link href="/2021/09/10/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-63/"/>
    <url>/2021/09/10/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-63/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.63.1.png" alt="2.63.1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">srl</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> x, <span class="hljs-type">int</span> k)</span> &#123;<br><span class="hljs-comment">//Perform shift arithmetically</span><br><span class="hljs-type">unsigned</span> xsra = (<span class="hljs-type">int</span>)x &gt;&gt; k;<br><span class="hljs-comment">//将算术右移补符号位替换成0，完成逻辑右移</span><br>xsra &amp;= ((<span class="hljs-type">unsigned</span>)<span class="hljs-number">-1</span> &gt;&gt; k);<br><span class="hljs-keyword">return</span> xsra;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sra</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> &#123;<br><span class="hljs-comment">//Perform shift logically</span><br><span class="hljs-type">int</span> xsrl = (<span class="hljs-type">unsigned</span>)x &gt;&gt; k;<br><span class="hljs-comment">//将逻辑右移的补高位0替换成算术右移的符号位</span><br><span class="hljs-type">int</span> w = <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) &lt;&lt; <span class="hljs-number">3</span>;<span class="hljs-comment">//获取位长w</span><br><span class="hljs-type">int</span> z = <span class="hljs-number">1</span> &lt;&lt; (w - k - <span class="hljs-number">1</span>);<span class="hljs-comment">//</span><br><span class="hljs-type">int</span> mark = z - <span class="hljs-number">1</span>;<span class="hljs-comment">//</span><br><span class="hljs-type">int</span> right = xsrl &amp; mark;<br><span class="hljs-type">int</span> left = ~mark &amp; (~(z&amp;xsrl)+z);<span class="hljs-comment">//不理解。</span><br><br><span class="hljs-comment">// printf(&quot;%x\n&quot;, xsrl);</span><br><span class="hljs-comment">// printf(&quot;%x\n&quot;, (z&amp;xsrl));</span><br><span class="hljs-comment">// printf(&quot;%x\n&quot;, (~(z&amp;xsrl)+z));</span><br><span class="hljs-keyword">return</span> left | right;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, srl(<span class="hljs-number">0xF2345678</span>, <span class="hljs-number">8</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, sra(<span class="hljs-number">0xF2345678</span>, <span class="hljs-number">8</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>脑短路、好难啊</p>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.62</title>
    <link href="/2021/09/10/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-62/"/>
    <url>/2021/09/10/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-62/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.62.1.png" alt="2.62.1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">int_shifts_are_arithmetic</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> !~(x &gt;&gt; (<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) &lt;&lt; <span class="hljs-number">3</span>));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, int_shifts_are_arithmetic());<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.61</title>
    <link href="/2021/09/10/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-61/"/>
    <url>/2021/09/10/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-61/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.61.1.png" alt="2.61.1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> true 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> false 0</span><br><br><span class="hljs-comment">//错误：使用了禁用的运算</span><br><span class="hljs-comment">// int check(int x) &#123;</span><br><span class="hljs-comment">// //A</span><br><span class="hljs-comment">// if (x == 0xFFFFFFFF) return true;</span><br><span class="hljs-comment">// //B</span><br><span class="hljs-comment">// if (x == 0) return true;</span><br><span class="hljs-comment">// char *p = (char *) &amp;x;</span><br><span class="hljs-comment">// int n = sizeof(x);</span><br><span class="hljs-comment">// //C</span><br><span class="hljs-comment">// if (*p == 0xFF) return true;</span><br><span class="hljs-comment">// //D</span><br><span class="hljs-comment">// while (n --) p ++;</span><br><span class="hljs-comment">// if (*p == 0) return true;</span><br><br><span class="hljs-comment">// return false;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-keyword">return</span> <br><span class="hljs-comment">//A</span><br>!(~x) ||<br><span class="hljs-comment">//B</span><br>!x ||<br><span class="hljs-comment">//C</span><br>!((~x) &amp; <span class="hljs-number">0xFF</span>) ||<br><span class="hljs-comment">//D</span><br>!(x &amp; <span class="hljs-number">0xFF000000</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, check(<span class="hljs-number">0x07000000</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验四：温度与湿度监测</title>
    <link href="/2021/09/09/%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9A%E6%B8%A9%E5%BA%A6%E4%B8%8E%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B/"/>
    <url>/2021/09/09/%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9A%E6%B8%A9%E5%BA%A6%E4%B8%8E%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="实验一："><a href="#实验一：" class="headerlink" title="实验一："></a>实验一：</h1><h2 id="1-实验原理"><a href="#1-实验原理" class="headerlink" title="1. 实验原理"></a>1. 实验原理</h2><p><code>温度传感器：接触式和非接触式。</code></p><p><code>湿度传感器：电阻式、电容式湿敏元件，电解质离子型湿敏元件、重量型湿敏元件、光强型湿敏元件、声表面波湿敏元件</code></p><h2 id="2-材料清单"><a href="#2-材料清单" class="headerlink" title="2. 材料清单"></a>2. 材料清单</h2><table><thead><tr><th>元器件名称</th><th>信号参数规格</th><th>数量</th><th>参考实物图</th></tr></thead><tbody><tr><td>Arduino开发板</td><td>Uno R3</td><td>1</td><td></td></tr><tr><td>面包板</td><td>840孔无焊板</td><td>1</td><td></td></tr><tr><td>温度与湿度传感器</td><td>DHT11</td><td>1</td><td></td></tr><tr><td>杜邦线</td><td></td><td>3</td><td></td></tr></tbody></table><h2 id="3-硬件连接"><a href="#3-硬件连接" class="headerlink" title="3. 硬件连接"></a>3. 硬件连接</h2><h2 id="4-程序设计"><a href="#4-程序设计" class="headerlink" title="4. 程序设计"></a>4. 程序设计</h2><h3 id="4-1-流程图"><a href="#4-1-流程图" class="headerlink" title="4.1 流程图"></a>4.1 流程图</h3><h3 id="4-2-程序源码"><a href="#4-2-程序源码" class="headerlink" title="4.2 程序源码"></a>4.2 程序源码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><br></code></pre></div></td></tr></table></figure><h2 id="5-调试及实验现象"><a href="#5-调试及实验现象" class="headerlink" title="5. 调试及实验现象"></a>5. 调试及实验现象</h2><h2 id="6-代码回顾"><a href="#6-代码回顾" class="headerlink" title="6. 代码回顾"></a>6. 代码回顾</h2><h2 id="7-扩展实验"><a href="#7-扩展实验" class="headerlink" title="7. 扩展实验"></a>7. 扩展实验</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验三：火焰传感器</title>
    <link href="/2021/09/09/%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%9A%E7%81%AB%E7%84%B0%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <url>/2021/09/09/%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%9A%E7%81%AB%E7%84%B0%E4%BC%A0%E6%84%9F%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="实验一："><a href="#实验一：" class="headerlink" title="实验一："></a>实验一：</h1><h2 id="1-实验原理"><a href="#1-实验原理" class="headerlink" title="1. 实验原理"></a>1. 实验原理</h2><p><code>火焰传感器利用红外线对火焰非常敏感的特点， 使用特制的红外线接收管来监测火焰， 将火焰的亮度转化为高低变化的电平信号</code></p><h2 id="2-材料清单"><a href="#2-材料清单" class="headerlink" title="2. 材料清单"></a>2. 材料清单</h2><table><thead><tr><th>元器件名称</th><th>信号参数规格</th><th>数量</th><th>参考实物图</th></tr></thead><tbody><tr><td>Arduino开发板</td><td>Uno R3</td><td>1</td><td></td></tr><tr><td>面包板</td><td>840孔无焊板</td><td>1</td><td></td></tr><tr><td>火焰传感器模块</td><td>LM393</td><td>1</td><td></td></tr><tr><td>面包板专用插线</td><td></td><td>若干</td><td></td></tr><tr><td>有源蜂鸣器</td><td></td><td>1</td><td></td></tr><tr><td>10KΩ电阻</td><td></td><td>1</td><td></td></tr></tbody></table><h2 id="3-硬件连接"><a href="#3-硬件连接" class="headerlink" title="3. 硬件连接"></a>3. 硬件连接</h2><h2 id="4-程序设计"><a href="#4-程序设计" class="headerlink" title="4. 程序设计"></a>4. 程序设计</h2><h3 id="4-1-流程图"><a href="#4-1-流程图" class="headerlink" title="4.1 流程图"></a>4.1 流程图</h3><h3 id="4-2-程序源码"><a href="#4-2-程序源码" class="headerlink" title="4.2 程序源码"></a>4.2 程序源码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">int</span> beep = <span class="hljs-number">8</span>;     <span class="hljs-comment">//蜂鸣器引脚</span><br><span class="hljs-type">int</span> flameVal = <span class="hljs-number">0</span>; <span class="hljs-comment">//存储火焰传感器数据</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-comment">// put your setup code here, to run once:</span><br>  pinMode(beep, OUTPUT);<br>  pinMode(A0, INPUT);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-comment">// put your main code here, to run repeatedly:</span><br>  flameVal = analogRead(A0);<span class="hljs-comment">//读取火焰传感器的数值。</span><br>  <span class="hljs-keyword">if</span> (flameVal &gt;= <span class="hljs-number">200</span>)  <span class="hljs-comment">//模拟量 &gt;= 200 时响。 注意阈值根据实际测试进行修改</span><br>  &#123;<br>    digitalWrite(beep, HIGH);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    digitalWrite(beep, LOW);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-调试及实验现象"><a href="#5-调试及实验现象" class="headerlink" title="5. 调试及实验现象"></a>5. 调试及实验现象</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验二：按键开关输入</title>
    <link href="/2021/09/09/%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%9A%E6%8C%89%E9%94%AE%E5%BC%80%E5%85%B3%E8%BE%93%E5%85%A5/"/>
    <url>/2021/09/09/%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%9A%E6%8C%89%E9%94%AE%E5%BC%80%E5%85%B3%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="实验二：按键开关输入"><a href="#实验二：按键开关输入" class="headerlink" title="实验二：按键开关输入"></a>实验二：按键开关输入</h1><h2 id="1-实验原理"><a href="#1-实验原理" class="headerlink" title="1. 实验原理"></a>1. 实验原理</h2><h2 id="2-材料清单"><a href="#2-材料清单" class="headerlink" title="2. 材料清单"></a>2. 材料清单</h2><table><thead><tr><th>元器件名称</th><th>信号参数规格</th><th>数量</th><th>参考实物图</th></tr></thead><tbody><tr><td>Arduino开发板</td><td>Uno R3</td><td>1</td><td></td></tr></tbody></table><h2 id="3-硬件连接"><a href="#3-硬件连接" class="headerlink" title="3. 硬件连接"></a>3. 硬件连接</h2><h2 id="4-程序设计"><a href="#4-程序设计" class="headerlink" title="4. 程序设计"></a>4. 程序设计</h2><h3 id="4-1-流程图"><a href="#4-1-流程图" class="headerlink" title="4.1 流程图"></a>4.1 流程图</h3><h3 id="4-2-程序源码"><a href="#4-2-程序源码" class="headerlink" title="4.2 程序源码"></a>4.2 程序源码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">int</span> LEDPin = <span class="hljs-number">3</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// put your setup code here, to run once:</span><br>  pinMode(LEDPin, OUTPUT);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// put your main code here, to run repeatedly:</span><br>  <span class="hljs-type">int</span> val;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">//获取电压值， 0~5V : 0 ~ 1023</span><br>    val = analogRead(A0);<br>    <span class="hljs-keyword">if</span> (val &gt;= <span class="hljs-number">1000</span>) &#123;<br>      digitalWrite(LEDPin, HIGH);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      digitalWrite(LEDPin, LOW);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="5-调试及实验现象"><a href="#5-调试及实验现象" class="headerlink" title="5. 调试及实验现象"></a>5. 调试及实验现象</h2><h2 id="6-代码回顾"><a href="#6-代码回顾" class="headerlink" title="6. 代码回顾"></a>6. 代码回顾</h2><h2 id="7-扩展实验"><a href="#7-扩展实验" class="headerlink" title="7. 扩展实验"></a>7. 扩展实验</h2><p>上述实验中， 按键按下LED亮，要想LED一直亮着， 按键需一直按下。修改源码，实现当按键按下并放开后，LED任然会一直亮着</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">int</span> LEDPin = <span class="hljs-number">3</span>;<br><span class="hljs-type">bool</span> w = <span class="hljs-literal">false</span>; <span class="hljs-comment">//开关按下， w取反</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span><br>&#123;<br>    pinMode(LEDPin, OUTPUT);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-comment">//获取电压值， 0~5V : 0 ~ 1023</span><br>        <span class="hljs-keyword">if</span> (analogRead(A0) &gt;= <span class="hljs-number">1000</span>)<br>        &#123;<br>            w = !w;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (w)<br>        &#123;<br>            digitalWrite(LEDPin, HIGH);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            digitalWrite(LEDPin, LOW);<br>        &#125;<br>        delay(<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//版本2</span><br><span class="hljs-comment">// #define LEDPin 3</span><br><span class="hljs-comment">// #define sw 7</span><br><span class="hljs-comment">// int old = 0;</span><br><span class="hljs-comment">// bool state = false; //开关按下， w取反</span><br><br><span class="hljs-comment">// void setup()</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     pinMode(LEDPin, OUTPUT);</span><br><span class="hljs-comment">//     pinMode(sw, INPUT);</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// void loop()</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     unsigned char val; //读取高低位</span><br><span class="hljs-comment">//     val = digitalRead(sw);</span><br><span class="hljs-comment">//     if (val == HIGH &amp;&amp; old == LOW)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         state = !state;</span><br><span class="hljs-comment">//         delay(10);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//     old = val;</span><br><span class="hljs-comment">//     //获取电压值， 0~5V : 0 ~ 1023</span><br><br><span class="hljs-comment">//     if (state)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         digitalWrite(LEDPin, HIGH);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//     else</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         digitalWrite(LEDPin, LOW);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验一：炫酷LED灯</title>
    <link href="/2021/09/09/%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9A%E7%82%AB%E9%85%B7LED%E7%81%AF/"/>
    <url>/2021/09/09/%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9A%E7%82%AB%E9%85%B7LED%E7%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="实验一：炫酷LED灯"><a href="#实验一：炫酷LED灯" class="headerlink" title="实验一：炫酷LED灯"></a>实验一：炫酷LED灯</h1><h2 id="1-实验原理"><a href="#1-实验原理" class="headerlink" title="1. 实验原理"></a>1. 实验原理</h2><h2 id="2-材料清单"><a href="#2-材料清单" class="headerlink" title="2. 材料清单"></a>2. 材料清单</h2><table><thead><tr><th>元器件名称</th><th>信号参数规格</th><th>数量</th><th>参考实物图</th></tr></thead><tbody><tr><td>Arduino开发板</td><td>Uno R3</td><td>1</td><td></td></tr><tr><td>面包板</td><td>840孔无焊板</td><td>1</td><td></td></tr><tr><td>LED</td><td>蓝色-5mm</td><td>1</td><td></td></tr><tr><td>电阻</td><td>220Ω，0.25W</td><td>1</td><td></td></tr><tr><td>M面包板专用插线</td><td></td><td>若干</td><td></td></tr></tbody></table><h2 id="3-硬件连接"><a href="#3-硬件连接" class="headerlink" title="3. 硬件连接"></a>3. 硬件连接</h2><h2 id="4-程序设计"><a href="#4-程序设计" class="headerlink" title="4. 程序设计"></a>4. 程序设计</h2><h3 id="4-1-流程图"><a href="#4-1-流程图" class="headerlink" title="4.1 流程图"></a>4.1 流程图</h3><h3 id="4-2-程序源码"><a href="#4-2-程序源码" class="headerlink" title="4.2 程序源码"></a>4.2 程序源码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//LED闪烁灯</span><br><span class="hljs-type">int</span> LEDPin = <span class="hljs-number">3</span>;<br><span class="hljs-comment">//延迟时间</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> dTime 1000</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//设置led pin为输出脚</span><br>  pinMode(LEDPin, OUTPUT);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//高低位轮换， 间隔1000ms</span><br>  digitalWrite(LEDPin, HIGH);<br>  delay(dTime);<br>  digitalWrite(LEDPin, LOW);<br>  delay(dTime);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="5-调试及实验现象"><a href="#5-调试及实验现象" class="headerlink" title="5. 调试及实验现象"></a>5. 调试及实验现象</h2><h2 id="6-代码回顾"><a href="#6-代码回顾" class="headerlink" title="6. 代码回顾"></a>6. 代码回顾</h2><h2 id="7-扩展实验"><a href="#7-扩展实验" class="headerlink" title="7. 扩展实验"></a>7. 扩展实验</h2><p>思路：根据乐谱设定LED灯的闪烁。</p><p>乐谱：一闪一闪亮晶晶</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c2_4[] = <br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>,<br>            <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>,<br>            <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>,<br>            <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>,<br>            <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <br>            <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br><br><br><span class="hljs-type">int</span> LED1 = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> LED2 = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> LED3 = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> LED4 = <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> LED5 = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> LED6 = <span class="hljs-number">6</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i;<br>    <span class="hljs-comment">//初始化所有针脚</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i ++)<br>        pinMode(i, OUTPUT);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, idx, cnt;<br>    cnt = <span class="hljs-keyword">sizeof</span>(c2_4 ) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>);<br>    <span class="hljs-keyword">for</span> (cnt = <span class="hljs-number">0</span>, idx = <span class="hljs-number">0</span>; i &lt; cnt; i ++) &#123;<br>        <br>    &#125;    <br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode配置Arduino开发环境</title>
    <link href="/2021/09/09/VSCode%E9%85%8D%E7%BD%AEArduino%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/09/09/VSCode%E9%85%8D%E7%BD%AEArduino%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h3 id="1-安装Arduino"><a href="#1-安装Arduino" class="headerlink" title="1. 安装Arduino"></a>1. 安装Arduino</h3><p> <a href="https://www.arduino.cc/en/Main/Software">Arduino官网</a>,下载安装过程详情百度。</p><h3 id="2-安装vs-code"><a href="#2-安装vs-code" class="headerlink" title="2. 安装vs code"></a>2. 安装vs code</h3><p><a href="https://code.visualstudio.com/download">VS code官网</a>,下载安装过程详情百度。</p><h3 id="3-VS-Code配置Arduino插件"><a href="#3-VS-Code配置Arduino插件" class="headerlink" title="3. VS Code配置Arduino插件"></a>3. VS Code配置Arduino插件</h3><h4 id="3-1-安装arduino插件"><a href="#3-1-安装arduino插件" class="headerlink" title="3.1 安装arduino插件"></a>3.1 安装arduino插件</h4><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/a.1.1.png" alt="a.1.1"></p><h4 id="3-2-解决编译乱码问题："><a href="#3-2-解决编译乱码问题：" class="headerlink" title="3.2 解决编译乱码问题："></a>3.2 解决编译乱码问题：</h4><p>详细教程：<a href="https://blog.csdn.net/weixin_42225355/article/details/104906950">教程链接</a></p><p>我的做法：</p><p>本机路径：<code>&quot;C:\Users\k\.vscode\extensions\vsciot-vscode.vscode-arduino-0.4.4\out\src\common\util.js&quot;</code></p><ol><li><p>注释掉里面大概205行里的</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (os.<span class="hljs-title function_">platform</span>() === <span class="hljs-string">&quot;win32&quot;</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> chcp = child_process.<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;chcp.com&quot;</span>);<br>            codepage = chcp.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>).<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">trim</span>();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (error) &#123;<br>            outputChannel_1.<span class="hljs-property">arduinoChannel</span>.<span class="hljs-title function_">warning</span>(<span class="hljs-string">`Defaulting to code page 850 because chcp.com failed.\</span><br><span class="hljs-string">    \rEnsure your path includes %SystemRoot%\\system32\r<span class="hljs-subst">$&#123;error.message&#125;</span>`</span>);<br>            codepage = <span class="hljs-string">&quot;850&quot;</span>;<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如图：</p><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/a.1.2.png" alt="a.1.2"></p></li></ol><h4 id="3-3-成果"><a href="#3-3-成果" class="headerlink" title="3.3 成果"></a>3.3 成果</h4><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/a.1.3.png" alt="a.1.3"></p><h3 id="4-为什么选择VS-Code？"><a href="#4-为什么选择VS-Code？" class="headerlink" title="4. 为什么选择VS Code？"></a>4. 为什么选择VS Code？</h3><p>在同样能实现编译和烧写的前提下，代码高亮、代码提示、代码跳转、代码检查，是提升开发效率的基本前提！</p><p>Arduino，拍马不及， 拉跨。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.60</title>
    <link href="/2021/09/08/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-60/"/>
    <url>/2021/09/08/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-60/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.60.1.png" alt="2.60.1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">replace_type</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> x, <span class="hljs-type">int</span> i,  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> b)</span> &#123;<br><span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span> *)&amp;x;<br><span class="hljs-keyword">while</span>(i --) p ++;<br>*p = b;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, replace_type(<span class="hljs-number">0x12345678</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0xAB</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, replace_type(<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xAB</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用char指针替换某字节数据</p>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.59</title>
    <link href="/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-59/"/>
    <url>/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-59/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//返回x的最低有效字节和y剩下的字节</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> y)</span> &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> t = <span class="hljs-number">0xFF</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> res = (x &amp; t) | (y &amp; ~t);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, res);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x = <span class="hljs-number">0x89ABCDEF</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> y = <span class="hljs-number">0x76543210</span>;<br><span class="hljs-comment">//预期结果：z</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> z = <span class="hljs-number">0x765432EF</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, z == cal(x, y));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>采用掩码。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.58</title>
    <link href="/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-58/"/>
    <url>/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-58/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.58.1.png" alt="2.58.1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_little_endian</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x = <span class="hljs-number">0x12345600</span>;<br><span class="hljs-type">char</span> *p = (<span class="hljs-type">char</span> *) &amp;x;<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">is_little_endian2</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> y = (<span class="hljs-type">char</span>) x;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (is_little_endian2()) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小端机器\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;大端机器\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.57</title>
    <link href="/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-57/"/>
    <url>/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-57/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.57.1.png" alt="2.57.1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//short</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">show_short</span><span class="hljs-params">(<span class="hljs-type">short</span> *p, <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;show_short:\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, *p);<br>p++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//long</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">show_long</span><span class="hljs-params">(<span class="hljs-type">long</span> *p, <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;show_long:\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, *p);<br>p++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//double</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">show_double</span><span class="hljs-params">(<span class="hljs-type">double</span> *p, <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;show_double:\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, *p);<br>p++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>show_short((<span class="hljs-type">short</span> *) p, (<span class="hljs-keyword">sizeof</span> (*p) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">short</span>) - <span class="hljs-number">1</span> ) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">short</span>) );<br>show_long((<span class="hljs-type">long</span> *) p, (<span class="hljs-keyword">sizeof</span> (*p) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>) - <span class="hljs-number">1</span> ) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>) );<br>show_double((<span class="hljs-type">double</span> *) p, (<span class="hljs-keyword">sizeof</span> (*p) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>) - <span class="hljs-number">1</span> ) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>) );<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">short</span> x1 = <span class="hljs-number">0x7F</span>;<br><span class="hljs-type">long</span> x2 = <span class="hljs-number">0x7F6f5f4f</span>;<br><span class="hljs-type">double</span> x3 = <span class="hljs-number">0x7F6f5f4f</span>;<br>test(&amp;x1);<br>test(&amp;x2);<br>test(&amp;x3);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p>只在本机上运行的结果：</p><table><thead><tr><th>原类型</th><th>值</th><th>show_short()</th><th>show_long()</th><th>show_double()</th></tr></thead><tbody><tr><td>short</td><td>0x7f</td><td>7f</td><td>1390007f</td><td>1390007f</td></tr><tr><td>long</td><td>0x7f6f5f4f</td><td>5f4f</td><td>7f6f5f4f</td><td>7f6f5f4f</td></tr><tr><td>double</td><td>0x7f6f5f4f</td><td>0</td><td>d3c00000</td><td>d3c00000</td></tr></tbody></table><h3 id="观察现象"><a href="#观察现象" class="headerlink" title="观察现象:"></a>观察现象:</h3><p>show_long() 和 show_double() 显示 short时， 发生指针越界 导致大端多了6个字符（小端机器）， 而最小小端显示正确。</p><p>show_short() 显示long 和 double 时， 皆出错。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>强制类型指针转换， 会导致错误的结果。尽量不使用强制类型指针转换。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.56</title>
    <link href="/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-56/"/>
    <url>/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-56/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.56.1.png" alt="2.56.1"></p><h3 id="不同示例"><a href="#不同示例" class="headerlink" title="不同示例"></a>不同示例</h3><table><thead><tr><th align="center">x取值</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">0x34654321</td><td align="center">21 43 65 34</td></tr><tr><td align="center">0x23498275</td><td align="center">75 ffffff82 49 23</td></tr><tr><td align="center">0x87654321</td><td align="center">21 43 65 ffffff87</td></tr><tr><td align="center">0x23412563</td><td align="center">63 25 41 23</td></tr></tbody></table><p>观察现象：无论x取何值时，运行代码打印的都遵循从小端，到大端输出的顺序。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>多组示例表明该机器为小端机器。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP第二章家庭作业2.55</title>
    <link href="/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-55/"/>
    <url>/2021/09/06/CSAPP%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A2-55/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="https://typoradrawingbed.oss-cn-guangzhou.aliyuncs.com/img/2.55.1.png" alt="2.55.1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">show_types</span><span class="hljs-params">(<span class="hljs-type">char</span> *p, <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, *p);<br>p++;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x = <span class="hljs-number">0x12345678</span>;<br>show_types((<span class="hljs-type">char</span>*) &amp;x, <span class="hljs-number">4</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行程序，控制台打印：78 56 34 12，输出由小端到大端逐个输出， 说明这是个小端机器</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>小端机器。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深入理解计算机操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十二届蓝桥杯省赛第二场C++B组题解</title>
    <link href="/2021/05/09/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BAC++%E5%A4%A7%E5%AD%A6B%E7%BB%84/"/>
    <url>/2021/05/09/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BAC++%E5%A4%A7%E5%AD%A6B%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>拿到试题解压一看，就这？啪的一下A题直接提交1，传统功夫A题点到为止。这题不用优化，那题直接暴力求解，半个小时不到就到了J题，很快啊。回头一检查，这题写错了、这题看错题意，全部丢分了，我大意了啊，他说他是简单题，他可不是简单题，排列组合、质因数分解、prim、优先队列、回溯，看来是有备而来！我劝年轻人好自为之，好好反思，以后不要再犯这样的聪明，贪图一时快…武林要以和为贵，要细心读题，仔细码题，谢谢朋友们！</p><p><strong>考前：第一场这么难..</strong></p><p><strong>拿到试题：重铸省一荣光，我辈义不容辞</strong></p><p><strong>看了大佬题解：拿到省三就算成功</strong></p><h1 id="结果填空题"><a href="#结果填空题" class="headerlink" title="结果填空题"></a>结果填空题</h1><h2 id="填空题答案一览"><a href="#填空题答案一览" class="headerlink" title="填空题答案一览"></a>填空题答案一览</h2><table><thead><tr><th>题目</th><th>答案</th><th>分值</th></tr></thead><tbody><tr><td>A: 求余</td><td>$1$</td><td>$5$</td></tr><tr><td>B: 双阶乘</td><td>$59375$</td><td>$5$</td></tr><tr><td>C: 格点</td><td>$15698$</td><td>$10$</td></tr><tr><td>D: 整数分解</td><td>$691677274345$</td><td>$10$</td></tr><tr><td>E: 城邦</td><td>$4046$</td><td>$15$</td></tr></tbody></table><h2 id="A-求余"><a href="#A-求余" class="headerlink" title="A: 求余"></a>A: 求余</h2><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt; <span class="hljs-number">2021</span>%<span class="hljs-number">20</span> &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//1</span><br></code></pre></div></td></tr></table></figure><h2 id="B-双阶乘"><a href="#B-双阶乘" class="headerlink" title="B: 双阶乘"></a>B: 双阶乘</h2><p><strong>分析：</strong>高位上的数字对结果没有影响，取余截掉</p><p><strong>代码:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">2021</span>;i&gt;<span class="hljs-number">0</span>;i-=<span class="hljs-number">2</span>) num = (num * i) %<span class="hljs-number">1000000</span>;<br>    cout&lt;&lt; num % <span class="hljs-number">100000</span> &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//59375</span><br></code></pre></div></td></tr></table></figure><h2 id="C-格点"><a href="#C-格点" class="headerlink" title="C: 格点"></a>C: 格点</h2><p><strong>分析:</strong> 根据题意，枚举所有可能符合的坐标，进行判断</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2030</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2030</span>;j++)&#123;<br>                <span class="hljs-keyword">if</span>(i * j &lt;=<span class="hljs-number">2021</span>) res++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; res &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//15698</span><br></code></pre></div></td></tr></table></figure><h2 id="D-整数分解"><a href="#D-整数分解" class="headerlink" title="D: 整数分解"></a>D: 整数分解</h2><h3 id="解法一-四重循环暴力求解："><a href="#解法一-四重循环暴力求解：" class="headerlink" title="解法一-四重循环暴力求解："></a>解法一-四重循环暴力求解：</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> n =<span class="hljs-number">2021</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;a&lt;=<span class="hljs-number">500</span>;a++)&#123;<br>        <span class="hljs-type">int</span> an = n-a;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = a;b&lt;=<span class="hljs-number">1000</span>;b++)&#123;<br>            <span class="hljs-type">int</span> bn = an -b;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c = b;c&lt;=<span class="hljs-number">1500</span>;c++)&#123;<br>                <span class="hljs-type">int</span> cn = bn -c ;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = c;d&lt;=cn;d++)&#123;<br>                    <span class="hljs-type">int</span> e = cn - d;<br>                    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">if</span>(e &gt;= d)&#123;<br>                        <span class="hljs-comment">//五个相等</span><br>                        <span class="hljs-keyword">if</span>(a == e) t =<span class="hljs-number">1</span>;<br>                        <span class="hljs-comment">//四个相等</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((a==d) || (b==e)) t =<span class="hljs-number">5</span>;<br>                        <span class="hljs-comment">//三个相等                        </span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((a==c) || (b==d) || (c==e)) t= <span class="hljs-number">20</span>;<br>                        <span class="hljs-comment">//两对相等</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((a==b &amp;&amp; c==d) || (a==b &amp;&amp; d==e) || (b==c &amp;&amp; d ==e)) t= <span class="hljs-number">30</span>;<br>                        <span class="hljs-comment">//一对相等</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==b || b==c || c==d || d==e) t = <span class="hljs-number">60</span>;<br>                        <span class="hljs-comment">//全不相等</span><br>                        <span class="hljs-keyword">else</span> t = <span class="hljs-number">120</span>;<br>                    &#125;<br><br>                    res += t;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; res &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//691677277715</span><br></code></pre></div></td></tr></table></figure><h3 id="解法二-转换思路的三重循环："><a href="#解法二-转换思路的三重循环：" class="headerlink" title="解法二-转换思路的三重循环："></a>解法二-转换思路的三重循环：</h3><p><strong>分析</strong>：三重循环枚举三个数，差是m，和为m的两个正整数可能是m-1种</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ll res = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">2021</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;a&lt;=n;a++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;b&lt;=n;b++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c = <span class="hljs-number">1</span>;c&lt;=n;c++)<br>            &#123;<br>                <span class="hljs-type">int</span> d = n -a -b -c;<br>                <span class="hljs-keyword">if</span>(d &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>                res += d<span class="hljs-number">-1</span>;<br>            &#125;<br>cout&lt;&lt; res &lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//691677274345</span><br></code></pre></div></td></tr></table></figure><h3 id="解法三-动态规划："><a href="#解法三-动态规划：" class="headerlink" title="解法三-动态规划："></a>解法三-动态规划：</h3><p>1-2021，取五个数的和是2021的可能数</p><p>$dp[i][j]$表示$i$个数和为$j$的可能数 </p><p>$k$表示$dp[i-1][j-k]$加上一个数$k$，就是$dp[i][j]$的所有可能</p><p>$$<br>dp[i][j] &#x3D; \begin{cases} dp[i][j] +dp[i-1]<a href="j%3Ek">j-k</a>\0 \end{cases}<br>$$<br><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll dp[<span class="hljs-number">6</span>][<span class="hljs-number">2022</span>];<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;<span class="hljs-number">2022</span>;i++) dp[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span>; <span class="hljs-comment">//边界处理</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">5</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">1</span>; j&lt;<span class="hljs-number">2022</span>;j++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k&lt;<span class="hljs-number">2022</span>;k++)&#123;<br>                <span class="hljs-keyword">if</span>(j-k &gt; <span class="hljs-number">0</span>) dp[i][j] += dp[i<span class="hljs-number">-1</span>][j-k];<br>            &#125;<br>    cout&lt;&lt; dp[<span class="hljs-number">5</span>][<span class="hljs-number">2021</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//691677274345</span><br></code></pre></div></td></tr></table></figure><h3 id="隔板法"><a href="#隔板法" class="headerlink" title="隔板法"></a>隔板法</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt; <span class="hljs-number">1ll</span>*<span class="hljs-number">2020</span>*<span class="hljs-number">2019</span>*<span class="hljs-number">2018</span>*<span class="hljs-number">2017</span>/<span class="hljs-number">4</span>/<span class="hljs-number">3</span>/<span class="hljs-number">2</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="E-城邦"><a href="#E-城邦" class="headerlink" title="E: 城邦"></a>E: 城邦</h2><p><strong>分析：</strong>构建邻接矩阵，最小生成树套模板（prim）</p><p>这题比赛的时候理解错权重了，给的数据 </p><blockquote><p> 2021 和 922加起来是 (2 + 0 + 1) + (0 + 9 + 2) &#x3D; 14</p></blockquote><p>以为权重等于不同数字的和！！！15分凉凉</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 2030</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-type">int</span> e[maxn][maxn];<br><span class="hljs-type">int</span> cost[maxn];<br><span class="hljs-type">bool</span> used[maxn];<br><span class="hljs-type">int</span> V = <span class="hljs-number">2021</span>;<br><br><span class="hljs-comment">//prim</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(cost , INF , <span class="hljs-keyword">sizeof</span> cost);<br>    <span class="hljs-built_in">memset</span>(used , <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> used);  <br>    cost[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> v = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>;u&lt;=V;u++)&#123;<br>            <span class="hljs-keyword">if</span>(!used[u] &amp;&amp; (v==<span class="hljs-number">-1</span> || cost[u] &lt; cost[v])) v = u;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(v == <span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<br>        used[v] = <span class="hljs-number">1</span>;<br>        res += cost[v];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>;u&lt;=V;u++)&#123;<br>            cost[u] = <span class="hljs-built_in">min</span>(cost[u], e[v][u]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">//获取权重</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a || b)&#123;<br>        <span class="hljs-keyword">if</span>(a%<span class="hljs-number">10</span> != b%<span class="hljs-number">10</span>) res+=a%<span class="hljs-number">10</span> + b%<span class="hljs-number">10</span>;<br>        a/=<span class="hljs-number">10</span>, b/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-built_in">memset</span>(e, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> e);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2021</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2021</span>;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i == j) <span class="hljs-keyword">continue</span>;<br>            e[i][j] = e[j][i] = <span class="hljs-built_in">get</span>(i , j);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; <span class="hljs-built_in">prim</span>() &lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//4046</span><br></code></pre></div></td></tr></table></figure><h1 id="程序设计题"><a href="#程序设计题" class="headerlink" title="程序设计题"></a>程序设计题</h1><h2 id="F-特殊年份"><a href="#F-特殊年份" class="headerlink" title="F: 特殊年份"></a><strong>F:</strong> 特殊年份</h2><p><strong>分析：</strong>根据题意，求各位的数字，进行判断</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 10</span><br><br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) cin&gt;&gt;a[i];<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-type">int</span> q = a[i] /<span class="hljs-number">1000</span>;<br>        <span class="hljs-type">int</span> b = a[i] %<span class="hljs-number">1000</span> / <span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> s = a[i] %<span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> g = a[i] %<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(q == s &amp;&amp; g == b +<span class="hljs-number">1</span>) &#123;<br>            res ++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="G-小平方"><a href="#G-小平方" class="headerlink" title="G: 小平方"></a><strong>G:</strong> 小平方</h2><p><strong>分析：</strong>暴力枚举，数据规模小（1 ≤ <em>n</em> ≤ 10000）</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>( (i*i%n) &lt; (n /<span class="hljs-number">2.0</span>)) res++;<br>    &#125;<br>    cout&lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="H-完全平方数"><a href="#H-完全平方数" class="headerlink" title="H: 完全平方数"></a>H: 完全平方数</h2><p><strong>分析：</strong>对n进行质因数分解，将奇数个的所有质因数的乘积就是答案。</p><p>$ \sqrt{p} &#x3D;  \sqrt{p_1^{a1} \cdot P_2^{a2} \cdot P_3^{a3}} &#x3D; \sqrt{p_1^{a1}} \cdot\sqrt{ P_2^{a2}} \cdot \sqrt{P_3^{a3}}，当a1是偶数时，\sqrt{p_1^{a1}} &#x3D; \sqrt{p_1^{a1&#x2F;2}} \cdot \sqrt{p_1^{a1&#x2F;2}}, a2 、a3 同理$ </p><p>举例子：对某个数$a$质因数分解的结果是：$a &#x3D; 2 ^3 \cdot 3^3$，那么$res &#x3D; a \cdot 2 \cdot 3$，$res$就是完全平方数，答案是$6$;</p><p>举例子：某个数的质因数分解的结果是：$a &#x3D; 2 ^2 \cdot 3^3 \cdot 5^3$， 那么$res &#x3D; a \cdot 3 \cdot 5$，$res$就是完全平方数，答案是$15$；</p><p>举例子：某个数的质因数分解的结果是：$a &#x3D; 2 ^2 \cdot 3^2 \cdot 5^2$， 那么$res &#x3D; a$，$res$就是完全平方数，答案是$1$。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll n;<br>    cin&gt;&gt;n;<br>    ll res =<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">10000010</span>;++i)&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;<br>        ll t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n%i==<span class="hljs-number">0</span>)&#123;<br>            ++t;<br>            n/=i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) res *= i;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="I-负载均衡"><a href="#I-负载均衡" class="headerlink" title="I: 负载均衡"></a><strong>I:</strong> 负载均衡</h2><p><strong>分析：</strong></p><p>代码要实现的功能总结：枚举所有任务，对于当前每个任务，消耗算力并将该算力倒计时，直到任务结束返回算力（当前任务消耗d算力c秒）。</p><p>由于时间的数据范围10^9，枚举所有的时间会超时。怎么进行算力倒计时决定了这道题的时间复杂度</p><p>优先队列维护任务占用的算力，算力释放的时间 &#x3D;（a+c)。每次分配任务前，先释放算力，如果足够分配当前任务，将该任务消耗的算力压入优先队列。</p><p>时间复杂度$O(m\cdot\log m)$</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 200010</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> arr[maxn];<br><span class="hljs-type">int</span> a, b, c, d;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> endTime, id , val;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> Node &amp;node)<span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> endTime &gt; node.endTime;<br>    &#125;<br>&#125;;<br><br>priority_queue&lt;Node&gt; q;<br><span class="hljs-comment">//释放算力</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getd</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        Node t= q.<span class="hljs-built_in">top</span>();<br>        <span class="hljs-keyword">if</span>(t.endTime &gt; a) <span class="hljs-keyword">break</span>;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> i =t.id, v = t.val;<br>        arr[i] += v;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//消耗算力</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">task</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">getd</span>();<br>    <span class="hljs-keyword">if</span>(arr[b] &gt;= d)&#123;<br>        q.<span class="hljs-built_in">push</span>(&#123;a+c, b ,d&#125;);<span class="hljs-comment">//算力排队</span><br>        arr[b] -= d;<br>        cout&lt;&lt; arr[b];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(arr, <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> arr);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;arr[i];<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        cin&gt;&gt; a&gt;&gt; b &gt;&gt;c&gt;&gt;d;<br>        <span class="hljs-built_in">task</span>();<br>        <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">0</span>) cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="J-国际象棋-状态压缩DP"><a href="#J-国际象棋-状态压缩DP" class="headerlink" title="J: 国际象棋(状态压缩DP)"></a><strong>J:</strong> 国际象棋(状态压缩DP)</h2><p>当前行的摆放位置，受到前两行的约数，重复子问题，可以用dp。由于n很小，所以可以用状态压缩</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, M = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">6</span>,K = <span class="hljs-number">21</span>, MOD = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n, m ,k;<br><span class="hljs-type">int</span> dp[N][M][M][K];<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll  long long</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getCnt</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (num)<br>    &#123;<br>        res ++;<br>        num &amp;= (num<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;a&lt; <span class="hljs-number">1</span>&lt;&lt;n;a++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = <span class="hljs-number">0</span>; b&lt; <span class="hljs-number">1</span>&lt;&lt;n;b++)&#123;<br>                <span class="hljs-keyword">if</span>(a &amp; (b &lt;&lt; <span class="hljs-number">2</span>) || b &amp; (a &lt;&lt; <span class="hljs-number">2</span>)) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;c &lt; <span class="hljs-number">1</span>&lt;&lt;n; c++)&#123;<br>                    <span class="hljs-keyword">if</span>(b &amp; (c &lt;&lt; <span class="hljs-number">2</span>) || c &amp; (b &lt;&lt; <span class="hljs-number">2</span>)) <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span>(a &amp; (c &lt;&lt; <span class="hljs-number">1</span>) || c &amp; (a &lt;&lt; <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-type">int</span> t = <span class="hljs-built_in">getCnt</span>(a);<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = t;j&lt;=k;j++)&#123;<br>                        dp[i][a][b][j] += dp[i<span class="hljs-number">-1</span>][b][c][j-t] % MOD;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1</span>&lt;&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">0</span>;j&lt; <span class="hljs-number">1</span>&lt;&lt;n;j++)<br>            res += dp[m][i][j][k]%MOD;<br><br>    cout&lt;&lt; res %MOD &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十届蓝桥杯省赛CB组</title>
    <link href="/2021/05/04/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BCB%E7%BB%84/"/>
    <url>/2021/05/04/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BCB%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="第十届蓝桥杯大赛软件类省赛-C-x2F-C-大学-B-组"><a href="#第十届蓝桥杯大赛软件类省赛-C-x2F-C-大学-B-组" class="headerlink" title="第十届蓝桥杯大赛软件类省赛 C&#x2F;C++ 大学 B 组"></a>第十届蓝桥杯大赛软件类省赛 C&#x2F;C++ 大学 B 组</h1><p>[TOC]</p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><h3 id="填空题答案一览"><a href="#填空题答案一览" class="headerlink" title="填空题答案一览"></a>填空题答案一览</h3><table><thead><tr><th>题目</th><th>答案</th><th>分数</th></tr></thead><tbody><tr><td>试题 <strong>A:</strong> 组队</td><td></td><td>5</td></tr><tr><td>试题 <strong>B:</strong> 年号字串</td><td>BYQ</td><td>5</td></tr><tr><td>试题 <strong>C:</strong> 数列求值</td><td>4659</td><td>10</td></tr><tr><td>试题 <strong>D:</strong> 数的分解</td><td>43316</td><td>10</td></tr><tr><td>试题 <strong>E:</strong> 迷宫</td><td></td><td>15</td></tr></tbody></table><h3 id="试题-A-组队"><a href="#试题-A-组队" class="headerlink" title="试题 A: 组队"></a>试题 <strong>A:</strong> 组队</h3><p><del><strong>略</strong></del></p><h3 id="试题-B-年号-字串"><a href="#试题-B-年号-字串" class="headerlink" title="试题 B: 年号:字串"></a>试题 <strong>B:</strong> 年号:字串</h3><p><strong>答案：</strong></p><p><strong>解析：</strong></p><p>进制转换</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a [<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">2019</span>,len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>        a[len++] = --n % <span class="hljs-number">26</span>;<br>        n = n/<span class="hljs-number">26</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a[i]+<span class="hljs-string">&#x27;A&#x27;</span>);<br>    cout&lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="试题-C-数列求值"><a href="#试题-C-数列求值" class="headerlink" title="试题 C: 数列求值"></a>试题 <strong>C:</strong> 数列求值</h3><p><strong>答案：</strong></p><p><strong>解析：</strong></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">20190324</span>;<br>    <span class="hljs-type">int</span> a, b ,c;<br>    a = b = c =<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">4</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> tmp = a + b + c;<br>        a = b,b = c, c = tmp%<span class="hljs-number">100000</span>;<br>    &#125;<br>    cout&lt;&lt; c%<span class="hljs-number">10000</span> &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="试题-D-数的分解"><a href="#试题-D-数的分解" class="headerlink" title="试题 D: 数的分解"></a>试题 <strong>D:</strong> 数的分解</h3><p><strong>答案：</strong></p><p><strong>解析：</strong></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(a || b || c)&#123;<br>        <span class="hljs-keyword">if</span>(a%<span class="hljs-number">10</span>==<span class="hljs-number">4</span> || a%<span class="hljs-number">10</span>==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(b%<span class="hljs-number">10</span>==<span class="hljs-number">4</span> || b%<span class="hljs-number">10</span>==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(c%<span class="hljs-number">10</span>==<span class="hljs-number">4</span> || c%<span class="hljs-number">10</span>==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        a/=<span class="hljs-number">10</span>, b/=<span class="hljs-number">10</span>, c/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">2019</span>;<br>    <span class="hljs-type">int</span> ans = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =i;j+i&lt;n;j++)&#123;<br>            <span class="hljs-type">int</span> k = n - j - i;<br>            <span class="hljs-keyword">if</span>( k &gt;= j &amp;&amp; <span class="hljs-built_in">get</span>(i,j,k)) ans ++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="试题-E-迷宫"><a href="#试题-E-迷宫" class="headerlink" title="试题 E: 迷宫"></a>试题 <strong>E:</strong> 迷宫</h3><p><strong>答案：</strong></p><p><strong>解析：</strong></p><p><strong>代码：</strong></p><h2 id="程序设计大题"><a href="#程序设计大题" class="headerlink" title="程序设计大题"></a>程序设计大题</h2><h3 id="试题-F-特别数的和"><a href="#试题-F-特别数的和" class="headerlink" title="试题 F: 特别数的和"></a>试题 <strong>F:</strong> 特别数的和</h3><p><strong>题目：</strong></p><blockquote><p>试题 <strong>F:</strong> 特别数的和</p><p>时间限制: 1.0s 内存限制: 256.0MB 本题总分：15 分</p><p>【问题描述】</p><p>小明对数位中含有 2、0、1、9 的数字很感兴趣（不包括前导 0），在 1 到</p><p>40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。</p><p>请问，在 1 到 <em>n</em> 中，所有这样的数的和是多少？</p><p>【输入格式】</p><p>输入一行包含两个整数 <em>n</em>。</p><p>【输出格式】</p><p>输出一行，包含一个整数，表示满足条件的数的和。</p><p>【样例输入】</p><p>40</p><p>【样例输出】</p><p>574</p><p>【评测用例规模与约定】</p><p>对于 20% 的评测用例，1 ≤ <em>n</em> ≤ 10。</p><p>对于 50% 的评测用例，1 ≤ <em>n</em> ≤ 100。</p><p>对于 80% 的评测用例，1 ≤ <em>n</em> ≤ 1000。</p><p>对于所有评测用例，1 ≤ <em>n</em> ≤ 10000。</p></blockquote><p><strong>解析：</strong></p><p>枚举1~n的所有数，判断是含有2、0、1、9其中的数字，就加入到答案</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        <span class="hljs-type">int</span> t = x%<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span> || t == <span class="hljs-number">2</span> || t ==<span class="hljs-number">0</span> || t == <span class="hljs-number">9</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        x /=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n, ans = <span class="hljs-number">0</span>;;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(i)) ans += i;<br>    &#125;<br>    cout&lt;&lt; ans &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="试题-G-完全二叉树的权值"><a href="#试题-G-完全二叉树的权值" class="headerlink" title="试题 G: 完全二叉树的权值"></a>试题 G: 完全二叉树的权值</h3><p><strong>题目：</strong></p><blockquote><p>试题 <strong>G:</strong> 完全二叉树的权值</p><p>时间限制: 1.0s 内存限制: 256.0MB 本题总分：20 分</p><p>【问题描述】</p><p>给定一棵包含 N 个节点的完全二叉树，树上每个节点都有一个权值，按从</p><p>上到下、从左到右的顺序依次是 <em>A</em>1, <em>A</em>2, · · · <em>A**N</em>，如下图所示：</p><p>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点</p><p>权值之和最大？如果有多个深度的权值和同为最大，请你输出其中最小的深度。</p><p>注：根的深度是 1。</p><p>【输入格式】</p><p>第一行包含一个整数 <em>N</em>。</p><p>第二行包含 <em>N</em> 个整数 <em>A</em>1, </p><p><em>A</em>2, · · · <em>A**N</em> 。</p><p>【输出格式】</p><p>输出一个整数代表答案。</p><p>【样例输入】</p><p>7</p><p>1 6 5 4 3 2 1</p><p>【样例输出】</p><p>2</p><p>【评测用例规模与约定】</p><p>对于所有评测用例，1 ≤ <em>N</em> ≤ 100000，−100000 ≤ <em>A**i</em> ≤ 100000。</p></blockquote><p><strong>解析：</strong></p><p>完全二叉树数组的层次遍历，注意int数值会越界</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 100005</span><br><span class="hljs-type">int</span> n, a[maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-type">long</span> maxv = LONG_MIN;<span class="hljs-type">int</span> maxf = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; n)&#123;<br>        <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;i&lt;(<span class="hljs-number">1</span>&lt;&lt;f);i++) sum+=a[i];<br>        <span class="hljs-keyword">if</span>(sum &gt; maxv)&#123;<br>            maxv = sum, maxf = f;<br>        &#125;<br>        ++f;<br>    &#125;<br>    cout&lt;&lt; maxf &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="试题-H-等差数列"><a href="#试题-H-等差数列" class="headerlink" title="试题 H: 等差数列"></a>试题 <strong>H:</strong> 等差数列</h3><p><strong>题目：</strong></p><blockquote><p>试题 <strong>H:</strong> 等差数列</p><p>时间限制: 1.0s 内存限制: 256.0MB 本题总分：20 分</p><p>【问题描述】</p><p>数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一部分的数列，只记得其中 <em>N</em> 个整数。</p><p>现在给出这 <em>N</em> 个整数，小明想知道包含这 <em>N</em> 个整数的最短的等差数列有几项？</p><p>【输入格式】</p><p>输入的第一行包含一个整数 <em>N</em>。</p><p>第二行包含 <em>N</em> 个整数 <em>A</em>1, <em>A</em>2, · · · , <em>A**N</em>。(注意 <em>A</em>1 ∼ <em>A**N</em> 并不一定是按等差数列中的顺序给出)</p><p>【输出格式】</p><p>输出一个整数表示答案。</p><p>【样例输入】</p><p>5</p><p>2 6 4 10 20</p><p>【样例输出】</p><p>10</p><p>【样例说明】</p><p>包含 2、6、4、10、20 的最短的等差数列是 2、4、6、8、10、12、14、16、18、20。</p><p>【评测用例规模与约定】</p><p>对于所有评测用例，2 ≤ <em>N</em> ≤ 100000，0 ≤ <em>A**i</em> ≤ 109。</p></blockquote><p><strong>解析：</strong></p><p>求排序后的数列的所有相邻差值的最小公倍数，再计算相邻之间是否要补多少数。</p><p>求得补的数+n就是答案</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 100005</span><br><span class="hljs-type">int</span> n, a[maxn];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> !b?a:<span class="hljs-built_in">gcd</span>(b,a%b);&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> minv = INT_MAX;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++) cin &gt;&gt; a[i];<br>    <span class="hljs-built_in">sort</span>(a, a + n);<br>    <span class="hljs-type">int</span> x = a[<span class="hljs-number">1</span>] - a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;i++) x = <span class="hljs-built_in">gcd</span>(a[i+<span class="hljs-number">1</span>] -a[i], x);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++) res += ((a[i+<span class="hljs-number">1</span>]-a[i])/x<span class="hljs-number">-1</span>);<br>    cout &lt;&lt; res + n&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="试题-I-后缀表达式"><a href="#试题-I-后缀表达式" class="headerlink" title="试题 I: 后缀表达式"></a>试题 <strong>I:</strong> 后缀表达式</h3><p><strong>解析：</strong></p><p>排序，小的减，大的加</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 200005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">int</span> N, M, a[maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; M;<br>    <span class="hljs-type">int</span> n = N+M+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++) cin&gt;&gt; a[i];<br>    <span class="hljs-built_in">sort</span>(a, a+n);<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(M--) res -= a[i++];<br>    <span class="hljs-keyword">while</span>(i&lt;n) res += a[i++];<br>    cout&lt;&lt; res &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第十二届蓝桥杯第一场C++B组</title>
    <link href="/2021/04/24/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC%E4%B8%80%E5%9C%BACB%E7%BB%84/"/>
    <url>/2021/04/24/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC%E4%B8%80%E5%9C%BACB%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="总起"><a href="#总起" class="headerlink" title="总起"></a>总起</h1><p>2021年蓝桥杯省赛第一场4月18号举行，赛后拿到题目：</p><blockquote><p>比赛前：去年题目那么简单，今年省一肯定有希望</p><p>比赛中：我参加的是蓝桥杯还是ACM?</p><p>比赛结束后：能拿省三就算成功</p></blockquote><h1 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h1><h2 id="填空题答案一览"><a href="#填空题答案一览" class="headerlink" title="填空题答案一览"></a>填空题答案一览</h2><table><thead><tr><th align="center">题目</th><th align="center">答案</th><th align="center">分值</th></tr></thead><tbody><tr><td align="center">A、空间</td><td align="center">6710884</td><td align="center">5</td></tr><tr><td align="center">B、卡片</td><td align="center">3181</td><td align="center">5</td></tr><tr><td align="center">C、直线</td><td align="center">40257</td><td align="center">10</td></tr><tr><td align="center">D、货物摆放</td><td align="center">2430</td><td align="center">10</td></tr><tr><td align="center">E、路径</td><td align="center">10266837</td><td align="center">15</td></tr></tbody></table><h2 id="试题-A-空间"><a href="#试题-A-空间" class="headerlink" title="试题 A: 空间"></a>试题 <strong>A:</strong> 空间</h2><p><strong>题目</strong></p><blockquote><p>本题总分：5 分</p><p>【问题描述】</p><p>小蓝准备用 256MB 的内存空间开一个数组，数组的每个元素都是 32 位</p><p>二进制整数，如果不考虑程序占用的空间和维护内存需要的辅助空间，请问</p><p>256MB 的空间可以存储多少个 32 位二进制整数？</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一</p><p>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><p><strong>答案</strong></p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">67108864</span><br></code></pre></div></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cout&lt;&lt; <span class="hljs-number">1ll</span>*<span class="hljs-number">256</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">8</span>/<span class="hljs-number">32</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="试题-B-卡片"><a href="#试题-B-卡片" class="headerlink" title="试题 B: 卡片"></a>试题 <strong>B:</strong> 卡片</h2><p><strong>题目</strong></p><blockquote><p>试题 <strong>B:</strong> 卡片</p><p>本题总分：5 分</p><p>【问题描述】</p><p>小蓝有很多数字卡片，每张卡片上都是数字 0 到 9。</p><p>小蓝准备用这些卡片来拼一些数，他想从 1 开始拼出正整数，每拼一个，</p><p>就保存起来，卡片就不能用来拼其它数了。</p><p>小蓝想知道自己能从 1 拼到多少。</p><p>例如，当小蓝有 30 张卡片，其中 0 到 9 各 3 张，则小蓝可以拼出 1 到 10，</p><p>但是拼 11 时卡片 1 已经只有一张了，不够拼出 11。</p><p>现在小蓝手里有 0 到 9 的卡片各 2021 张，共 20210 张，请问小蓝可以从 1</p><p>拼到多少？</p><p>提示：建议使用计算机编程解决问题。</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一</p><p>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><p><strong>答案</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-number">3181</span><br></code></pre></div></td></tr></table></figure><p><strong>解析</strong></p><p>不用算所有的卡片，只需要考虑卡片1的数量，任何时候卡片1始终最先消耗完。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> card = <span class="hljs-number">2021</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br><span class="hljs-type">int</span> tmp = i;<br><span class="hljs-keyword">while</span>(tmp)&#123;<br><span class="hljs-keyword">if</span>(tmp %<span class="hljs-number">10</span>==<span class="hljs-number">1</span>)&#123;<br> <span class="hljs-keyword">if</span>(--card &lt; <span class="hljs-number">0</span>)&#123;<br>                    i--;<span class="hljs-keyword">return</span>;<br> &#125;<br>&#125;<br>tmp /=<span class="hljs-number">10</span>;<br>&#125;<br>i++;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">solve</span>();<br>cout&lt;&lt; i &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="试题-C-直线"><a href="#试题-C-直线" class="headerlink" title="试题 C: 直线"></a>试题 <strong>C:</strong> 直线</h2><p><strong>题目</strong></p><blockquote><p>试题 <strong>C:</strong> 直线</p><p>本题总分：10 分</p><p>【问题描述】</p><p>在平面直角坐标系中，两点可以确定一条直线。如果有多点在一条直线上，</p><p>那么这些点中任意两点确定的直线是同一条。</p><p>给定平面上 2 × 3 个整点 {(<em>x</em>, <em>y</em>)|0 ≤ <em>x</em> &lt; 2, 0 ≤ <em>y</em> &lt; 3, <em>x</em> ∈ Z, <em>y</em> ∈ Z}，即横坐标</p><p>是 0 到 1 (包含 0 和 1) 之间的整数、纵坐标是 0 到 2 (包含 0 和 2) 之间的整数</p><p>的点。这些点一共确定了 11 条不同的直线。</p><p>给定平面上 20 × 21 个整点 {(<em>x</em>, <em>y</em>)|0 ≤ <em>x</em> &lt; 20, 0 ≤ <em>y</em> &lt; 21, <em>x</em> ∈ Z, <em>y</em> ∈ Z}，即横</p><p>坐标是 0 到 19 (包含 0 和 19) 之间的整数、纵坐标是 0 到 20 (包含 0 和 20) 之</p><p>间的整数的点。请问这些点一共确定了多少条不同的直线。</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一</p><p>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><p><strong>答案</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">40257<br></code></pre></div></td></tr></table></figure><p><strong>解析</strong></p><p>两两点确定的直线，用k值和b值去重</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; p;<br><span class="hljs-type">int</span> N =<span class="hljs-number">20</span>, M = <span class="hljs-number">21</span>;<br>set&lt;pair&lt;<span class="hljs-type">double</span>,<span class="hljs-type">double</span>&gt;&gt;s;<span class="hljs-comment">//set的作用是去重</span><br><br><span class="hljs-comment">//将两点确定的直线的斜率和截距放进set里</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addLine</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>&#123;<br><span class="hljs-type">int</span> x1 = p[i].first , y1 = p[i].second;<br><span class="hljs-type">int</span> x2 = p[j].first , y2 = p[j].second;<br><span class="hljs-keyword">if</span>(x1 == x2 || y1 == y2) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">double</span> fm = (x2 - x1) * <span class="hljs-number">1.0</span>;<br><span class="hljs-type">double</span> k = (y2-y1)*<span class="hljs-number">1.0</span>/ (x2-x1);<br><span class="hljs-type">double</span> b = (y1*x2 - x1*y2) * <span class="hljs-number">1.0</span> / fm;<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(k,b));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;N;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++) p.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(i,j));<br><span class="hljs-comment">//每个点，和这个点后面的所有点做一次计算</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;p.<span class="hljs-built_in">size</span>();i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>;j&lt;p.<span class="hljs-built_in">size</span>();j++)<span class="hljs-built_in">addLine</span>(i,j);<br><span class="hljs-keyword">return</span> (s.<span class="hljs-built_in">size</span>() + N + M);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cout&lt;&lt; <span class="hljs-built_in">solve</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="试题-D-货物摆放"><a href="#试题-D-货物摆放" class="headerlink" title="试题 D: 货物摆放"></a>试题 <strong>D:</strong> 货物摆放</h2><p><strong>题目</strong></p><blockquote><p>试题 <strong>D:</strong> 货物摆放</p><p>本题总分：10 分</p><p>【问题描述】</p><p>小蓝有一个超大的仓库，可以摆放很多货物。</p><p>现在，小蓝有 <em>n</em> 箱货物要摆放在仓库，每箱货物都是规则的正方体。小蓝</p><p>规定了长、宽、高三个互相垂直的方向，每箱货物的边都必须严格平行于长、</p><p>宽、高。</p><p>小蓝希望所有的货物最终摆成一个大的立方体。即在长、宽、高的方向上</p><p>分别堆 <em>L</em>、<em>W</em>、<em>H</em> 的货物，满足 <em>n</em> &#x3D; <em>L</em> × <em>W</em> × <em>H</em>。</p><p>给定 <em>n</em>，请问有多少种堆放货物的方案满足要求。</p><p>例如，当 <em>n</em> &#x3D; 4 时，有以下 6 种方案：1×1×4、1×2×2、1×4×1、2×1×2、 </p><p>2 × 2 × 1、4 × 1 × 1。</p><p>请问，当 <em>n</em> &#x3D; 2021041820210418 （注意有 16 位数字）时，总共有多少种</p><p>方案？</p><p>提示：建议使用计算机编程解决问题。</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一</p><p>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><p><strong>答案</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-number">2430</span><br></code></pre></div></td></tr></table></figure><h3 id="方法一：枚举所有因子组合"><a href="#方法一：枚举所有因子组合" class="headerlink" title="方法一：枚举所有因子组合"></a>方法一：枚举所有因子组合</h3><p>两重循环枚举有乘积为n的三位正整数，剪枝能达到效率要求。注意去重（三个因数大小顺序）。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll n =  <span class="hljs-number">2021041820210418L</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>;i*i*i &lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(n%i != <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        ll tmp = n / i;<br>        <span class="hljs-keyword">for</span>(ll j = <span class="hljs-number">1</span>;j*j&lt;= tmp;j++)&#123;<br>            <span class="hljs-keyword">if</span>(tmp % j != <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            ll k = tmp / j;<br>            <span class="hljs-keyword">if</span>(k &lt; j || i &gt; j)  <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(i == j &amp;&amp; i == k) ans +=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == j || i==k || j==k) ans +=<span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">else</span> ans += <span class="hljs-number">6</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; ans &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="方法二：分解质因数"><a href="#方法二：分解质因数" class="headerlink" title="方法二：分解质因数"></a>方法二：分解质因数</h3><p>对n进行质因数分解，所有质因数可求出因数个数</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PB(X) push_back(X)</span><br><span class="hljs-keyword">using</span> VI=vector&lt;<span class="hljs-type">int</span>&gt;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br>VI prime;<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">10000005</span>];<br><span class="hljs-type">int</span> nums[<span class="hljs-number">10000005</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shai</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">10000000</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(!vis[i])&#123;<br>prime.<span class="hljs-built_in">PB</span>(i);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+i;j&lt;<span class="hljs-number">10000000</span>;j+=i) vis[j] = <span class="hljs-number">1</span>; <br>&#125;<br>&#125;<br>&#125;<br>VI v;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">shai</span>();<br>ll n = <span class="hljs-number">2021041820210418</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;prime.<span class="hljs-built_in">size</span>();i++)&#123;<br>nums[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(n % prime[i] == <span class="hljs-number">0</span>)&#123;<br>n /= prime[i];<br>nums[i]++;<br>&#125;<br><span class="hljs-keyword">if</span>(nums[i] != <span class="hljs-number">0</span>) v.<span class="hljs-built_in">PB</span>(i);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;v.<span class="hljs-built_in">size</span>();++i)&#123;<br>cout&lt;&lt; prime[v[i]] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; nums[v[i]] &lt;&lt;endl;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="试题-E-路径"><a href="#试题-E-路径" class="headerlink" title="试题 E: 路径"></a>试题 <strong>E:</strong> 路径</h2><p><strong>题目</strong></p><blockquote><p>试题 <strong>E:</strong> 路径</p><p>本题总分：15 分</p><p>【问题描述】</p><p>小蓝学习了最短路径之后特别高兴，他定义了一个特别的图，希望找到图</p><p>中的最短路径。</p><p>小蓝的图由 2021 个结点组成，依次编号 1 至 2021。</p><p>对于两个不同的结点 <em>a</em>, <em>b</em>，如果 <em>a</em> 和 <em>b</em> 的差的绝对值大于 21，则两个结点</p><p>之间没有边相连；如果 <em>a</em> 和 <em>b</em> 的差的绝对值小于等于 21，则两个点之间有一条</p><p>长度为 <em>a</em> 和 <em>b</em> 的最小公倍数的无向边相连。</p><p>例如：结点 1 和结点 23 之间没有边相连；结点 3 和结点 24 之间有一条无</p><p>向边，长度为 24；结点 15 和结点 25 之间有一条无向边，长度为 75。</p><p>请计算，结点 1 和结点 2021 之间的最短路径长度是多少。</p><p>提示：建议使用计算机编程解决问题。</p><p>【答案提交】</p><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一</p><p>个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><p><strong>答案</strong></p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">10266837</span><br></code></pre></div></td></tr></table></figure><h3 id="方法一：Dijkstra"><a href="#方法一：Dijkstra" class="headerlink" title="方法一：Dijkstra"></a>方法一：Dijkstra</h3><p><strong>解析</strong></p><p>最短路模板题。构建邻接矩阵，套Dijkstra模板</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 2025</span><br><span class="hljs-type">int</span> edges[N][N];<br><span class="hljs-type">int</span> d[N];<br><span class="hljs-type">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>? a : <span class="hljs-built_in">gcd</span>(b, a%b);&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b;&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(edges, INF, <span class="hljs-built_in">sizeof</span>(edges));<span class="hljs-comment">//edges数组所有元素初始化为INF</span><br>    <span class="hljs-comment">//邻接矩阵</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;N;i++)&#123;<br>        edges[i][i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>;j &lt; N;j++)&#123;<br>            <span class="hljs-type">int</span> w = <span class="hljs-built_in">lcm</span>(i, j);<br>            edges[i][j] = edges[j][i] = w;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(d, INF, <span class="hljs-built_in">sizeof</span>(d));  <span class="hljs-comment">//d数组所有元素初始化为INF</span><br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(vis));    <span class="hljs-comment">//vis数组所有元素初始化为false</span><br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//Dijkstra</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;N;i++)&#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;  <span class="hljs-comment">//找到下一个未确定的最短路径的点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;N;j++) <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; d[j] &lt; d[x]) x= j;<br>        vis[x] =<span class="hljs-number">1</span>;<span class="hljs-comment">//标记为已确定</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, x<span class="hljs-number">-21</span>); j&lt;=<span class="hljs-built_in">min</span>(N, x +<span class="hljs-number">21</span>);j++)&#123;    <span class="hljs-comment">//用该点更新连通的点</span><br>            d[j] = <span class="hljs-built_in">min</span>(d[j] , d[x] + edges[x][j]);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; d[<span class="hljs-number">2021</span>] &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>重写了一下代码</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2022</span>;<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++) &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; N; j ++)<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[j] &lt; dist[t]))<br>                t = j;<br>                <br>        st[t] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-built_in">max</span>(t - <span class="hljs-number">21</span>, <span class="hljs-number">1</span>); j &lt;= <span class="hljs-built_in">min</span>(t + <span class="hljs-number">21</span>, N - <span class="hljs-number">1</span>); j ++)<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + t / __gcd(t, j) * j);<br>    &#125;<br>    <br>    cout &lt;&lt; dist[<span class="hljs-number">2021</span>] &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h3><p><strong>解析：</strong></p><p>由于边的特殊性（边权为两数的最小公倍数，且两数的绝对值相差不超过21才连通），那么其实从1到某点的最短路径必然是递增的，证明：<del>略</del>（不会）</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 2025</span><br><span class="hljs-type">int</span> d[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>? a : <span class="hljs-built_in">gcd</span>(b, a%b);&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <br>    <span class="hljs-built_in">memset</span>(d, INF, <span class="hljs-built_in">sizeof</span>(d));<br>    d[<span class="hljs-number">1</span>]  =<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;N;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>;j &lt; N &amp;&amp; j-i &lt;= <span class="hljs-number">21</span>;j++)&#123;<br>            d[j] = <span class="hljs-built_in">min</span>(d[j], <span class="hljs-built_in">lcm</span>(i, j)+d[i]);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt; d[<span class="hljs-number">2021</span>] &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="程序设计大题"><a href="#程序设计大题" class="headerlink" title="程序设计大题"></a>程序设计大题</h1><h2 id="试题-F-时间显示"><a href="#试题-F-时间显示" class="headerlink" title="试题 F: 时间显示"></a>试题 <strong>F:</strong> 时间显示</h2><p><strong>题目</strong></p><blockquote><p>试题 <strong>F:</strong> 时间显示</p><p>时间限制: 1.0s </p><p>内存限制: 256.0MB </p><p>本题总分：15 分</p><p>【问题描述】</p><p>小蓝要和朋友合作开发一个时间显示的网站。在服务器上，朋友已经获取</p><p>了当前的时间，用一个整数表示，值为从 1970 年 1 月 1 日 00:00:00 到当前时</p><p>刻经过的毫秒数。</p><p>现在，小蓝要在客户端显示出这个时间。小蓝不用显示出年月日，只需要</p><p>显示出时分秒即可，毫秒也不用显示，直接舍去即可。</p><p>给定一个用整数表示的时间，请将这个时间对应的时分秒输出。</p><p>【输入格式】</p><p>输入一行包含一个整数，表示时间。</p><p>【输出格式】</p><p>输出时分秒表示的当前时间，格式形如 HH:MM:SS，其中 </p><p>HH 表示时，值</p><p>为 0 到 23，MM 表示分，值为 0 到 59，SS 表示秒，值为 0 到 59。时、分、秒</p><p>不足两位时补前导 0。</p><p>【样例输入 <strong>1</strong>】</p><p>46800999</p><p>【样例输出 <strong>1</strong>】</p><p>13:00:00</p><p>【样例输入 <strong>2</strong>】</p><p>1618708103123</p><p>试题F: 时间显示 </p><p>7第十二届蓝桥杯大赛软件赛省赛 C&#x2F;C++ 大学 B 组</p><p>【样例输出 <strong>2</strong>】</p><p>01:08:23</p><p>【评测用例规模与约定】</p><p>对于所有评测用例，给定的时间为不超过 1018 </p><p>的正整数。</p></blockquote><p><strong>解析</strong></p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-function">string <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (a&gt;<span class="hljs-number">9</span>?<span class="hljs-built_in">to_string</span>(a) : (<span class="hljs-string">&quot;0&quot;</span> + <span class="hljs-built_in">to_string</span>(a)));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll a;<br>    cin&gt;&gt; a;<br>    a%=(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>);<br>    a/=<span class="hljs-number">1000</span>;<br>    <span class="hljs-type">int</span> h = a/<span class="hljs-number">3600</span>, m = (a%<span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>, s = a%<span class="hljs-number">60</span>;<br>    cout&lt;&lt;<span class="hljs-built_in">get</span>(h) &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt;<span class="hljs-built_in">get</span>(m) &lt;&lt;<span class="hljs-string">&quot;:&quot;</span> &lt;&lt; <span class="hljs-built_in">get</span>(s) &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="试题-G-砝码称重"><a href="#试题-G-砝码称重" class="headerlink" title="试题 G: 砝码称重"></a>试题 <strong>G:</strong> 砝码称重</h2><p><strong>题目</strong></p><blockquote><p>时间限制: 1.0s </p><p>内存限制: 256.0MB </p><p>本题总分：20 分</p><p>【问题描述】</p><p>你有一架天平和 <em>N</em> 个砝码，这 <em>N</em> 个砝码重量依次是 <em>W</em>1, <em>W</em>2, · · · , <em>W**N</em>。</p><p>请你计算一共可以称出多少种不同的重量？</p><p>注意砝码可以放在天平两边。</p><p>【输入格式】</p><p>输入的第一行包含一个整数 <em>N</em>。</p><p>第二行包含 <em>N</em> 个整数：<em>W</em>1, <em>W</em>2, <em>W</em>3, · · · , <em>W**N</em>。</p><p>【输出格式】</p><p>输出一个整数代表答案。</p><p>【样例输入】</p><p>3</p><p>1 4 6</p><p>【样例输出】</p><p>10</p><p>【样例说明】</p><p>能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</p><p>1 &#x3D; 1；</p><p>2 &#x3D; 6 − 4 (天平一边放 6，另一边放 4)；</p><p>3 &#x3D; 4 − 1；</p><p>4 &#x3D; 4；</p><p>5 &#x3D; 6 − 1；</p><p>6 &#x3D; 6；</p><p>7 &#x3D; 1 + 6；</p><p>9 &#x3D; 4 + 6 − 1；</p><p>10 &#x3D; 4 + 6；</p><p>11 &#x3D; 1 + 4 + 6。</p><p>【评测用例规模与约定】</p><p>对于 50% 的评测用例，1 ≤ <em>N</em> ≤ 15。</p><p>对于所有评测用例，1 ≤ <em>N</em> </p><p>≤ 100，<em>N</em> 个砝码总重不超过 100000。</p></blockquote><p><strong>解析</strong></p><p>True False问题，两遍01背包</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">dp[i] = dp[i] <span class="hljs-keyword">or</span> dp[i-w]<br>dp[i] = dp[i] <span class="hljs-keyword">or</span> dp[i + w]<br></code></pre></div></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> w[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>    cin&gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++) cin&gt;&gt;w[i];<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(dp));<br>    dp[<span class="hljs-number">0</span>] =<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">100000</span>;j&gt;=w[i];j--)&#123;<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j-w[i]]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ;i&lt;n;i++)&#123;<br>        <span class="hljs-type">int</span> size = <span class="hljs-number">100000</span> - w[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span> ;j&lt;= size;j++)&#123;<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j+w[i]]);<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(dp[i]) ans++;<br>    &#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="试题-H-杨辉三角形（待优化"><a href="#试题-H-杨辉三角形（待优化" class="headerlink" title="试题 H: 杨辉三角形（待优化"></a>试题 <strong>H:</strong> 杨辉三角形（待优化</h2><p><strong>题目</strong></p><blockquote><p>时间限制: 1.0s </p><p>内存限制: 256.0MB </p><p>本题总分：20 分</p><p>【问题描述】</p><p>下面的图形是著名的杨辉三角形：</p><p>如果我们按从上到下、从左到右的顺序把所有数排成一列，可以得到如下</p><p>数列：</p><p>1, 1, 1, 1, 2, 1, 1, 3, 3, 1, 1, 4, 6, 4, 1, …</p><p>给定一个正整数 <em>N</em>，请你输出数列中第一次出现 </p><p><em>N</em> 是在第几个数？</p><p>【输入格式】</p><p>输入一个整数 <em>N</em>。</p><p>【输出格式】</p><p>输出一个整数代表答案。</p><p>【样例输入】</p><p>6</p><p>【样例输出】</p><p>13</p><p>【评测用例规模与约定】</p><p>对于 20% 的评测用例，1 ≤ <em>N</em> ≤ 10；</p><p>对于所有评测用例，1 ≤ <em>N</em> </p><p>≤ 1000000000。</p></blockquote><p><strong>解析</strong></p><p>按题目模拟只能拿20%的分数。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><br></code></pre></div></td></tr></table></figure><h2 id="试题-I-双向排序（待优化"><a href="#试题-I-双向排序（待优化" class="headerlink" title="试题 I: 双向排序（待优化"></a>试题 <strong>I:</strong> 双向排序（待优化</h2><p><strong>题目</strong></p><blockquote><p>时间限制: 1.0s </p><p>内存限制: 256.0MB </p><p>本题总分：25 分</p><p>【问题描述】</p><p>给定序列 (<em>a</em>1, <em>a</em>2, · · · , <em>a**n</em>) &#x3D; (1, 2, · · · , <em>n</em>)，即 <em>a**i</em> </p><p>&#x3D; <em>i</em>。</p><p>小蓝将对这个序列进行 <em>m</em> 次操作，每次可能是将 <em>a</em>1, <em>a</em>2, · · · , <em>a<strong>q</strong>i</em> 降序排列，</p><p>或者将 <em>a<strong>q</strong>i</em> , <em>a<strong>q</strong>i</em>+1, · · · , <em>a**n</em> 升序排列。</p><p>请求出操作完成后的序列。</p><p>【输入格式】</p><p>输入的第一行包含两个整数 <em>n</em>, <em>m</em>，分别表示序列的长度和操作次数。</p><p>接下来 <em>m</em> 行描述对序列的操作，其中第 <em>i</em> 行包含两个整数 <em>p**i</em>, <em>q**i</em> 表示操作</p><p>类型和参数。当 <em>p**i</em> &#x3D; 0 时，表示将 <em>a</em>1, <em>a</em>2, · · · , <em>a<strong>q</strong>i</em> 降序排列；当 <em>p**i</em> &#x3D; 1 时，表示</p><p>将 <em>a<strong>q</strong>i</em> , <em>a<strong>q</strong>i</em>+1, · · · , <em>a**n</em> 升序排列。</p><p>【输出格式】</p><p>输出一行，包含 <em>n</em> </p><p>个整数，相邻的整数之间使用一个空格分隔，表示操作</p><p>完成后的序列。</p><p>【样例输入】</p><p>3 3</p><p>0 3</p><p>1 2</p><p>0 2</p><p>【样例输出】</p><p>3 1 2</p><p>【样例说明】</p><p>原数列为 (1, 2, 3)。 </p><p>第 1 步后为 (3, 2, 1)。 </p><p>第 2 步后为 (3, 1, 2)。 </p><p>第 3 步后为 (3, 1, 2)。与第 2 步操作后相同，因为前两个数已经是降序了。</p><p>【评测用例规模与约定】</p><p>对于 30% 的评测用例，<em>n</em>, <em>m</em> ≤ 1000；</p><p>对于 60% 的评测用例，<em>n</em>, <em>m</em> ≤ 5000；</p><p>对于所有评测用例，1 ≤ <em>n</em>, <em>m</em> ≤ 100000，0 ≤ <em>a**i</em> </p><p>≤ 1，1 ≤ <em>b**i</em> ≤ <em>n</em>。</p></blockquote><p><strong>解析</strong></p><p>sort模拟题目，只能过60%的数据</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 100005</span><br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-type">int</span> n , m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++) a[i] = i+<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> p , q;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        cin&gt;&gt;p&gt;&gt;q;<br>        <span class="hljs-keyword">if</span>(p)&#123;<br>            <span class="hljs-comment">//p=1 q~n 升序</span><br>            <span class="hljs-built_in">sort</span>(a+q<span class="hljs-number">-1</span>,a+n);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//p=0 1~q 降序</span><br>            <span class="hljs-built_in">sort</span>(a, a+q, [](<span class="hljs-type">int</span> &amp;a,<span class="hljs-type">int</span> &amp;b)&#123;<br>                <span class="hljs-keyword">return</span> a&gt;b;<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;a[n<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="试题-J-括号序列（待更"><a href="#试题-J-括号序列（待更" class="headerlink" title="试题 J: 括号序列（待更"></a>试题 <strong>J:</strong> 括号序列（待更</h2><p><strong>题目</strong></p><p><strong>解析</strong></p><p><strong>代码</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2020/02/20/about/"/>
    <url>/2020/02/20/about/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
